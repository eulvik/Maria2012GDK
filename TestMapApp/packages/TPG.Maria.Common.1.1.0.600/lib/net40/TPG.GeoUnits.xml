<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TPG.GeoUnits</name>
    </assembly>
    <members>
        <member name="T:TPG.GeoUnits.Contracts.IGenericPositionFormatter">
            <summary>
            Formats positions to lat lon based on position and formatting string
            </summary>
        </member>
        <member name="M:TPG.GeoUnits.Contracts.IGenericPositionFormatter.Format(TPG.GeoUnits.GeoPos,System.String,System.Globalization.CultureInfo)">
            <summary>
            Formats positions to lat lon based on position and formatting string
            </summary>
            <param name="pos">Position to format</param>
            <param name="formatString">Formatting string, identical to the one used in IGenericLatLonParser</param>
            <param name="ci">Culture info, used for decimal separator</param>
            <returns>Formatted position or null if failed</returns>
        </member>
        <member name="T:TPG.GeoUnits.Contracts.IGenericPositionParser">
            <summary>
            Parses customizable formats from string representations to to numeric 
            </summary>
        </member>
        <member name="M:TPG.GeoUnits.Contracts.IGenericPositionParser.Parse(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Parse string based pos representation to numeric position  
            </summary>
            <param name="posString">Position string matching formatString. Ex: 59°15'20.2N010°20'15.2E</param>
            <param name="formatString">
            Format string specifying lat lon format
            &lt;latdeg 00&gt;&lt;latmin 00.*\&gt;\&lt;ns&gt;&lt;londeg 000&gt;&lt;lonmin 00.*&gt;&lt;ew&gt;
            </param>
            <param name="ci">Culture info, used for decimal/separator sign</param>
            <returns>Parsed position if successful, null if parse failed</returns>
        </member>
        <member name="M:TPG.GeoUnits.Contracts.IGenericPositionParser.FormatStringToRegex(System.String,System.Globalization.CultureInfo)">
            <summary>
            Get regexp representation for a format string. This can be used to validate position inputs without
            parsing
            </summary>
            <param name="formatString">Format string specifying format. See <see cref="M:TPG.GeoUnits.Contracts.IGenericPositionParser.Parse(System.String,System.String,System.Globalization.CultureInfo)"/> for details</param>
            <param name="ci">Culture info, used for decimal/separator sign</param>
            <returns>Regular expression for matching position string</returns>
        </member>
        <member name="T:TPG.GeoUnits.Contracts.IProjectionFormatter">
            <summary>
            Interface for projection string formatter.
            </summary>
        </member>
        <member name="M:TPG.GeoUnits.Contracts.IProjectionFormatter.GetProjection(TPG.GeoUnits.GeoPos)">
            <summary>
            Get projection string at center position.
            </summary>
            <param name="centerPosition">Center position for projection.</param>
            <returns>Projection string.</returns>
        </member>
        <member name="T:TPG.GeoUnits.GenericPositionFormatter">
            <summary>
            
            </summary>
        </member>
        <member name="T:TPG.GeoUnits.GenericPositionParser">
            <summary>
            Implementation of generic lat-lon parser
            </summary>
        </member>
        <member name="T:TPG.GeoUnits.GeoUnitsSettingChangedEventArgs">
            <summary>
            Event arguments for GeoUnitsSettingChanged event.
            </summary>
        </member>
        <member name="M:TPG.GeoUnits.GeoUnitsSettingChangedEventArgs.#ctor(TPG.GeoUnits.GeoUnitSettingType)">
            <summary>
            Constructor.
            </summary>
            <param name="changedGeoUnitSettingType">Changed geo units setting type.</param>
        </member>
        <member name="P:TPG.GeoUnits.GeoUnitsSettingChangedEventArgs.ChangedGeoUnitSettingType">
            <summary>
            Get changed geo units setting type.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:TPG.GeoUnits.Earth" -->
        <member name="F:TPG.GeoUnits.Earth.RADIUS">
            <summary>
            Simplified, typical earth radius
            Rectifying radius, giving a sphere with circumference equal to the perimeter of the ellipse described by any polar cross section of the ellipsoid.
            </summary>
        </member>
        <member name="F:TPG.GeoUnits.Earth.M_NM">
            <summary>
            Ratio of meters to nautical miles 
            </summary>
        </member>
        <member name="M:TPG.GeoUnits.Earth.DegToMeters(System.Double)">
            <summary>
            Approximate length of "deg" degrees in meters along meridians
            </summary>
            <param name="deg">Degrees along surface of the earth</param>
            <returns>Meters along surface of earth</returns>
        </member>
        <member name="M:TPG.GeoUnits.Earth.MetersToDeg(System.Double)">
            <summary>
            Approximate length of "meters" in degrees along meridians
            </summary>
            <param name="meters">Degrees along surface of the earth</param>
            <returns>Degrees along surface of earth</returns>
        </member>
        <member name="M:TPG.GeoUnits.Earth.BearingRangeToPos(TPG.GeoUnits.GeoPos,TPG.GeoUnits.BearingRange)">
            <summary>
            Calculates the position based on bearing and distance from pos.
            </summary>
            <param name="pos">Initial position</param>
            <param name="br">Bearing-range in from initial position</param>
            <remarks>SSE: Improved accuracy on small ranges by replacing acos with an atan equivalent</remarks>
            <remarks>RH: Ported to C#</remarks>
            <returns>Resulting position</returns>
        </member>
        <member name="M:TPG.GeoUnits.Earth.BearingRange(TPG.GeoUnits.GeoPos,TPG.GeoUnits.GeoPos)">
            <summary>
            Computes bearing from pos0 to pos1
            </summary>
            <param name="pos0">First position</param>
            <param name="pos1">Second position</param>
            <returns>BearingRange between pos0 and pos1</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TPG.GeoUnits.Earth.IntermediatePos(TPG.GeoUnits.GeoPos,TPG.GeoUnits.GeoPos,System.Int32)" -->
        <member name="M:TPG.GeoUnits.Earth.RadiansBetween(TPG.GeoUnits.GeoPos,TPG.GeoUnits.GeoPos)">
            <summary>
            Computes the distance from p0 to p1 in radians
            </summary>
            <param name="p0">First position</param>
            <param name="p1">Second position</param>
            <returns>Distance in radians. To get distances in meters, use MetersBetween</returns>
        </member>
        <member name="M:TPG.GeoUnits.Earth.MetersBetween(TPG.GeoUnits.GeoPos,TPG.GeoUnits.GeoPos)">
            <summary>
            Computes distance in meters between positions p0 and p1
            </summary>
            <param name="p0">First position</param>
            <param name="p1">Second position</param>
            <returns>Distance between p0 and p1 in meters</returns>
        </member>
        <member name="M:TPG.GeoUnits.Earth.NormalizedBearingDiff(System.Double,System.Double)">
            <summary>
            Returns smallest bearing difference, normalized to +-180
            </summary>
            <param name="br1">First bearing in degrees</param>
            <param name="br2">Second bearing in degrees</param>
            <returns></returns>
        </member>
        <member name="M:TPG.GeoUnits.Earth.CrossTrackError(TPG.GeoUnits.GeoPos,System.Double,TPG.GeoUnits.GeoPos)">
            <summary>
            Calculates meters error off a path from pos0 along bearing.
            </summary>
            <param name="pos0">First position</param>
            <param name="bearing">Bearing</param>
            <param name="pos1">Second position</param>
            <returns>Meters error</returns>
        </member>
        <member name="M:TPG.GeoUnits.Earth.GetAtmosphericPressure(System.Double)">
            <summary>
            Returns the atmospheric/barometric pressure in kPa for a given elevation
            Formula from http://www.engineeringtoolbox.com/air-altitude-pressure-d_462.html
            </summary>
            <param name="elev"></param>
            <returns>Atmospheric pressure in kPa</returns>
        </member>
        <member name="M:TPG.GeoUnits.GeoFormat.FormatElevation(System.Double,TPG.GeoUnits.ElevationUnit,System.Boolean)">
            <summary>
            Formats an elevation to a readable form in the specified elevation unit.
            </summary>
            <param name="elevationMeters">Elevation, in meters.</param>
            <param name="elevationUnit">Elevation unit the elevation shall be displayed in.</param>
            <param name="space"></param>
            <returns></returns>
        </member>
        <member name="T:TPG.GeoUnits.GeoPos">
            <summary>
            Represents a geographical position.
            </summary>
        </member>
        <member name="F:TPG.GeoUnits.GeoPos.Lat">
            <summary> Latitude of the position, in degrees. </summary>
            <value> Between -90.0 and  90.0 defgrees. </value>
        </member>
        <member name="F:TPG.GeoUnits.GeoPos.Lon">
            <summary> Longitude of the position, in degrees. </summary>
            <value> Between -180.0 and 180.0 degrees.</value>
        </member>
        <member name="M:TPG.GeoUnits.GeoPos.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:TPG.GeoUnits.GeoPos"/> struct from separate latitude and longitude values (degrees).
            </summary>
            <param name="lat"> Latitude of the position, in degrees. </param>
            <param name="lon"> Longitude of the position, in degrees. </param>
        </member>
        <member name="M:TPG.GeoUnits.GeoPos.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:TPG.GeoUnits.GeoPos"/> struct from dms components.
            </summary>
            <param name="latDeg">Latitude degrees [-90,90]</param>
            <param name="latMin">Latutude minutes</param>
            <param name="latSec">Latitude seconds</param>
            <param name="lonDeg">Longitude degrees [-180,180]</param>
            <param name="lonMin">Longitude minutes</param>
            <param name="lonSec">Longitude seconds</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TPG.GeoUnits.GeoPos.#ctor(System.Tuple{System.Double,System.Double})" -->
        <member name="M:TPG.GeoUnits.GeoPos.Set(System.Double,System.Double)">
            <summary>
            Sets/re-sets the position.
            </summary>
            <param name="lat"> Latitude of the position, in degrees. </param>
            <param name="lon"> Longitude of the position, in degrees. </param>
        </member>
        <member name="M:TPG.GeoUnits.GeoPos.SetInvalid">
            <summary>
            Sets the content to an invalid position.
            </summary>
        </member>
        <member name="M:TPG.GeoUnits.GeoPos.op_Equality(TPG.GeoUnits.GeoPos,TPG.GeoUnits.GeoPos)">
            <summary>
            Checks if two <see cref="T:TPG.GeoUnits.GeoPos"/> structs have equal content.
            </summary>
            <param name="p1"> First <see cref="T:TPG.GeoUnits.GeoPos"/> </param>
            <param name="p2"> Second <see cref="T:TPG.GeoUnits.GeoPos"/> </param>
            <returns></returns>
        </member>
        <member name="M:TPG.GeoUnits.GeoPos.op_Inequality(TPG.GeoUnits.GeoPos,TPG.GeoUnits.GeoPos)">
            <summary>
            Checks if two <see cref="T:TPG.GeoUnits.GeoPos"/> structs have different content.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:TPG.GeoUnits.GeoPos.Equals(System.Object)">
            <summary>
             Checks if a <see cref="T:TPG.GeoUnits.GeoPos"/> structs have equal content to this.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:TPG.GeoUnits.GeoPos.GetHashCode">
            <summary>
            Get the objects hash code.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="M:TPG.GeoUnits.GeoPos.ToString">
            <summary>
            Returns the <see cref="T:TPG.GeoUnits.GeoPos"/> struct as formatted string (PositionFormat: GeoDMS).
            </summary>
            <returns> Formatted string. </returns>
        </member>
        <member name="M:TPG.GeoUnits.GeoPos.ToString(TPG.GeoUnits.PositionFormat)">
            <summary>
            Returns the <see cref="T:TPG.GeoUnits.GeoPos"/> struct as formatted string, selectable format.
            </summary>
            <param name="posFormat"> Selected <see cref="T:TPG.GeoUnits.PositionFormat"/>. </param>
            <returns>Formatted string.</returns>
        </member>
        <member name="M:TPG.GeoUnits.GeoPos.ToString(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns the <see cref="T:TPG.GeoUnits.GeoPos"/> struct as formatted string (PositionFormat: GeoDMS).
            </summary>
            <returns> Formatted string. </returns>
        </member>
        <member name="M:TPG.GeoUnits.GeoPos.Parse(System.String,TPG.GeoUnits.IGeoUnitsSettingProvider)">
            <summary>
            Parsing the content of a formatted position string according to provided format.
            </summary>
            <param name="s"> String to be parsed. </param>
            <param name="unitSettingProvider"> Provided <see cref="T:TPG.GeoUnits.IGeoUnitsSettingProvider"/> format. </param>
            <returns> New <see cref="T:TPG.GeoUnits.GeoPos"/> instance. </returns>
        </member>
        <member name="M:TPG.GeoUnits.GeoPos.Parse(System.String,TPG.GeoUnits.PositionFormat)">
            <summary>
            Parsing the content of a formatted position string according to provided format.
            </summary>
            <param name="s"> String to be parsed. </param>
            <param name="posFormat"> Provided <see cref="T:TPG.GeoUnits.PositionFormat"/> format. </param>
            <returns> New <see cref="T:TPG.GeoUnits.GeoPos"/> instance. </returns>
        </member>
        <member name="M:TPG.GeoUnits.GeoPos.TryParse(System.String,TPG.GeoUnits.IGeoUnitsSettingProvider,TPG.GeoUnits.GeoPos@)">
            <summary>
            Try parsing the content of a formatted position string according to provided format.
            </summary>
            <param name="s"> String to be parsed. </param>
            <param name="unitSettingProvider"> Provided <see cref="T:TPG.GeoUnits.IGeoUnitsSettingProvider"/> format. </param>
            <param name="gp"> New <see cref="T:TPG.GeoUnits.GeoPos"/> instance. </param>
            <returns> True if parsed sucessfully, othervice false. </returns>
        </member>
        <member name="M:TPG.GeoUnits.GeoPos.TryParse(System.String,TPG.GeoUnits.PositionFormat,TPG.GeoUnits.GeoPos@)">
            <summary>
            Try parsing the content of a formatted position string according to provided format.
            </summary>
            <param name="s"> String to be parsed. </param>
            <param name="posFormat"> Provided <see cref="T:TPG.GeoUnits.PositionFormat"/> format. </param>
            <param name="gp"> New <see cref="T:TPG.GeoUnits.GeoPos"/> instance. </param>
            <returns> True if parsed sucessfully, othervice false. </returns>
        </member>
        <member name="P:TPG.GeoUnits.GeoPos.IsValid">
            <summary> Valitation of position. </summary>
            <remarks> True if contained position is valid, otherwice false. </remarks>
        </member>
        <member name="P:TPG.GeoUnits.GeoPos.InvalidPos">
            <summary>
            <see cref="T:TPG.GeoUnits.GeoPos"/> struct representing an invalid position.
            </summary>
        </member>
        <member name="T:TPG.GeoUnits.GeoPos3D">
            <summary>
            Represents a geographical position with elevation.
            </summary>
        </member>
        <member name="F:TPG.GeoUnits.GeoPos3D.Pos">
            <summary>
            Geographical position
            </summary>
        </member>
        <member name="F:TPG.GeoUnits.GeoPos3D.Elev">
            <summary>
            Elevation.
            </summary>
            <value> meter above sea level. </value>
        </member>
        <member name="M:TPG.GeoUnits.GeoPos3D.#ctor(TPG.GeoUnits.GeoPos)">
            <summary>
            Initializes a new instance of the <see cref="T:TPG.GeoUnits.GeoPos3D"/> struct from geograpgical position, default elevation (0).
            </summary>
            <param name="pos"> Geographical position. </param>
        </member>
        <member name="M:TPG.GeoUnits.GeoPos3D.#ctor(TPG.GeoUnits.GeoPos,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:TPG.GeoUnits.GeoPos3D"/> struct from geograpgical position and elevation
            </summary>
            <param name="pos"> Geographical position. </param>
            <param name="elev"> Elevation. </param>
        </member>
        <member name="M:TPG.GeoUnits.GeoPos3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:TPG.GeoUnits.GeoPos3D"/> struct from separate latitude, longitude and elebvation.
            </summary>
            <param name="lat"> Lattitude. </param>
            <param name="lon"> Longitude. </param>
            <param name="elev">Elevation. </param>
        </member>
        <member name="M:TPG.GeoUnits.GeoPos3D.#ctor(TPG.GeoUnits.UTMPos3D)">
            <summary>
            Initializes a new instance of the <see cref="T:TPG.GeoUnits.GeoPos3D"/> struct from an <see cref="T:TPG.GeoUnits.UTMPos3D"/> struct.
            </summary>
            <param name="pos"></param>
        </member>
        <member name="P:TPG.GeoUnits.GeoPos3D.Lat">
            <summary> Latitude of the position, in degrees. </summary>
        </member>
        <member name="P:TPG.GeoUnits.GeoPos3D.Lon">
            <summary> Longitude of the position, in degrees. </summary>
        </member>
        <member name="P:TPG.GeoUnits.GeoPos3D.InvalidPos">
            <summary>
            <see cref="T:TPG.GeoUnits.GeoPos3D"/> struct representing an invalid position.
            </summary>
        </member>
        <member name="P:TPG.GeoUnits.GeoPos3D.IsValid">
            <summary> Valitation of position. </summary>
            <remarks> True if contained position is valid, otherwice false. </remarks>
        </member>
        <member name="T:TPG.GeoUnits.GeoRect">
            <summary>
            Robust lat-lon rectangle representation
            </summary>
        </member>
        <member name="F:TPG.GeoUnits.GeoRect.Global">
            <summary>
            <see cref="T:TPG.GeoUnits.GeoRect"/> struct representing the entire globe. (Center point 0,0 - 180 degrees heigh (delta lat) 360 degrees wide (delta longitude).
            </summary>
        </member>
        <member name="F:TPG.GeoUnits.GeoRect.Center">
            <summary>
            The center position.
            </summary>
        </member>
        <member name="F:TPG.GeoUnits.GeoRect.DeltaLat">
            <summary>
            Delta latitude ("lattitude size").
            </summary>
        </member>
        <member name="F:TPG.GeoUnits.GeoRect.DeltaLon">
            <summary>
            Delta longitude ("longitude size")
            </summary>
        </member>
        <member name="M:TPG.GeoUnits.GeoRect.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary> Initializes a new instance of the <see cref="T:TPG.GeoUnits.GeoRect"/> struct from south, west, north and east most points. </summary> 
            <param name="swLat"> South most point (latitude).</param>
            <param name="swLon"> West most point (longitude).</param>
            <param name="neLat"> North most point (latitude).</param>
            <param name="neLon"> East most point (longitude).</param>
        </member>
        <member name="M:TPG.GeoUnits.GeoRect.#ctor(TPG.GeoUnits.GeoPos,TPG.GeoUnits.GeoPos)">
            <summary> Initializes a new instance of the <see cref="T:TPG.GeoUnits.GeoRect"/> struct from south-west most and north-east most points. </summary> 
            <param name="sw"> South-west most point. </param>
            <param name="ne"> north-east most point. </param>
        </member>
        <member name="M:TPG.GeoUnits.GeoRect.#ctor(TPG.GeoUnits.GeoPos)">
            <summary> Initializes a new instance of the <see cref="T:TPG.GeoUnits.GeoRect"/> struct, from another <see cref="T:TPG.GeoUnits.GeoRect"/> struct. </summary> 
            <param name="pos">Center position.</param>
        </member>
        <member name="M:TPG.GeoUnits.GeoRect.#ctor(TPG.GeoUnits.GeoPos,System.Double,System.Double)">
            <summary> Initializes a new instance of the <see cref="T:TPG.GeoUnits.GeoRect"/> struct from centerposition, height and width. </summary> 
            <param name="pos"> Center position. </param>
            <param name="deltaLat">Delta latitude ("lattitude size").</param>
            <param name="deltaLon">Delta Longitude ("longitudel size").</param>
        </member>
        <member name="M:TPG.GeoUnits.GeoRect.#ctor(System.Double,System.Double)">
            <summary> Initializes a new instance of the <see cref="T:TPG.GeoUnits.GeoRect"/> struct, form min/max latitude, with longitude -180 - 180. </summary> 
            <param name="minLat"> South most edge.</param>
            <param name="maxLat"> North most edge. </param>
            <remarks>special case includes poles, either minLat must be -90 or maxLat must be 90</remarks>
        </member>
        <member name="M:TPG.GeoUnits.GeoRect.#ctor(TPG.GeoUnits.GeoPos[])">
            <summary> Initializes a new instance of the <see cref="T:TPG.GeoUnits.GeoRect"/> struct containing the minimum enclosing rectangle which bounds the given <see cref="T:TPG.GeoUnits.GeoRect"/> structs. 
            Please note that if the input points span a longitude range of more than 180 degrees, the minimum bounding rectangle may be on the opposite side of the globe and less than 180 degrees in longitude! 
            </summary> 
            <param name="pos"></param>
        </member>
        <member name="M:TPG.GeoUnits.GeoRect.AddPos(TPG.GeoUnits.GeoPos)">
            <summary>
            Extend the area by including a new position.
            </summary>
            <param name="pos"> New position. </param>
        </member>
        <member name="M:TPG.GeoUnits.GeoRect.NormalizedLat(System.Double)">
            <summary>
            Normalizing a latitude value.
            </summary>
            <param name="lat"> "Raw" latitude value. </param>
            <returns> Normalized latitude, between -90 and 90 (truncated) </returns>
        </member>
        <member name="M:TPG.GeoUnits.GeoRect.NormalizedLon(System.Double)">
            <summary>
            Normalizing a longitude value.
            </summary>
            <param name="lon">"Raw" longitude value. </param>
            <returns> Normalized longitude, between -180 and 180 (adjusted) </returns>
        </member>
        <member name="M:TPG.GeoUnits.GeoRect.LatDistance(System.Double,System.Double)">
            <summary>
            Calculates delta latitude.
            </summary>
            <param name="lat1"> First latitude. </param>
            <param name="lat2"> Second latitude. </param>
            <returns> Delta latitude </returns>
        </member>
        <member name="M:TPG.GeoUnits.GeoRect.LonDistance(System.Double,System.Double)">
            <summary>
            Calculates delta longitude.
            </summary>
            <param name="lon1"> First longitude. </param>
            <param name="lon2"> Second longitude. </param>
            <returns> Delta longitude </returns>
        </member>
        <member name="M:TPG.GeoUnits.GeoRect.ToString">
            <summary>
            Return center position and delta lat/long formatted.
            </summary>
            <returns>Formatted result.</returns>
        </member>
        <member name="M:TPG.GeoUnits.GeoRect.Contains(TPG.GeoUnits.GeoPos)">
            <summary>
            Checks if a given <see cref="T:TPG.GeoUnits.GeoPos"/> is inside the area.
            </summary>
            <param name="pos"> Position to check.  </param>
            <returns> True if area contains the given position, otherwice false. </returns>
        </member>
        <member name="M:TPG.GeoUnits.GeoRect.Intersects(TPG.GeoUnits.GeoRect)">
            <summary>
            Checks if a given <see cref="T:TPG.GeoUnits.GeoRect"/> intersects the area.
            </summary>
            <param name="rc"> Rectangle to check. </param>
            <returns> True if any part of rc is inside the area </returns>
        </member>
        <member name="M:TPG.GeoUnits.GeoRect.Contains(TPG.GeoUnits.GeoRect)">
            <summary>
            Checks if a given <see cref="T:TPG.GeoUnits.GeoRect"/> is contained in the area.
            </summary>
            <param name="rc"> Rectangle to check. </param>
            <returns> True if rc is fully contained in the area </returns>
        </member>
        <member name="M:TPG.GeoUnits.GeoRect.Intersection(TPG.GeoUnits.GeoRect)">
            <summary>
            Returns the intersecting area of two <see cref="T:TPG.GeoUnits.GeoRect"/> structs
            </summary>
            <param name="rc"> Intersecting struct. </param>
            <returns> The intersecting area. </returns>
        </member>
        <member name="M:TPG.GeoUnits.GeoRect.Equals(System.Object)">
            <summary>
            Chacks if two <see cref="T:TPG.GeoUnits.GeoRect"/> structs are equal.
            </summary>
            <param name="obj"> Struct to check. </param>
            <returns> True if equal, otherwice false. </returns>
        </member>
        <member name="M:TPG.GeoUnits.GeoRect.GetHashCode">
            <summary>
            Not implemented!
            </summary>
            <returns>Not implemented!</returns>
        </member>
        <member name="P:TPG.GeoUnits.GeoRect.IsInit">
            <summary>
            True if rectangle has an area - or centerpoint differs from 0,0. Otherwice false.
            </summary>
        </member>
        <member name="P:TPG.GeoUnits.GeoRect.HasArea">
            <summary>
            True if rectangle has an area. Otherwice false.
            </summary>
        </member>
        <member name="P:TPG.GeoUnits.GeoRect.IsValid">
            <summary>
            True centerpoint ia a valid position.Otherwice false.
            </summary>
        </member>
        <member name="P:TPG.GeoUnits.GeoRect.LowerLeft">
            <summary>
            Get LowerLeft position of <see cref="T:TPG.GeoUnits.GeoRect"/> struct
            </summary>
        </member>
        <member name="P:TPG.GeoUnits.GeoRect.UpperRight">
            <summary>
            Get UpperRight position of <see cref="T:TPG.GeoUnits.GeoRect"/> struct
            </summary>
        </member>
        <member name="P:TPG.GeoUnits.GeoRect.UpperLeft">
            <summary>
            Get UpperLeft position of <see cref="T:TPG.GeoUnits.GeoRect"/> struct
            </summary>
        </member>
        <member name="P:TPG.GeoUnits.GeoRect.LowerRight">
            <summary>
            Get LowerRight position of <see cref="T:TPG.GeoUnits.GeoRect"/> struct
            </summary>
        </member>
        <member name="T:TPG.GeoUnits.GeoUnitsConsts">
            <summary>
            Conversion constants, for conversion between different geographical units.
            </summary>
        </member>
        <member name="F:TPG.GeoUnits.GeoUnitsConsts.MetersPerFeet">
            <summary>
            For conversion from feet to meter.
            </summary>
        </member>
        <member name="F:TPG.GeoUnits.GeoUnitsConsts.FeetPerMeter">
            <summary>
            For conversion from meter to feet.
            </summary>
        </member>
        <member name="F:TPG.GeoUnits.GeoUnitsConsts.MetersPerKilometer">
            <summary>
            For conversion from Kilo Meter to meter
            </summary>
        </member>
        <member name="F:TPG.GeoUnits.GeoUnitsConsts.MetersPerNauticalMiles">
            <summary>
            Multiply to convert from nautical miles to meter, divide to convert from meter to nautical miles.
            </summary>
        </member>
        <member name="F:TPG.GeoUnits.GeoUnitsConsts.MilesPerMeter">
            <summary>
            Multiply to convert from meter to miles, divide to convert from miles to meter.
            </summary>
        </member>
        <member name="F:TPG.GeoUnits.GeoUnitsConsts.YardsPerMeter">
            <summary>
            Multiply to convert from meter to yard, divide to convert from yard to meter.
            </summary>
        </member>
        <member name="T:TPG.GeoUnits.GeoUnitsSetting">
            <summary>
            Contains geographical unit and format settings.
            </summary>
        </member>
        <member name="E:TPG.GeoUnits.IGeoUnitsSetting.GeoUnitsSettingChanged">
            <summary>
            Geo unit changed.
            </summary>
        </member>
        <member name="P:TPG.GeoUnits.IGeoUnitsSetting.PositionFormat">
            <summary>
            Get or set position format.
            </summary>
        </member>
        <member name="P:TPG.GeoUnits.IGeoUnitsSetting.BearingType">
            <summary>
            Get or set bearing type.
            </summary>
        </member>
        <member name="P:TPG.GeoUnits.IGeoUnitsSetting.BearingUnit">
            <summary>
            Get or set bearing unit.
            </summary>
        </member>
        <member name="P:TPG.GeoUnits.IGeoUnitsSetting.SpeedType">
            <summary>
            Get or set speed unit.
            </summary>
        </member>
        <member name="P:TPG.GeoUnits.IGeoUnitsSetting.DistanceUnit">
            <summary>
            Get or set distance unit.
            </summary>
        </member>
        <member name="P:TPG.GeoUnits.IGeoUnitsSetting.ElevationUnit">
            <summary>
            Get or set elevation unit.
            </summary>
        </member>
        <member name="E:TPG.GeoUnits.GeoUnitsSetting.GeoUnitsSettingChanged">
            <inheritdoc/>
        </member>
        <member name="P:TPG.GeoUnits.GeoUnitsSetting.PositionFormat">
            <inheritdoc/>
        </member>
        <member name="P:TPG.GeoUnits.GeoUnitsSetting.BearingType">
            <inheritdoc/>
        </member>
        <member name="P:TPG.GeoUnits.GeoUnitsSetting.BearingUnit">
            <inheritdoc/>
        </member>
        <member name="P:TPG.GeoUnits.GeoUnitsSetting.SpeedType">
            <inheritdoc/>
        </member>
        <member name="P:TPG.GeoUnits.GeoUnitsSetting.DistanceUnit">
            <inheritdoc/>
        </member>
        <member name="P:TPG.GeoUnits.GeoUnitsSetting.ElevationUnit">
            <inheritdoc/>
        </member>
        <member name="P:TPG.GeoUnits.PosError.Cep">
            <summary>
            Meter.
            </summary>
        </member>
        <member name="P:TPG.GeoUnits.PosError.Lep">
            <summary>
            Meter.
            </summary>
        </member>
        <member name="P:TPG.GeoUnits.PosError.AzPe">
            <summary>
            Radians.
            </summary>
        </member>
        <member name="T:TPG.GeoUnits.ProjectionFormatter">
            <summary>
            Projection string formatter.
            </summary>
        </member>
        <member name="M:TPG.GeoUnits.ProjectionFormatter.#ctor(TPG.GeoUnits.DisplayProjectionTypes)">
            <summary>
            Initializes a new instanec of teh ProjectionFormatter class.
            </summary>
            <param name="projectionType">Type of projection to format.</param>
        </member>
        <member name="M:TPG.GeoUnits.ProjectionFormatter.GetProjection(TPG.GeoUnits.GeoPos)">
            <inheritdoc/>
        </member>
        <member name="T:TPG.GeoUnits.GeoUnitSettingType">
            <summary>
            Geo unit setting type definitions.
            </summary>
        </member>
        <member name="F:TPG.GeoUnits.PositionFormat.GeoDeg">
            <summary>
            Lat/Lon Degrees
            </summary>
        </member>
        <member name="F:TPG.GeoUnits.PositionFormat.GeoDM">
            <summary>
            Lat/Lon DegreesAndMinutes
            </summary>
        </member>
        <member name="F:TPG.GeoUnits.PositionFormat.GeoDMS">
            <summary>
            Lat/Lon Degrees, Minutes and Seconds
            </summary>
        </member>
        <member name="F:TPG.GeoUnits.PositionFormat.GeoText">
            <summary>
            Lat/Lon Degrees, Minutes and Seconds Text
            </summary>
        </member>
        <member name="F:TPG.GeoUnits.PositionFormat.MGRS_1m">
            <summary>
            Military Grid Reference System
            </summary>
        </member>
        <member name="F:TPG.GeoUnits.PositionFormat.UTM">
            <summary>
            Universal Transverse Mercator
            </summary>
        </member>
        <member name="F:TPG.GeoUnits.PositionFormat.UTM_LC2IS">
            <summary>
            Universal Transverse Mercator - LC2IS
            </summary>
        </member>
        <member name="F:TPG.GeoUnits.PositionFormat.Georef">
            <summary>
            Georef
            </summary>
        </member>
        <member name="F:TPG.GeoUnits.PositionFormat.LatLonDdmm">
            <summary>
            Legacy; Lat-Lon degrees and integer minutes, 0-padded, fixed length.
            </summary>
        </member>
        <member name="F:TPG.GeoUnits.PositionFormat.LatLonDdmmm">
            <summary>
            Legacy; Lat-Lon degrees and minutes rounded to one decimal, 0-padded, fixed length.
            </summary>
        </member>
        <member name="F:TPG.GeoUnits.PositionFormat.LatLonDdmmss">
            <summary>
            Legacy; Lat-Lon degrees, minutes and integer seconds, 0-padded, fixed length.
            </summary>
        </member>
        <member name="F:TPG.GeoUnits.PositionFormat.LatLonDdmmsss">
            <summary>
            Legacy; Lat-Lon degrees, minutes and seconds rounded to one decimal, 0-padded, fixed length.
            </summary>
        </member>
        <member name="F:TPG.GeoUnits.ElevationMode.AGL">
            <summary>
            Above Ground Level
            </summary>
        </member>
        <member name="F:TPG.GeoUnits.ElevationMode.AMSL">
            <summary>
            Above Mean Sea Level
            </summary>
        </member>
        <member name="M:TPG.GeoUnits.SphericalEllipse.EllipticIntegral_SecondKind(System.Double)">
             <summary>
             Complete elliptical integral of the second kind
             </summary>
             <param name="beta"></param>
             <returns></returns>
             
            Quoted from Semjon Adlaj's 2012 paper:
                 ....
            The formula given via equation (1) [Gauss discovery of relation to AGM, 1799] signified a qualitative transition in connecting the study of
            elliptic integrals of the first kind with studying elliptic functions. Yet, a formula, analogous to (1), for calculating elliptic integrals
            of the second kind had defied all subsequent efforts at attaining it, awaiting December 16, 2011, to be discovered.
            ....
            The formula for calculating complete elliptic integrals of the second kind be now known:
            
        </member>
        <member name="M:TPG.GeoUnits.EllipticObject.Surface(System.Double,System.Double)">
            <summary>
            Surface in m2 of elliptic / circular objects
            not exceeding a hemisphere.
            </summary>
            <param name="rU">radius in meters</param>
            <param name="rV">radius in meters</param>
            <returns></returns>
        </member>
        <member name="M:TPG.GeoUnits.EllipticObject.Circumference(System.Double,System.Double)">
            <summary>
            Circumference in m of elliptic / circular objects
            not exceeding a hemisphere.
            </summary>
            <param name="rU">radius in meters</param>
            <param name="rV">radius in meters</param>
            <returns></returns>
        </member>
        <member name="M:TPG.GeoUnits.SectorObject.Surface(System.Double,System.Double,System.Double)">
            <summary>
            Surface in m2 of sector objects
            not exceeding a hemisphere.
            </summary>
            <param name="rU">outer radius in meters</param>
            <param name="rV">inner radius in meters</param>
            <param name="Alpha">sector arc in degrees</param>
            <returns></returns>
        </member>
        <member name="M:TPG.GeoUnits.SectorObject.Circumference(System.Double,System.Double,System.Double)">
            <summary>
            Circumference in m of sector objects
            not exceeding a hemisphere.
            </summary>
            <param name="rU">radius in meters</param>
            <param name="rV">radius in meters</param>
            <returns></returns>
        </member>
        <member name="M:TPG.GeoUnits.CorridorObject.Surface(TPG.GeoUnits.GeoPos[],System.Double)">
            <summary>
            Surface in m2 of corridor objects
            </summary>
            <param name="lstPos">array of positions</param>
            <param name="width">corridor width in meters</param>
            <returns></returns>
        </member>
        <member name="M:TPG.GeoUnits.CorridorObject.Circumference(TPG.GeoUnits.GeoPos[],System.Double)">
            <summary>
            Circumference in m of corridor objects
            </summary>
            <param name="lstPos">array of positions</param>
            <param name="width">corridor width in meters</param>
            <returns></returns>
        </member>
        <member name="M:TPG.GeoUnits.CorridorObject.Length(TPG.GeoUnits.GeoPos[])">
            <summary>
            Length in m of corridor centerline
            </summary>
            <param name="lstPos">array of positions</param>
            <returns></returns>
        </member>
        <member name="M:TPG.GeoUnits.PolygonObject.Surface(TPG.GeoUnits.GeoPos[])">
            <summary>
            Surface in m2 of polygon objects
            </summary>
            <param name="lstPos">array of positions</param>
            <returns></returns>
        </member>
        <member name="M:TPG.GeoUnits.PolygonObject.Circumference(TPG.GeoUnits.GeoPos[])">
            <summary>
            Circumference in m of polygon objects
            </summary>
            <param name="lstPos">array of positions</param>
            <returns></returns>
        </member>
        <member name="M:TPG.GeoUnits.OrbitObject.Surface(TPG.GeoUnits.GeoPos,TPG.GeoUnits.GeoPos)">
            <summary>
            Surface in m2 of orbit objects
            </summary>
            <param name="P">first focal point</param>
            <param name="P">second focal point</param>
            <returns></returns>
        </member>
        <member name="M:TPG.GeoUnits.OrbitObject.Circumference(TPG.GeoUnits.GeoPos,TPG.GeoUnits.GeoPos)">
            <summary>
            Circumference in m of orbit objects
            </summary>
            <param name="P">first focal point</param>
            <param name="P">second focal point</param>
            <returns></returns>
        </member>
    </members>
</doc>
