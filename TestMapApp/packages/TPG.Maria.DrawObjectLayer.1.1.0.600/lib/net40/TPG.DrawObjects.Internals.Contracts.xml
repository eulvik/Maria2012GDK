<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TPG.DrawObjects.Internals.Contracts</name>
    </assembly>
    <members>
        <member name="T:TPG.DrawObjects.Internals.Contracts.DrawObjectType.DrawObjectTypeDefinitionExtraTags">
            <summary>
             Contains predefined extra tags used by DrawObjectsNG for draw object type definitions
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.DrawObjectType.DrawObjectTypeDefinitionExtraTags.Hierarchy2525C">
            <summary>
             Used to specify 2525C hierarchy code
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.DrawObjectType.Serializers.DrawObjectTypeDefinitionXmlTags">
            <summary>
             Defines xml element and attribute names used for xml serializing and parsing of DrawObjectTypeDefinition 
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.IViewportDependentCreationWorkflow">
            <summary>
            A viewport dependent workflow.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.IViewportDependentCreationWorkflow.HandleViewportChanged(TPG.DrawObjects.Internals.Contracts.Module.EventManager.ViewportChangedEventArgs,TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectWorkflowState,System.Guid)">
            <summary>
            Handle viewport changed.
            </summary>
            <param name="viewportChangedEventArgs">Viewport changed event arguments.</param>
            <param name="workflowState">Workflow state.</param>
            <param name="drawObjectTypeId">Draw object type id.</param>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.IDrawObjectCreationWorkflowDecorationFactory">
            <summary>
            Interface for a decoration object provider. 
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.IDrawObjectCreationWorkflowDecorationFactory.AddDecorationType(System.String,System.Func{TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.IDrawObjectCreationWorkflowDecoration})">
            <summary>
             Adds a new decoration type to factory
            </summary>
            <param name="decorationTypeId">Decoration type id.</param>
            <param name="decoratorCreator">Creation func.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.IDrawObjectCreationWorkflowDecorationFactory.CreateDecoration(System.String)">
            <summary>
             Creates a decoration specified by decoration type id.
            </summary>
            <param name="decorationTypeId">Decoration type id.</param>
            <returns>Draw object tool decoration.</returns>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.WorkflowDecorationTypeIds">
            <summary>
            Creation workflow decoration type ids.
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.WorkflowDecorationTypeIds.GenericWorkflowDecorationId">
            <summary>
            Generic workflow decoration id.
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.WorkflowDecorationTypeIds.PolylineWorkflowDecorationId">
            <summary>
            Polyline workflow decoration id.
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.WorkflowDecorationTypeIds.LaneWorkflowDecorationId">
            <summary>
            Lane workflow decoration id.
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.WorkflowDecorationTypeIds.EllipseWorkflowDecorationId">
            <summary>
            Ellipse workflow decoration id.
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.WorkflowDecorationTypeIds.RectangleWorkflowDecorationId">
            <summary>
            Rectangle workflow decoration id.
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.WorkflowDecorationTypeIds.OrbitWorkflowDecorationId">
            <summary>
            Orbit workflow decoration id.
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.WorkflowDecorationTypeIds.FanAreaWorkflowDecorationId">
            <summary>
            Fan area workflow decoration id.
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.WorkflowDecorationTypeIds.RangeRingsWorkflowDecorationId">
            <summary>
            Range rings workflow decoration id.
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.WorkflowDecorationTypeIds.GenericTextWorkflowDecorationId">
            <summary>
            Generic text workflow decoration id.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.CreationWorkflowCompletedEventHandler">
            <summary>
            Delegate type for event fired when creation workflow is completed.
            </summary>
            <param name="sender">Source of event.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.ICreationWorkflowSelection">
            <summary>
            Selection of active creation workflows.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.ICreationWorkflowSelection.AddCreationWorkflows(System.Guid,System.String,System.String)">
            <summary>
            Add creation workflow.
            </summary>
            <param name="drawObjectTypeId">Draw object type id.</param>
            <param name="layerId">Id of layer to creation draw object.</param>
            <param name="viewTypeId">View type id.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.ICreationWorkflowSelection.EndWorkflow(TPG.DrawObjects.Internals.Contracts.Views.IViewRender)">
            <summary>
            End active workflow.
            </summary>
            <param name="viewRender">View renderer.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.ICreationWorkflowSelection.NotifyWorkflowCompleted(TPG.DrawObjects.Internals.Contracts.Views.IViewRender)">
            <summary>
            Notify that active workflow is completed.
            </summary>
            <param name="viewRender">View renderer.</param>
        </member>
        <member name="E:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.ICreationWorkflowSelection.CreationWorkflowCompleted">
            <summary>
            Creation workflow is completed event.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.ICreationWorkflowSelection.ActiveCreationWorkflows">
            <summary>
            Get active creation workflows.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.ICreationWorkflowSelection.ActiveLayerId">
            <summary>
            Get active layer id.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.ICreationWorkflowSelection.ActiveDrawObjectTypeId">
            <summary>
            Get active draw object type.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.IDrawObjectCreationWorkflow">
            <summary>
            A workflow for creation of a DrawObject.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.IDrawObjectCreationWorkflow.GetDrawObjectInstanceId(TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectWorkflowState,System.Guid)">
            <summary>
            Get created draw object instance.
            </summary>
            <param name="workflowState"></param>
            <param name="drawObjectTypeId"> </param>
            <returns></returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.IDrawObjectCreationWorkflow.ShouldDrawGeoDecorations(TPG.DrawObjects.Contracts.Data.IDrawObjectData,TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectWorkflowState)">
            <summary>
            Decides whether geo decorations should be drawn
            </summary>
            <param name="drawObjectData">Draw object data.</param>
            <param name="workflowState"> </param>
            <returns></returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.IDrawObjectCreationWorkflow.DrawDecorations(TPG.DrawObjects.Internals.Contracts.Views.IViewRender,TPG.GeoFramework.Contracts.IViewport,TPG.DrawObjects.Contracts.Data.IDrawObjectData,TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectWorkflowState)">
            <summary>
            Draw workflow decorations.
            </summary>
            <param name="viewRender">View to draw decorations in.</param>
            <param name="viewport"></param>
            <param name="drawObjectData">Data object.</param>
            <param name="workflowState"> </param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.IDrawObjectCreationWorkflow.OnInputEvent(TPG.DrawObjects.Internals.Contracts.Module.EventManager.ModuleInputEventArgs,TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectWorkflowState,TPG.DrawObjects.Internals.Contracts.Module.ICompositeCommand,System.String,System.Guid)">
            <summary>
             Handles input events for workflow
            </summary>
            <param name="moduleInputEventArgs">Event parameters for this event.</param>
            <param name="workflowState">Workflow state.</param>
            <param name="command">An undoable command list to be filled in by this tool.</param>
            <param name="layerId">Id of active layer</param>
            <param name="drawObjectTypeId">Draw object type id.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.IDrawObjectCreationWorkflow.EndWorkflow(TPG.DrawObjects.Internals.Contracts.Views.IViewRender,TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectWorkflowState,System.String,System.Guid)">
            <summary>
            End workflow.
            </summary>
            <param name="viewRender">View renderer.</param>
            <param name="workflowState">Workflow state.</param>
            <param name="layerId">Layer id.</param>
            <param name="drawObjectTypeId">Draw object type id.</param>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.IDrawObjectCreationWorkflow.WorkflowTypeId">
            <summary>
            Unique name identifier for this workflow type.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.IDrawObjectCreationWorkflow.Parameters">
            <summary>
            A dictionary of name/value pairs to be interpreted as parameters for each workflow.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.IDrawObjectCreationWorkflow.Decoration">
            <summary>
            The decoration object for this workflow.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.ICreationWorkflowController">
            <summary>
            Controls creation of workflows of draw objects.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.ICreationWorkflowController.Initialize">
            <summary>
             Initializes creation manager
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.ICreationWorkflowController.Cleanup">
            <summary>
             Cleans up creation manager
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.ICreationWorkflowManager">
            <summary>
             Manager for creation workflow state
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.ICreationWorkflowManager.ResolveStyle(TPG.DrawObjects.Contracts.Data.IDrawObjectData)">
            <summary>
            Resolve style for draw object created with workflow.
            </summary>
            <param name="drawObjectData"></param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.ICreationWorkflowManager.GetActiveCreationWorkflowObjectInstanceIds(TPG.DrawObjects.Internals.Contracts.Views.IViewRender)">
            <summary>
            Get active workflow instance ids.
            </summary>
            <param name="viewRender">View renderer.</param>
            <returns>Instance ids.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.ICreationWorkflowManager.NotifyViewDirty(TPG.DrawObjects.Internals.Contracts.Module.EventManager.ViewUpdateFlags)">
            <summary>
             Called when a creation workflow makes change that requires a refresh
            </summary>
             <param name="updateFlags"></param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.ICreationWorkflowManager.DrawToolDecorations(TPG.DrawObjects.Contracts.Data.IDrawObjectData,TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectViewState,TPG.DrawObjects.Internals.Contracts.Views.IViewRender,TPG.GeoFramework.Contracts.IViewport)">
            <summary>
             Draws creation workflow decorations
            </summary>
            <param name="drawObjectData"></param>
            <param name="drawObjectViewState"></param>
            <param name="viewRender">View</param>
            <param name="viewport"></param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.ICreationWorkflowManager.HandleInputEvent(System.Object,TPG.DrawObjects.Internals.Contracts.Module.EventManager.ModuleInputEventArgs)">
            <summary>
            Handles input event and distributes it to relevant tools.
            </summary>
            <param name="sender">Event sender.</param>
            <param name="inputEventArgs">The input event arguments.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.ICreationWorkflowManager.HandleViewportChangedEvent(System.Object,TPG.DrawObjects.Internals.Contracts.Module.EventManager.ViewportChangedEventArgs)">
            <summary>
            Handles viewport changed event and distributes it to relevant workflows.
            </summary>
            <param name="sender">Event sender.</param>
            <param name="viewportChangedEventArgs">The event arguments.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.ICreationWorkflowManager.CreationWorkflowCompleted">
            <summary>
            Set creation workflow to completed.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.ICreationWorkflowManager.IsCreationWorkflowActive">
            <summary>
            Check if creation workflow is active.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.IDrawObjectCreationWorkflowDecoration">
            <summary>
            Interface for decorations for a DrawObject creation workflow .
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.IDrawObjectCreationWorkflowDecoration.Draw(TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.IDrawObjectCreationWorkflow,TPG.DrawObjects.Internals.Contracts.Views.IViewRender,TPG.GeoFramework.Contracts.IViewport,TPG.DrawObjects.Contracts.Data.IDrawObjectData,TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectWorkflowState)">
            <summary>
            Draw tool decoration.
            </summary>
            <param name="workflow">The workflow we want to decorate.</param>
            <param name="viewRender">View in which to draw the decoration.</param>
            <param name="viewport"></param>
            <param name="drawObjectData">Data for the draw object.</param>
            <param name="workflowState">Workflow state for the draw object.</param>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.IDrawObjectCreationWorkflowDecoration.DecorationTypeId">
            <summary>
            Unique name identifier for this creation workflow decoration type.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.IDrawObjectCreationWorkflowFactory">
            <summary>
             Factory responsible for creation DrawObjectTools
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.IDrawObjectCreationWorkflowFactory.AddWorkflowType(System.String,System.Func{TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.IDrawObjectCreationWorkflow})">
            <summary>
             Adds a new decoration type to factory.
            </summary>
            <param name="workflowTypeId">Creation workflow type id.</param>
            <param name="creator">Creation func.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.IDrawObjectCreationWorkflowFactory.CreateDrawObjectWorkflow(System.String)">
            <summary>
             Creates a new creation workflow based on tool type id.
            </summary>
            <param name="workflowTypeId">Creation workflow type id.</param>
            <returns>Returns reference to implementation of requested creation workflow.</returns>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.IDrawObjectPrimitiveCreationWorkflow">
            <summary>
             A single manipulation creation workflow for a draw object primitive. 
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.IDrawObjectPrimitiveCreationWorkflow.LocalPrimitiveId">
            <summary>
            References the DrawObject primitive this creation workflow operates on.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.Serializers.IDrawObjectCreationWorkflowHandlerXmlParser">
            <summary>
            Interface for parsing creation workflow handlers from XML.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.Serializers.IDrawObjectCreationWorkflowHandlerXmlParser.Parse(System.Xml.Linq.XElement)">
            <summary>
            Parse a serialized creation workflow handler.
            </summary>
            <param name="xElement">The XML serialization of the creation workflow handler object.</param>
            <returns>A creation workflow handler object with all workflows from the serialization.</returns>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.Serializers.IDrawObjectCreationWorkflowHandlerXmlSerializer">
            <summary>
            Serialization of the list of creation workflows for a DrawObject.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.Serializers.IDrawObjectCreationWorkflowHandlerXmlSerializer.SerializeToString(TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.IDrawObjectCreationWorkflowHandler)">
            <summary>
            Serialize a creation workflow handler to a string.
            </summary>
            <param name="workflowHandler">The creation workflow handler to serialize.</param>
            <returns>A string containing the XML serialization of the creation workflow handler.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.Serializers.IDrawObjectCreationWorkflowHandlerXmlSerializer.SerializeToXElement(TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.IDrawObjectCreationWorkflowHandler)">
            <summary>
            Serialize a creation workflow handler to an XElement.
            </summary>
            <param name="workflowHandler">The creation workflow handler to serialize.</param>
            <returns>An XElement containing the XML serialization of the creation workflow handler.</returns>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.Serializers.IWorkflowBaseXmlParser">
            <summary>
            Interface for parsing common base properties for DrawObject creation workflows.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.Serializers.IWorkflowBaseXmlParser.Parse(System.Xml.Linq.XElement,TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.IDrawObjectCreationWorkflow)">
            <summary>
            Parse the given XML code and populate the creation workflow with common base data such as LocalPrimitiveID.
            </summary>
            <param name="xElement">Input XML Code</param>
            <param name="workflow">creation workflow to populate</param>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.Serializers.IWorkflowBaseXmlSerializer">
            <summary>
            XML Serializer for common base properties.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.Serializers.IWorkflowBaseXmlSerializer.CreateBaseElement(TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.IDrawObjectCreationWorkflow)">
            <summary>
            Serialize the base primitive data, such as LocalPrimitiveId.
            </summary>
            <param name="workflow">The creation workflow data to be serialized</param>
            <returns>XML Element with serialized data.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.Serializers.IWorkflowBaseXmlSerializer.CreateBaseElement(TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.IDrawObjectCreationWorkflow,System.Object[])">
            <summary>
            Serialize the base primitive data, such as LocalPrimitiveId.
            </summary>
            <param name="workflow">The creation workflow data to be serialized</param>
            <param name="content">Child elements/attributes for the XElement</param>
            <returns>XML Element with serialized data.</returns>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.Serializers.IWorkflowXmlParser">
            <summary>
            Interface for creation workflow XML parsers.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.Serializers.IWorkflowXmlParser.Parse(System.Xml.Linq.XElement)">
            <summary>
            Parse a creation workflow from an XML Element.
            </summary>
            <param name="xElement">XML Element containing the creation workflow serialization.</param>
            <returns>Creation workflow object</returns>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.Serializers.IWorkflowXmlParser.WorkflowTypeId">
            <summary>
            Get creation workflow type id.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.Serializers.IWorkflowXmlParserProvider">
            <summary>
            XML Parser provider for creation workflows.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.Serializers.IWorkflowXmlParserProvider.AddParser(System.String,TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.Serializers.IWorkflowXmlParser)">
            <summary>
             Add a new creation workflow parser to the provider.
            </summary>
            <param name="workflowTypeId">Type identifier for the creation workflow parser.</param>
            <param name="workflowXmlParser">Creation workflow XML parser object.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.Serializers.IWorkflowXmlParserProvider.GetParser(System.String)">
            <summary>
            Get a creation workflow parser for the given type id.
            </summary>
            <param name="workflowTypeId">Type identifier for the requested parser.</param>
            <returns>Tool XML Parser object.</returns>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.Serializers.IWorkflowXmlParserProvider.ParserCount">
            <summary>
            Get number of registered parsers.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.Serializers.IWorkflowXmlSerializer">
            <summary>
            XML Serializer interface for creation workflows
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.Serializers.IWorkflowXmlSerializer.SerializeToString(TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.IDrawObjectCreationWorkflow)">
            <summary>
             Serialize a creation workflow object to a string.
            </summary>
            <param name="workflow">The creation workflow object to serialize.</param>
            <returns>A text string containing the xml serialization of the creation workflow.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.Serializers.IWorkflowXmlSerializer.SerializeToXElement(TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.IDrawObjectCreationWorkflow)">
            <summary>
            Serialize a creation workflow object to an XElement.
            </summary>
            <param name="workflow">The creation workflow object to serialize.</param>
            <returns>An XElement containing the XML serialization of the creation workflow.</returns>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.Serializers.IWorkflowXmlSerializerProvider">
            <summary>
            XML Serializer provider for creation workflows.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.Serializers.IWorkflowXmlSerializerProvider.AddSerializer(System.String,TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.Serializers.IWorkflowXmlSerializer)">
            <summary>
             Add a new creation workflow serializer to the provider.
            </summary>
            <param name="workflowTypeId">Type identifier for the creation workflow serializer.</param>
            <param name="workflowXmlSerializer">PartRenderer XML serializer object.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.Serializers.IWorkflowXmlSerializerProvider.GetSerializer(System.String)">
            <summary>
            Get a creation workflow serializer for the given type id.
            </summary>
            <param name="workflowTypeId">Type identifier for the requested serializer.</param>
            <returns>Creation workflow XML Serializer object.</returns>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.Serializers.IWorkflowXmlSerializerProvider.SerializerCount">
            <summary>
            Get number of registered serializers.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.WorkflowTypeIds">
            <summary>
            Creation workflow type ids.
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.WorkflowTypeIds.GenericWorkflowId">
            <summary>
            Generic work flow id.
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.WorkflowTypeIds.PolylineWorkflowId">
            <summary>
            Polyline work flow id.
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.WorkflowTypeIds.LaneWorkflowId">
            <summary>
            Lane work flow id.
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.WorkflowTypeIds.EllipseWorkflowId">
            <summary>
            Ellipse work flow id.
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.WorkflowTypeIds.RectangleWorkflowId">
            <summary>
            Rectangle work flow id.
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.WorkflowTypeIds.OrbitWorkflowId">
            <summary>
            Orbit work flow id.
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.WorkflowTypeIds.FanAreaWorkflowId">
            <summary>
            Fan area work flow id.
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.WorkflowTypeIds.RangeRingsWorkflowId">
            <summary>
            Range ring work flow id.
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.WorkflowTypeIds.GenericTextWorkflowId">
            <summary>
            Generic text work flow id.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.DrawLayerChangeAction">
            <summary>
            Type of change in draw object store
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.DrawLayerChangeAction.Undefined">
            <summary>
            Not set
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.DrawLayerChangeAction.Add">
            <summary>
            One or more draw objects have been added or updated in specified layer(s)
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.DrawLayerChangeAction.Delete">
            <summary>
            One or more draw objects has been deleted in specified layer(s)
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.DrawLayerChangeAction.Update">
            <summary>
            One or more draw objects have been updated
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.DrawLayerChangeAction.Reset">
            <summary>
            Store has been reset
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.DrawLayerChangedEventArgs">
            <summary>
            Arguments for DrawLayerChanged Events
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.DrawLayerChangedEventArgs.#ctor(TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.DrawLayerChangeAction,System.String,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="drawLayerChangeAction">Action detailing type of change for layer</param>
            <param name="affectedLayerId">Layer id of affected layer</param>
            <param name="affectedDrawObjectInstanceId">Instace id of draw object affected</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.DrawLayerChangedEventArgs.#ctor(TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.DrawLayerChangeAction,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Default constructor
            </summary>
            <param name="drawLayerChangeAction">Action detailing type of change for layer</param>
            <param name="affectedLayerIds">Layer id of all layers affected</param>
            <param name="affectedDrawObjectInstanceIds">Instace id of all draw objects affected</param>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.DrawLayerChangedEventArgs.DrawLayerChangeAction">
            <summary>
            Type of action performed on draw layer(s)
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.DrawLayerChangedEventArgs.AffectedLayers">
            <summary>
            Speficies affected layers
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.DrawLayerChangedEventArgs.AffectedDrawObjects">
            <summary>
            Speficies affected draw objects
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawLayerManager">
            <summary>
            Manages filtering of draw objects in layers
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawLayerManager.IsInLayer(TPG.DrawObjects.Contracts.Data.IDrawObjectData,System.String)">
            <summary>
            Returns whether specified draw object is part of layer
            </summary>
            <param name="drawObjectData">Draw object data</param>
            <param name="layerId">Layer id</param>
            <returns>True if draw object is present in layer</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawLayerManager.IsInLayer(System.String,System.String)">
            <summary>
            Returns whether specified draw object is part of layer
            </summary>
            <param name="drawObjectInstanceId">Instance id of draw object</param>
            <param name="layerId">Layer id</param>
            <returns>True if draw object is present in layer</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawLayerManager.UpdateInLayer(TPG.DrawObjects.Contracts.Data.IDrawObjectData,System.String)">
            <summary>
            Updates/creates draw object in layer
            </summary>
            <param name="drawObjectData">Draw object data</param>
            <param name="layerId">Layer id</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawLayerManager.UpdateInLayer(System.Collections.Generic.IEnumerable{TPG.DrawObjects.Contracts.Data.IDrawObjectData},System.String)">
            <summary>
            Updates/creates a collection of draw object in layer
            </summary>
            <param name="drawObjectData">Collection of draw object data</param>
            <param name="layerId">Layer id</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawLayerManager.DeleteFromLayer(System.String,System.String)">
            <summary>
            Removes draw object from layer
            </summary>
            <param name="instanceId">Instance id of draw object</param>
            <param name="layerId">Layer id</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawLayerManager.DeleteFromLayer(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Removes draw object from layer
            </summary>
            <param name="instanceIds">Instance ids of draw objects</param>
            <param name="layerId">Layer id</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawLayerManager.GetFromLayer(System.String,System.String)">
            <summary>
            Retrieves draw object data from layer
            </summary>
            <param name="instanceId">Instance id of draw object</param>
            <param name="layerId">Layer id</param>
            <returns>If successfull, requested draw object data</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if instance id is invalid for layer.</exception>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawLayerManager.GetRuntimeDataFromLayer(System.String,System.String)">
            <summary>
            Retrieves draw object runtime data from layer
            </summary>
            <param name="instanceId">Instance id of draw object</param>
            <param name="layerId">Layer id</param>
            <returns>If successfull, requested draw object data</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if instance id is invalid for layer.</exception>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawLayerManager.GetSorted(TPG.GeoFramework.Style.Core.Contracts.Condition.ICondition,System.Collections.Generic.IList{TPG.GeoFramework.Style.Core.Contracts.Sorting.SortInfoItem},System.Int32,System.Int32,System.String)">
            <summary>
            Get draw objects sorted by specified field(s).
            </summary>
            <param name="query">Query for selecting sorted draw objects. Selected draw objects can be offset from start of
            sort order. THe specified number of draw objects can be lower than the total count.</param>
            <param name="sortItems">List of sort items containing sorting info.</param>
            <param name="offset">Offset into the set of draw objects to be returned.</param>
            <param name="maxCount">Maximum count of draw objects to be returned.</param>
            <param name="layerId">Layer id</param>
            <returns>Sorted draw objects and supporting information.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawLayerManager.GetAllDrawObjectIdsForLayer(System.String)">
            <summary>
            Gets all draw object ids that are present regardless of the layer they 
            belong to.
            </summary>
            <param name="layerId"></param>
            <returns>All draw object ids.</returns>
        </member>
        <member name="E:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawLayerManager.DrawLayerChanged">
            <summary>
            Raised when content of a draw layer has changed
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawLayerManager.ActiveDrawObjectServiceStoreId">
            <summary>
            Get or set draw object store id to store draw objects in.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawLayerManager.ClientServiceStores">
            <summary>
            Get client service draw object stores.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.DrawLayerChangedEventHandler">
            <summary>
            Delegate type for DrawLayerChangedEvents
            </summary>
            <param name="sender">Origin of event</param>
            <param name="args">Arguments</param>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObject">
            <summary>
            Aggregates all data and functionality for this particular instance of a draw object
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObject.SetDrawObjectData(TPG.DrawObjects.Contracts.Data.IDrawObjectData)">
            <summary>
            Sets/replaces draw-object data
            </summary>
            <param name="updatedDrawObjectData"></param>
            <remarks>Should normally not be used directly but through the <see cref="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectStore.UpdateData(TPG.DrawObjects.Contracts.Data.IDrawObjectData)"/> method.</remarks>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObject.ContainsViewState(System.String)">
            <summary>
            Whether viewstate exists for specified view type
            </summary>
            <remarks>
            Should not be used directly, use <see cref="M:TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectViewStateProvider.ContainsViewState(System.String,System.String)"/> instead.
            </remarks>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObject.GetViewState(System.String)">
            <summary>
            Retrieves view state for specified view type
            </summary>
            <remarks>
             Should not be used directly, use <see cref="M:TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectViewStateProvider.GetViewState(System.String,System.String)"/> instead.
            </remarks>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if view state for specified view type does not exist. </exception>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObject.GetOrCreateViewState(System.String)">
            <summary>
            Non-persistent data used by view.
            </summary>
            <remarks>
             Should not be used directly, use <see cref="M:TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectViewStateProvider.GetOrCreateViewState(System.String,System.String)"/> instead.
            </remarks>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObject.GetAllViewStates">
            <summary>
            Returns an enumerable of all view-states in draw object
            </summary>
            <remarks>
             Should not be used directly, use <see cref="M:TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectViewStateProvider.GetAllViewStates(System.String)"/> instead.
            </remarks>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObject.RemoveAllToolStatesInAllViewStates">
            <summary>
            Removes all tool stated in all view states
            </summary>
            <remarks>
             Should not be used directly, use <see cref="M:TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectViewStateProvider.RemoveAllToolStatesInAllViewStates(System.String)"/> instead.
            </remarks>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObject.DrawObjectData">
            <summary>
             Persisten draw object data
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObject.Name">
            <summary>
             Name of draw object
             </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObject.InstanceId">
            <summary>
             Draw object instance id
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObject.DrawObjectTypeId">
            <summary>
             Draw Object type id
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectToolSelection">
            <summary>
            Interface for storing tool selection.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectToolSelection.AddActiveTools(System.String,TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IDrawObjectToActiveToolsMapping)">
            <summary>
            Adds an active tool to the draw object specified.
            </summary>
            <param name="drawObjectId">Id of the draw object to add active tools to.</param>
            <param name="drawObjectToActiveToolsMapping">The mapping of active tools to add.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectToolSelection.RemoveActiveTools(System.String)">
            <summary>
            Removes all active tools from the given draw object.
            </summary>
            <param name="drawObjectId">The draw object to remove the active tools from.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectToolSelection.DrawObjectContainsActiveTools(System.String)">
            <summary>
            Checks if any active tools are registered with the given draw object.
            </summary>
            <param name="drawObjectId">The id of the draw object to check.</param>
            <returns>True if active tools exists, false otherwise.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectToolSelection.GetActiveToolsMapping(System.String)">
            <summary>
            Get all active tools for the given draw object.
            </summary>
            <param name="drawObjectId">Id of the draw object to get active tools from.</param>
            <returns>The active tools mapping.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectToolSelection.GetNumberOfMappings">
            <summary>
            Gets the total number of mappings registered.
            </summary>
            <returns>Number of mappings.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectToolSelection.ClearMappings">
            <summary>
            Clears mappings for all draw objects.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectToolSelection.GetKeys">
            <summary>
            Returns the keys of the mappings, ie. the draw object ids.
            </summary>
            <returns>List of keys.</returns>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.NotifyDrawObjectDataReplacedEventArgs">
            <summary>
            Event handler args for when DrawObjectData are replaced in the data store
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.NotifyDrawObjectDataReplacedEventArgs.#ctor(System.Collections.Generic.IList{System.String})">
            <summary>
            Constructor with list.
            </summary>
            <param name="instanceIds">list of instance ids of draw object.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.NotifyDrawObjectDataReplacedEventArgs.#ctor(System.String)">
            <summary>
             Constructor with single value
            </summary>
             <param name="instanceId">Instance id of draw object.</param>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.NotifyDrawObjectDataReplacedEventArgs.InstanceIds">
            <summary>
            Instance id of changed draw object.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectEdits">
            <summary>
            Contains edit copies of draw object currently being edited
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectEdits.EditDrawObject(TPG.DrawObjects.Contracts.Data.IDrawObjectData,System.String,System.String,System.String)">
            <summary>
            Initializes edit of a draw object
            </summary>
            <param name="drawObjectData">Draw object to edit.</param>
            <param name="toolTypeId">Tool type id editing draw object.</param>
            <param name="toolInstanceId">Instance id of the tool doing the edit.</param>
            <param name="viewTypeId"></param>
            <returns>Editable copy of draw object.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectEdits.EditDrawObject(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes edit of a draw object
            </summary>
            <param name="drawObjectInstanceId">Instance id of draw object to edit.</param>
            <param name="toolTypeId">Tool type id editing draw object.</param>
            <param name="toolInstanceId"></param>
            <param name="viewTypeId"></param>
            <returns>Editable copy of draw object.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectEdits.ApplyDrawObjectEdit(TPG.DrawObjects.Contracts.Data.IDrawObjectData,System.String)">
            <summary>
            Applies changes in specified edit copy of draw object
            </summary>
            <param name="editedDrawObject">Edit copy of draw object.</param>
            <param name="toolTypeId">Tool type id editing draw object.</param>
            ///
            <remarks>Edit copy of draw object data must be same instance as when <see cref="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectEdits.EditDrawObject(TPG.DrawObjects.Contracts.Data.IDrawObjectData,System.String,System.String,System.String)"/> was called.</remarks>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectEdits.ApplyDrawObjectEdit(System.String,System.String)">
            <summary>
            Applies changes done it in edit copy with specified draw object instance id
            </summary>
            <param name="editedDrawObjectInstanceId">Instance id of draw object to apply edits to.</param>
            <param name="toolTypeId">Tool type id editing draw object.</param>
            ///
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectEdits.EndDrawObjectEdits">
            <summary>
            Called at the end of draw object edits
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectEdits.EndDrawObjectEdits(System.Boolean)">
            <summary>
            Called at the end of draw object edits
            </summary>
            <param name="clearState">True to clear state,</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectEdits.GetEdits">
            <summary>
            Returns a read-only collection of current draw object edit copies
            </summary>
            <returns>All draw object edit copies.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectEdits.IsDrawObjectBeingEdited(System.String)">
            <summary>
            Returns whether draw object is being edited
            </summary>
            <param name="drawObjectInstanceId">Instance id of draw object.</param>
            <returns>True if draw object is being edited, otherwise false.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectEdits.GetEditDrawObjectData(System.String)">
            <summary>
            Returns edit copy of draw object
            </summary>
            <param name="drawObjectInstanceId">Instance id of draw object.</param>
            <returns>Edit copy of draw object if is being edited, otherwise null.</returns>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.NotifyDrawObjectDataReplacedEventHandler">
            <summary>
            Event handler for handling DrawObjectData being replaced in store
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectStore">
            <summary>
             Data store for draw object data, responsible for all draw object data used by DrawObjectsNG
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectStore.Add(TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObject)">
            <summary>
             Adds a draw object to repository
            </summary>
            <param name="drawObject"></param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectStore.Add(TPG.DrawObjects.Contracts.Data.IDrawObjectData)">
            <summary>
             Adds a draw object to repository
            </summary>
            <param name="drawObjectData"></param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectStore.UpdateData(TPG.DrawObjects.Contracts.Data.IDrawObjectData)">
            <summary>
             Replaces a draw object in the store that has the same instanceId.
            </summary>
            <param name="updatedDrawObjectData">Updated draw object data</param>
            <remarks>This will also update the parent IDrawObject.</remarks>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectStore.AddOrUpdateData(System.Collections.Generic.IEnumerable{TPG.DrawObjects.Contracts.Data.IDrawObjectData})">
            <summary>
             Add or replaces draw objects from a collection in the store that.
            </summary>
            <param name="drawObjectDataList">Added or updated draw object data</param>
            <remarks>This will also update the parent IDrawObject.</remarks>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectStore.Contains(System.String)">
            <summary>
             Checks if repository contains a data object with specified instance id
            </summary>
            <param name="instanceId"></param>
            <returns></returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectStore.GetData(System.String)">
            <summary>
             Retrives draw object data specified by instance id
            </summary>
            <param name="instanceId">Draw object instance id.</param>
            <returns>A copy of specified draw object's <see cref="P:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObject.DrawObjectData"></see> member.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectStore.GetRuntimeData(System.String)">
            <summary>
             Retrives draw object runtime data specified by instance id
            </summary>
            <param name="instanceId">Draw object instance id.</param>
            <returns>A copy of specified draw object's <see cref="T:TPG.DrawObjects.Contracts.Data.IDrawObjectRuntimeData"></see>.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectStore.GetSortedData(TPG.GeoFramework.Style.Core.Contracts.Condition.ICondition,System.Collections.Generic.IList{TPG.GeoFramework.Style.Core.Contracts.Sorting.SortInfoItem},System.Int32,System.Int32,System.String)">
            <summary>
            Get draw objects sorted by specified field(s).
            </summary>
            <param name="query">Query for selecting sorted draw objects. Selected draw objects can be offset from start of
            sort order. THe specified number of draw objects can be lower than the total count.</param>
            <param name="sortItems">List of sort items containing sorting info.</param>
            <param name="offset">Offset into the set of draw objects to be returned.</param>
            <param name="maxCount">Maximum count of draw objects to be returned.</param>
            <param name="layerId">Layer id</param>
            <returns>Sorted draw objects and supporting information.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectStore.Remove(System.String)">
            <summary>
             Removes draw object data from store by instance id
            </summary>
            <param name="instanceId"></param>
            <returns></returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectStore.Remove(System.Collections.Generic.IList{System.String})">
            <summary>
            Removes a set of draw objects by instance id.
            </summary>
            <param name="instanceIds">Instance ids of the objects to remove.</param>
            <returns>The removed objects.</returns>
        </member>
        <member name="E:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectStore.DrawObjectDataReplaced">
            <summary>
            Raised when a DrawObjects's DrawObjectData is replaced.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectStore.DrawObjects">
            <summary>
             Enumerator for all draw objects
            </summary>
            <remarks>
             WARNING! This property is for performance critical loops and directly accesses private data. The draw objects returned in this enumeration should never be edited at the risk of leaving the store in an inconsistent state.
             </remarks>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectStore.DrawObjectIds">
            <summary>
            Enumerator for all draw object instance ids
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectStore.ClientServiceStores">
            <summary>
            Get client service draw object stores.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectStore.DrawObjectServiceSynchronizer">
            <summary>
            Get or set draw object service synchronizer.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.IDrawObjectCreationWorkflowHandler">
            <summary>
            Collection of workflows for a DrawObject and a certain view type.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.IDrawObjectCreationWorkflowHandler.ViewTypeId">
            <summary>
            The view type these DrawObject workflows are defined for.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.CreationWorkflow.IDrawObjectCreationWorkflowHandler.Workflows">
            <summary>
            All workflows attached to this draw object and view type.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.DrawObjectType.IDrawObjectTypeDefinitionCreator">
            <summary>
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.DrawObjectType.IDrawObjectTypeDefinitionCreator.Create">
            <summary>
             Creates a new draw object type definition
            </summary>
            <returns></returns>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.DrawObjectType.IDrawObjectTypeDefinitionCreator.DrawObjectTypeId">
            <summary>
            Persistent, globally unique identifier that identifies this draw object type
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.DrawObjectType.IDrawObjectTypeDefinitionCreator.Name">
            <summary>
            Name of draw object type
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.DrawObjectType.IDrawObjectTypeDefinitionCreator.Description">
            <summary>
            Description of draw object type.
            </summary>
            <remarks>
            This may be used in GUI or for tooltips.
            </remarks>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.DrawObjectType.IDrawObjectTypeDefinitionCreator.ExtraTags">
            <summary>
            Custom type definition parameters
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.DrawObjectType.IDrawObjectTypeDefinitionCreator.Renderers">
            <summary>
             Renderers referenced by view type id
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.DrawObjectType.IDrawObjectTypeDefinitionCreator.ToolHandlers">
            <summary>
            Tool handlers referenced by view type id
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.DrawObjectType.IDrawObjectTypeDefinitionCreator.CreationWorkflows">
            <summary>
            Creation workflows referenced by view type id
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.DrawObjectType.IDrawObjectTypeDefinitionCreator.DataTemplate">
            <summary>
             Data template for draw object type
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.DrawObjectType.IDrawObjectTypeDefinitionCreator.Validator">
            <summary>
             Validator for draw object data
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.DrawObjectType.IDrawObjectTypeDefinitionStore">
            <summary>
             Interface for data store for draw object type definitons, responsible for all draw object type definitions used by DrawObjectsNG
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.DrawObjectType.IDrawObjectTypeDefinitionStore.Add(TPG.DrawObjects.Internals.Contracts.DrawObjectType.IDrawObjectTypeDefinition)">
            <summary>
             Adds a draw object type to repository
            </summary>
            <param name="drawObjectTypeDefinition"></param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.DrawObjectType.IDrawObjectTypeDefinitionStore.Contains(System.Guid)">
            <summary>
             Checks if repository contains a data type with specified type id
            </summary>
            <param name="drawObjectTypeId"></param>
            <returns></returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.DrawObjectType.IDrawObjectTypeDefinitionStore.Get(System.Guid)">
            <summary>
             Retrives draw object type by type id
            </summary>
            <param name="drawObjectTypeId"></param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.DrawObjectType.IDrawObjectTypeDefinitionStore.Remove(System.Guid)">
            <summary>
             Removes draw object type from store by type id
            </summary>
            <param name="drawObjectTypeId"></param>
            <returns></returns>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.DrawObjectType.IDrawObjectTypeDefinitionStore.DrawObjectTypeDefinitions">
            <summary>
             Enumerator for all draw object types
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.EventManager.CommandInputType">
            <summary>
             Command input types
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.Module.EventManager.CommandInputType.DeletePrimitive">
            <summary>
             Delete primitive input command
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.Module.EventManager.CommandInputType.CancelCurrentOperation">
            <summary>
            Cancels the current operation on input
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.EventManager.ViewportChangedEventArgs">
            <summary>
             Viewport changed event args
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.EventManager.ViewportChangedEventArgs.#ctor(TPG.DrawObjects.Internals.Contracts.Views.IViewRender,TPG.GeoFramework.Contracts.IViewport)">
            <summary>
             Constructor for viewport changed events
            </summary>
            <param name="viewRender"></param>
            <param name="viewport"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.EventManager.ViewportChangedEventArgs.ViewRender">
            <summary>
             Origin view of event
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.EventManager.ViewportChangedEventArgs.Viewport">
            <summary>
             The viewport the event originated from.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.EventManager.ExecuteCommandInputEventArgs">
            <summary>
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.EventManager.ModuleInputEventArgs">
            <summary>
             Module input event args
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.EventManager.ModuleInputEventArgs.#ctor(TPG.DrawObjects.Internals.Contracts.Module.EventManager.ModuleInputEventType,TPG.DrawObjects.Internals.Contracts.Views.IViewRender,TPG.GeoFramework.Contracts.IViewport,System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Nullable{System.Windows.Point})">
            <summary>
             Constructor for mouse-move type events
            </summary>
            <param name="eventType"></param>
            <param name="viewRender"></param>
            <param name="viewport"></param>
            <param name="filteredRenderList"> </param>
            <param name="mousePosition"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.EventManager.ModuleInputEventArgs.#ctor(TPG.DrawObjects.Internals.Contracts.Module.EventManager.ModuleInputEventType,TPG.DrawObjects.Internals.Contracts.Views.IViewRender,TPG.GeoFramework.Contracts.IViewport,System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
             Constructor
            </summary>
            <param name="eventType"></param>
            <param name="viewRender"></param>
            <param name="viewport"></param>
            <param name="filteredRenderList"> </param>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.EventManager.ModuleInputEventArgs.FilteredRenderList">
            <summary>
            Get filtered render list.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.EventManager.ModuleInputEventArgs.EventType">
            <summary>
            Type of input event.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.EventManager.ModuleInputEventArgs.ViewRender">
            <summary>
             Origin view of input event
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.EventManager.ModuleInputEventArgs.MousePosition">
            <summary>
             Mouse position in view coordinates
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.EventManager.ModuleInputEventArgs.Viewport">
            <summary>
             The viewport the event originated from.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.EventManager.ModuleInputEventArgs.Handled">
            <summary>
            Indicate if this event has been handled already.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.EventManager.ModuleInputEventArgs.SuppressedTools">
            <summary>
            Get or set which tools are suppressed.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.EventManager.ModuleInputEventArgs.GeoInputEventActions">
            <summary>
            Get or set geo input event actions.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.EventManager.ModuleInputEventArgs.LayerId">
            <summary>
            Get or set layer id of layer generating the event.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.EventManager.ExecuteCommandInputEventArgs.#ctor(TPG.DrawObjects.Internals.Contracts.Views.IViewRender,TPG.GeoFramework.Contracts.IViewport,TPG.DrawObjects.Internals.Contracts.Module.EventManager.CommandInputType,System.Object)">
            <summary>
             Constructor for execute command type events
            </summary>
            <param name="viewRender"></param>
            <param name="viewport"></param>        
            <param name="commandType"></param>
            <param name="commandParameter"></param>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.EventManager.ExecuteCommandInputEventArgs.CommandInputType">
            <summary>
             Get command type.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.EventManager.ExecuteCommandInputEventArgs.CommandParameter">
            <summary>
             Get command parameter.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.EventManager.CanExecuteCommandInputEventArgs">
            <summary>
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.EventManager.CanExecuteCommandInputEventArgs.#ctor(TPG.DrawObjects.Internals.Contracts.Views.IViewRender,TPG.GeoFramework.Contracts.IViewport,TPG.DrawObjects.Internals.Contracts.Module.EventManager.CommandInputType)">
            <summary>
             Constructor for can execute command type events
            </summary>
            <param name="viewRender"></param>
            <param name="viewport"></param>
            <param name="commandType"></param>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.EventManager.CanExecuteCommandInputEventArgs.CanExecute">
            <summary>
             Get or set if command can execute.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.EventManager.CanExecuteCommandInputEventArgs.CommandInputType">
            <summary>
             Get command type.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.EventManager.IDrawObjectUndoableCommand">
            <summary>
            Interface for Draw Object specific undoable commands.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.EventManager.IDrawObjectUndoableCommand.AffectedInstanceIds">
            <summary>
            Instance ids of draw objects affected by this command.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.EventManager.IModuleEventManager">
            <summary>
             Event manager for DrawObjectsNG module
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.EventManager.IModuleEventManager.HandleEvent(System.Object,TPG.DrawObjects.Internals.Contracts.Module.EventManager.ModuleInputEventArgs)">
            <summary>
            </summary>
            <param name="sender"></param>
            <param name="moduleInputEventArgs"></param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.EventManager.IModuleEventManager.HandleViewportChanged(System.Object,TPG.DrawObjects.Internals.Contracts.Module.EventManager.ViewportChangedEventArgs)">
            <summary>
             Handle viewport changed.
            </summary>
            <param name="sender"></param>
            <param name="viewportChangedEventArgs"> </param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.EventManager.IModuleEventManager.RequestViewUpdate(TPG.DrawObjects.Internals.Contracts.Module.EventManager.ViewUpdateFlags)">
            <summary>
             Used to notify that the view must be redrawn. 
             This will trigger a OnRequestViewUpdateEvent
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.EventManager.IModuleEventManager.AddCommand(TPG.DrawObjects.Internals.Contracts.Module.EventManager.IDrawObjectUndoableCommand)">
            <summary>
             Adds a command to undo-stack
            </summary>
            <param name="command">Command implementation that allows undo and redo</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.EventManager.IModuleEventManager.HasDrawObjectChanged(System.String)">
            <summary>
            Checks if the draw object with given instance id has been changed.
            </summary>
            <param name="drawObjectInstanceId">Instance id of draw object to check.</param>
            <returns>True if changed, false otherwise.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.EventManager.IModuleEventManager.HasDrawObjectChangedSince(System.String,System.DateTime)">
            <summary>
            Checks if the draw object with given instance id has been changed after the given timestamp.
            </summary>
            <param name="drawObjectInstanceId">Instance id of draw object to check.</param>
            <param name="since">The timestamp to check against.</param>
            <returns>True if changed, false otherwise.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.EventManager.IModuleEventManager.ClearChangedState(System.String)">
            <summary>
            Clears the changed flag if the draw object with given instance id.
            </summary>
            <param name="drawObjectInstanceId">The instance id of the draw object to clear changed stateus for.</param>
        </member>
        <member name="E:TPG.DrawObjects.Internals.Contracts.Module.EventManager.IModuleEventManager.OnInputEvent">
            <summary>
             Event for input events
            </summary>
        </member>
        <member name="E:TPG.DrawObjects.Internals.Contracts.Module.EventManager.IModuleEventManager.OnCreationEvent">
            <summary>
             Event for input events
            </summary>
        </member>
        <member name="E:TPG.DrawObjects.Internals.Contracts.Module.EventManager.IModuleEventManager.OnViewportChangedEvent">
            <summary>
             Event for viewport changed events
            </summary>
        </member>
        <member name="E:TPG.DrawObjects.Internals.Contracts.Module.EventManager.IModuleEventManager.OnRequestViewUpdateEvent">
            <summary>
             Event for view update requests. View update requests should be buffered and processed at regular intervals.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.EventManager.IModuleEventManager.EventMode">
            <summary>
            Get or set event mode.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.EventManager.IModuleEventManager.UndoRedoStack">
            <summary>
            Injectable undo/redo stack.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.EventManager.InputEventHandler">
            <summary>
             Delegate type for input events
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.EventManager.ViewEventHandler">
            <summary>
             Delegate type for view
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.EventManager.ViewportChangedHandler">
            <summary>
             Delegate type for viewport changed.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.EventManager.KeyInputEventArgs">
            <summary>
             Event args for key event
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.EventManager.KeyInputEventArgs.#ctor(TPG.DrawObjects.Internals.Contracts.Views.IViewRender,TPG.GeoFramework.Contracts.IViewport,System.Windows.Input.Key,System.Windows.Input.KeyStates,System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
             Constructor for keyboard-type events
            </summary>
            <param name="viewRender"></param>
            <param name="viewport"></param>
            <param name="key"></param>
            <param name="keyStates"></param>
            <param name="filteredRenderList"> </param>
            <param name="shiftModifier"></param>
            <param name="altModifier"></param>
            <param name="ctrlModifier"></param>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.EventManager.KeyInputEventArgs.Key">
            <summary>
             Keyboard key pressed for key events
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.EventManager.KeyInputEventArgs.KeyStates">
            <summary>
             Key states for event
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.EventManager.ModuleInputEventType">
            <summary>
             Module input event types
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.Module.EventManager.ModuleInputEventType.Undefined">
            <summary>
             Undefined input event
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.Module.EventManager.ModuleInputEventType.MouseButton">
            <summary>
             Mouse button event
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.Module.EventManager.ModuleInputEventType.MouseMove">
            <summary>
             Mouse move event
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.Module.EventManager.ModuleInputEventType.MouseWheel">
            <summary>
             Mouse wheel event
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.Module.EventManager.ModuleInputEventType.Key">
            <summary>
             Keyboard event
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.Module.EventManager.ModuleInputEventType.ExecuteCommand">
            <summary>
             Execute command event
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.Module.EventManager.ModuleInputEventType.CanExecuteCommand">
            <summary>
             Can execute command event
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.EventManager.MouseButtonInputEventArgs">
            <summary>
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.EventManager.MouseInputEventArgs">
            <summary>
             Mouse move input event arguments
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.EventManager.MouseInputEventArgs.#ctor(TPG.DrawObjects.Internals.Contracts.Views.IViewRender,TPG.GeoFramework.Contracts.IViewport,System.Windows.Point,System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
             Constructor
            </summary>
             <remarks>
             This constructor is typically used when creating event args for mouse move events.
             </remarks>
            <param name="viewRender">View the mouse event applies to.</param>
            <param name="viewport">Viewport the event applies to.</param>
            <param name="mousePosition">Mouse position in view XY-coordinates.</param>
            <param name="filteredRenderList"> </param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.EventManager.MouseButtonInputEventArgs.#ctor(TPG.DrawObjects.Internals.Contracts.Views.IViewRender,TPG.GeoFramework.Contracts.IViewport,System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Windows.Input.MouseButton,System.Windows.Input.MouseButtonState,System.Nullable{System.Windows.Point},System.Int32)">
            <summary>
             Constructor for mouse-omve type events
            </summary>
            <param name="viewRender"></param>
            <param name="viewport"></param>
            <param name="filteredRenderList"> </param>
            <param name="mousebutton"></param>
            <param name="mouseButtonState"></param>
            <param name="mousePosition"></param>
            <param name="clickCount"></param>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.EventManager.MouseButtonInputEventArgs.ClickCount">
            <summary>
             Get click count.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.EventManager.MouseButtonInputEventArgs.MouseButton">
            <summary>
             Which mouse button this applies to
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.EventManager.MouseButtonInputEventArgs.MouseButtonState">
            <summary>
             State of mouse button
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.EventManager.MouseWheelInputEventArgs">
            <summary>
             Mouse wheel event args
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.EventManager.MouseWheelInputEventArgs.#ctor(TPG.DrawObjects.Internals.Contracts.Views.IViewRender,TPG.GeoFramework.Contracts.IViewport,System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Int32)">
            <summary>
             Constructor
            </summary>
            <param name="viewRender"></param>
            <param name="viewport"></param>
            <param name="filteredRenderList"> </param>
            <param name="delta"></param>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.EventManager.MouseWheelInputEventArgs.Delta">
            <summary>
             Mouse wheel delta
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.EventManager.ViewEventArgs">
            <summary>
             Arguments for view events
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.EventManager.ViewUpdateFlags">
            <summary>
            Flags indicating which draw objects to redraw in a view update
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.Module.EventManager.ViewUpdateFlags.None">
            <summary>
             Update nothing.
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.Module.EventManager.ViewUpdateFlags.UpdateStaticObjects">
            <summary>
            Update all static (background) objects. I.e all objects in the store except the ones who are currently being edited.
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.Module.EventManager.ViewUpdateFlags.UpdateEditObjects">
            <summary>
            Update all objects currently being edited. These are rendered in a separate overlay for performance reasons.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.ICompositeCommand">
            <summary>
             Interface for composition of multiple undoable commands
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.ICompositeCommand.Commands">
            <summary>
            The list of undoable commands.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectSelection">
            <summary>
             Handles draw object selection
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectSelection.ClearDrawObjectSelection">
            <summary>
             Clears draw object selection
            </summary>
            <returns>Returns true if draw object selection was changed in this method.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectSelection.SelectDrawObject(TPG.DrawObjects.Contracts.Data.IDrawObjectData)">
            <summary>
             Adds a draw object to selection
            </summary>
            <param name="drawObjectData">The data representing the selected draw object.</param>
            <returns>Returns true if draw object selection was changed in this method.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectSelection.SelectDrawObject(System.String)">
            <summary>
             Adds a draw object to selection
            </summary>
            <param name="drawObjectInstanceId">Draw object instance id.</param>
            <returns>Returns true if draw object selection was changed in this method.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectSelection.IsSelected(TPG.DrawObjects.Contracts.Data.IDrawObjectData)">
            <summary>
             Returns whether a draw object is selected.
            </summary>
            <param name="drawObjectData"></param>
            <returns>Returns true if specified draw object is selected.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectSelection.IsSelected(System.String)">
            <summary>
             Returns whether a draw object is selected.
            </summary>
            <param name="drawObjectInstanceId">Draw object instance id.</param>
            <returns>Returns true if specified draw object is selected.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectSelection.DeselectDrawObjects(System.Collections.Generic.List{System.String},System.Boolean@)">
            <summary>
            Deselects a set of draw objects.
            </summary>
            <param name="deselectDrawObjectIds">The id of the draw objects to deselect.</param>
            <param name="changeInSelection">If any objects were deselected, true is returned, otherwise false.</param>
        </member>
        <member name="E:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectSelection.CollectionChanged">
            <summary>
            Collection changed event.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectSelection.SelectedDrawObjectIds">
            <summary>
             Returns enumerator for InstanceId's of all selected draw objects
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.IDrawObjectSelection.SelectedDrawObjectsCount">
            <summary>
             Returns number of selected draw objects
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.DrawObjectSelectionActions">
            <summary>
            The possible actions that can be done in selection.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.OnInitializedEventHandler">
            <summary>
            Event handler called after initialization.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.IModuleLifetimeManager">
            <summary>
            Initializes draw objects module
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.IModuleLifetimeManager.InitializeModule">
            <summary>
            Initializes draw objects module
            </summary>
            <remarks>
            Used for lifetime management of draw objects module. Thread-safe and re-entrant
            </remarks>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.IModuleLifetimeManager.CleanupModule">
            <summary>
            Cleans up module
            </summary>
            <remarks>
            Used for lifetime management of draw objects modulel. Thread-safe and re-entrant
            </remarks>
        </member>
        <member name="E:TPG.DrawObjects.Internals.Contracts.Module.IModuleLifetimeManager.OnInitialized">
            <summary>
            Raised when module is initialized
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.IModuleLifetimeManager.IsInitialized">
            <summary>
            Returns whether module has been initalized. Thread-safe and re-entrant
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.ModuleState.IModuleRuntimeInformation">
            <summary>
            Contains module lifetime information
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ModuleState.IModuleRuntimeInformation.Initialize(System.Threading.Thread)">
            <summary>
            Called to Initialize the runtime information
            </summary>
            <param name="mainThread"></param>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.ModuleState.IModuleRuntimeInformation.MainThread">
            <summary>
            Returns thread id of module main-thread
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.Rendering.IDrawObjectLayerRenderListManager">
            <summary>
            Manages render lists for draw object layer view model
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.Rendering.IDrawObjectLayerRenderListManager.GetRenderList(TPG.GeoFramework.DrawObjectLayer.Contracts.IDrawObjectLayerViewModel)">
            <summary>
            Generated/retrieves render list for draw object layer view model
            </summary>
            <param name="drawObjectLayerViewModel">Draw object layer view model</param>
            <returns>Enumerable of draw object datas to render</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.Rendering.IDrawObjectLayerRenderListManager.GetEditsList(TPG.GeoFramework.DrawObjectLayer.Contracts.IDrawObjectLayerViewModel)">
            <summary>
            Generated/retrieves render list for edited draw objects in layer view model
            </summary>
            <param name="drawObjectLayerViewModel">Draw object layer view model</param>
            <returns>Enumerable of draw object datas to render</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.Rendering.IDrawObjectLayerRenderListManager.GetEntireRenderList(TPG.GeoFramework.DrawObjectLayer.Contracts.IDrawObjectLayerViewModel)">
            <summary>
            Generated/retrieves render list for draw object layer view model without geo restrictions.
            </summary>
            <param name="drawObjectLayerViewModel">Draw object layer view model.</param>
            <returns>Enumerable of draw object datas to render.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.Rendering.IDrawObjectLayerRenderListManager.GetEntireRenderListFilteredByQuery(TPG.GeoFramework.DrawObjectLayer.Contracts.IDrawObjectLayerViewModel,TPG.GeoFramework.Style.Core.Contracts.Condition.ICondition)">
            <summary>
            Generates/retrieves render list for draw object layer view model with query restrictions.
            </summary>
            <param name="drawObjectLayerViewModel">Draw object layer view model.</param>
            <param name="query">Draw object query.</param>
            <returns>Enumerable of draw object datas to render.</returns>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.Rendering.IRenderListManager">
            <summary>
            Manager for render lists
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.Rendering.IRenderListManager.GetRenderList">
            <summary>
            Retrieves current render list
            </summary>
            <returns>List of DrawObjectData to render.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.Rendering.IRenderListManager.GetRenderListForLayerId(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.Rendering.IRenderListManager.GetEditsListForLayerId(System.String)">
            <inheritdoc/>
        </member>
        <member name="E:TPG.DrawObjects.Internals.Contracts.Module.Rendering.IRenderListManager.RenderListChanged">
            <summary>
            Raised when render-list has changed in some way
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.BeforeSelectionEventArgs">
            <summary>
            Arguemnt for event raised before selection occurs.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.BeforeSelectionEventArgs.InputEventArgs">
            <summary>
            Get or set mouse input event arguments.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.BeforeSelectionEventArgs.SelectedCandidate">
            <summary>
            Get or set selected candidate.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.BeforeSelectionEventArgs.Deny">
            <summary>
            Get or set if selection should be denied.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IDrawObjectSelectionHandler">
            <summary>
            Handles selection of draw objects.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IDrawObjectSelectionHandler.CheckForPossibleActions(System.Object,TPG.DrawObjects.Internals.Contracts.Module.EventManager.ModuleInputEventArgs,System.Boolean)">
            <summary>
            Checks for possible changes to selection state.
            </summary>
            <param name="sender">Event sender.</param>
            <param name="inputEventArgs">The event input event args.</param>
            <param name="isInWholeObjectMode"></param>
            <returns>The action that is found.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IDrawObjectSelectionHandler.ApplyChanges(TPG.DrawObjects.Internals.Contracts.Module.DrawObjectState.DrawObjectSelectionActions[])">
            <summary>
            Applies the speficied changes previously found in CheckForPossibleActions.
            </summary>
            <param name="drawObjectSelectionActions">The actions to perform.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IDrawObjectSelectionHandler.SetIsInWholeObjectMode(System.String,System.Boolean,TPG.DrawObjects.Internals.Contracts.Views.IViewRender)">
            <summary>
            Indicates that the module is in whole object mode.
            </summary>
            <param name="instanceId">Instance id of draw object to set edit points for.</param>
            <param name="isInWholeObjectMode">Flag indicating if in whole object mode.</param>
            <param name="viewRender">The viewRender for the view that is put into whole object mode.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IDrawObjectSelectionHandler.HasDrawObjectEditPointsTool(System.String)">
            <summary>
            Checks if draw object has edit points tool.
            </summary>
            <param name="instanceId">Draw object instance id.</param>
            <returns>True if draw object has edit points tool, otherwise false.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IDrawObjectSelectionHandler.IsObjectAtPoint(TPG.DrawObjects.Contracts.Data.IDrawObjectData,System.Windows.Point,TPG.DrawObjects.Internals.Contracts.Views.IViewRender,TPG.GeoFramework.Contracts.IViewport,System.Boolean)">
            <summary>
            Check if object is at a given point.
            </summary>
            <param name="drawObjectData">Draw object data.</param>
            <param name="point">Point.</param>
            <param name="viewRender">View renderer.</param>
            <param name="viewport">Viewport.</param>
            <param name="isInWholeObjectMode">Flag indicating if in whole object mode.</param>
            <returns>True if object is at point, otherwise false.</returns>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IDrawObjectSelectionHandler.SelectedCandidateId">
            <summary>
            Get id of selected candidate.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IDrawObjectSelectionHandler.CausedViewDirty">
            <summary>
            Indicates whether the view needs refreshing.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IDrawObjectToActiveToolsMapping">
            <summary>
            A mapping between active tools and the draw object they are associated with.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IDrawObjectToActiveToolsMapping.AddActiveTool(TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectTool)">
            <summary>
            Adds an active tool to the mapping.
            </summary>
            <param name="drawObjectTool">The tool to add.</param>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IDrawObjectToActiveToolsMapping.DrawObjectId">
            <summary>
            The draw object the tools are associated with.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IDrawObjectToActiveToolsMapping.ActiveTools">
            <summary>
            The list of active tools.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IMultipleDrawObjectManipulation">
            <summary>
            Interface for manipulation multiple draw objects besides the draw object that is receiving events directly.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IMultipleDrawObjectManipulation.EnableMultipleDrawObjectManipulation(TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectTool,System.String,TPG.DrawObjects.Internals.Contracts.Module.EventManager.ModuleInputEventArgs)">
            <summary>
            Enables manipulation of multiple draw objects from events received in a tool in one of the draw objects.
            </summary>
            <param name="initiatingTool">The tool that is initiating the multiple manipulation</param>
            <param name="controllingDrawObjectId">Draw object of the tool that initates multiple manipulation</param>
            <param name="moduleInputEventArgs">The event arguments.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IMultipleDrawObjectManipulation.DisableMultipleDrawObjectManipulation(TPG.DrawObjects.Internals.Contracts.Module.ICompositeCommand,TPG.DrawObjects.Internals.Contracts.Module.EventManager.ModuleInputEventArgs)">
            <summary>
            Disables the multiple manipulation mode. Any commands that may result from this is store in the compositeCommand argument.
            </summary>
            <param name="compositeCommand">Stores commands that may result from disabling multiple draw object manipulation</param>
            <param name="inputEventArgs"></param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IMultipleDrawObjectManipulation.HandleMultipleManipulation(TPG.DrawObjects.Internals.Contracts.Module.EventManager.ModuleInputEventArgs,TPG.DrawObjects.Internals.Contracts.Module.ICompositeCommand,System.String,System.String)">
            <summary>
            Handles the actual manipulation.
            </summary>
            <param name="moduleInputEventArgs">The event arguments.</param>
            <param name="compositeCommand">Used to store undo/redo or any other type of commands.</param>
            <param name="controllingDrawObjectInstanceId">Instance id of the controlling draw object.</param>
            <param name="controllingToolInstanceId">Instance id of the controlling tool</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IMultipleDrawObjectManipulation.HandleMultipleViewportChangedEvent(System.Object,TPG.DrawObjects.Internals.Contracts.Module.EventManager.ViewportChangedEventArgs,System.String,System.String)">
            <summary>
            Handles viewport changed event and distributes it to relevant tools.
            </summary>
            <param name="sender">Event sender.</param>
            <param name="viewportChangedEventArgs">The event arguments.</param>
            <param name="controllingDrawObjectInstanceId">Instance id of the controlling draw object.</param>
            <param name="controllingToolInstanceId">Instance id of the controlling tool</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IMultipleDrawObjectManipulation.CancelMultipleDrawObjectManipulation(TPG.DrawObjects.Internals.Contracts.Module.EventManager.ModuleInputEventArgs)">
            <summary>
            Cancels the multiple draw object manipulation that is active.
            </summary>
            <param name="inputEventArgs">The input event arguments</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IMultipleDrawObjectManipulation.EndMultipleDrawObjectManipulation">
            <summary>
            End multiple draw object manipulation.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IMultipleDrawObjectManipulation.IsActive">
            <summary>
            Field indicating if multi select is currently active.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.ISelectionController">
            <summary>
            Controlls selection of draw objects and tools.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.ISelectionController.Initialize">
            <summary>
             Initializes selection manager
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.ISelectionController.Cleanup">
            <summary>
             Cleans up selection manager
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.ISelectionController.SetIsInWholeObjectMode(System.String,System.Boolean,TPG.DrawObjects.Internals.Contracts.Views.IViewRender)">
            <summary>
            Sets changes the whole object mode of the selection mechanism.
            </summary>
            <param name="instanceId">Instance id of draw object to set edit mode for.</param>
            <param name="inWholeObjectMode">True if while object mode is active, false if not.</param>
            <param name="viewRender">The view that is associated withe the mode to set.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.ISelectionController.IsObjectAtPoint(TPG.DrawObjects.Contracts.Data.IDrawObjectData,System.Windows.Point,TPG.DrawObjects.Internals.Contracts.Views.IViewRender,TPG.GeoFramework.Contracts.IViewport)">
            <summary>
            Check if object is at a given point.
            </summary>
            <param name="drawObjectData">Draw object data.</param>
            <param name="point">Point.</param>
            <param name="viewRender">View renderer.</param>
            <param name="viewport">Viewport.</param>
            <returns>True if object is at point, otherwise false.</returns>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.ISelectionController.IsInWholeObjectMode">
            <summary>
            Returns true if in whole object mode, false otherwise.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IToolManager">
            <summary>
             Manager for tool state
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IToolManager.NotifyViewDirty(TPG.DrawObjects.Internals.Contracts.Module.EventManager.ViewUpdateFlags)">
            <summary>
             Called when a tool makes change that requires a refresh
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IToolManager.Initialize">
            <summary>
             Initializes tool manager
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IToolManager.Cleanup">
            <summary>
             Cleans up tool manager
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IToolManager.EnableMouseTracking(TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectTool,TPG.DrawObjects.Internals.Contracts.Module.EventManager.ModuleInputEventArgs,TPG.DrawObjects.Contracts.Data.IDrawObjectData)">
            <summary>
             Enabled mouse tracking for specified tool
            </summary>
            <param name="drawObjectTool">Tool</param>
            <param name="inputEventArgs">The input event args the tool is working with.</param>
            <param name="drawObjectData">The DrawObjectData the tool is working on.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IToolManager.DisableMouseTracking(TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectTool,TPG.DrawObjects.Internals.Contracts.Module.EventManager.ModuleInputEventArgs,TPG.DrawObjects.Contracts.Data.IDrawObjectData,TPG.DrawObjects.Internals.Contracts.Module.ICompositeCommand)">
            <summary>
            Disables mouse-tracking for specified tool
            </summary>
            <param name="drawObjectTool">Tool</param>
            <param name="inputEventArgs">Input event arguments in tool.</param>
            <param name="drawObjectData">Data of the object being operated on.</param>
            <param name="currentCommand">Current undoable command</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IToolManager.ClearMouseTracking">
            <summary>
             Clears all mouse tracking
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IToolManager.IsToolTypeTracked(System.String)">
            <summary>
             Returns whether tool type id has enabled mouse tracking
            </summary>
            <returns></returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IToolManager.IsToolTracked(TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectTool)">
            <summary>
             Returns whether concrete tool is being mouse tracked
            </summary>
            <param name="tool">Draw object tool.</param>
            <returns>True if specified tool is being tracked, otherwise false.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IToolManager.IsInToolTrackingMode">
            <summary>
            Returns true if the tool manager has a tracking tool.
            </summary>
            <returns>True if tracking tool, false otherwise.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IToolManager.DrawToolDecorations(TPG.DrawObjects.Contracts.Data.IDrawObjectData,TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectViewState,TPG.DrawObjects.Internals.Contracts.Views.IViewRender,TPG.GeoFramework.Contracts.IViewport)">
            <summary>
             Draws tool decorations
            </summary>
            <param name="drawObjectData"></param>
            <param name="drawObjectViewState"></param>
            <param name="viewRender">View</param>
            <param name="viewport"></param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IToolManager.IsDrawObjectSelectedAndTracking(TPG.DrawObjects.Contracts.Data.IDrawObjectData)">
            <summary>
            Checks if a draw object represented by the draw object data is selected and being tracked.
            </summary>
            <param name="drawObjectData">DrawObject representation</param>
            <returns>True if selected and tracking</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IToolManager.IsDrawObjectSelectedAndToolTracking(TPG.DrawObjects.Contracts.Data.IDrawObjectData,TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectTool)">
            <summary>
            Checks if a draw object represented by the draw object data is selected and being tracked.
            </summary>
            <param name="drawObjectData">DrawObject representation</param>
            <param name="drawObjectTool">If set, the draw object has to be tracked by the specified tool.</param>
            <returns>True if selected and tracked by specified tool.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IToolManager.SetIsInWholeObjectMode(System.Boolean)">
            <summary>
            Sets if the tool manager should be in whole object mode or in edit mode. Also all tool states
            are cleared.
            </summary>
            <param name="isInWholeObjectMode">True sets tool manager in whole object mode, false in edit mode.</param>
            ///
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IToolManager.IsDrawObjectSelectedAndToolTypeTracking(TPG.DrawObjects.Contracts.Data.IDrawObjectData,TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectTool)">
            <summary>
            Checks if a draw object represented by the draw object data is selected and being tracked.
            </summary>
            <param name="drawObjectData">DrawObject representation</param>
            <param name="drawObjectTool">If set, the draw object has to be tracked by the same tool type as the specified tool.</param>
            <returns>True if selected and tracked by specified tool.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IToolManager.ShouldDrawToolDecorations(TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectTool)">
            <summary>
            Based return true if the tool should draw its decorations
            </summary>
            <param name="drawObjectTool">The tool that want to draw decorations</param>
            <returns>True if decorations should be drawn, false otherwise.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IToolManager.IsDrawObjectPartOfMultiSelectModification(TPG.DrawObjects.Contracts.Data.IDrawObjectData,TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectTool)">
            <summary>
            Checks if a given object and tool is being modified externally to the event loop as part of a multi
            select operation.
            </summary>
            <param name="drawObjectData">DrawObject representation</param>
            <param name="drawObjectTool">DrawObject tool</param>
            <returns></returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IToolManager.HandleInputEvent(System.Object,TPG.DrawObjects.Internals.Contracts.Module.EventManager.ModuleInputEventArgs)">
            <summary>
            Handles input event and distributes it to relevant tools.
            </summary>
            <param name="sender">Event sender.</param>
            <param name="inputEventArgs">The input event arguments.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IToolManager.HandleViewportChangedEvent(System.Object,TPG.DrawObjects.Internals.Contracts.Module.EventManager.ViewportChangedEventArgs)">
            <summary>
            Handles viewport changed event and distributes it to relevant tools.
            </summary>
            <param name="sender">Event sender.</param>
            <param name="viewportChangedEventArgs">The event arguments.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IToolManager.CancelMouseTracking(TPG.DrawObjects.Internals.Contracts.Module.EventManager.ModuleInputEventArgs)">
            <summary>
            Cancels mouse tracking.
            </summary>
            <param name="inputEventArgs">The input event arguments that cancels the event.</param>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IToolManager.IsInWholeObjectMode">
            <summary>
            Property that returns true if the ToolManager is in edit mode, false othervise.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IToolManagerUtils">
            <summary>
            Utility methods for tool manager
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IToolManagerUtils.ContainsToolType(System.Collections.Generic.IList{TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectTool},System.String)">
            <summary>
            Checks whether a list of tools contains a particular tool type
            </summary>
            <param name="tools">List of tools.</param>
            <param name="toolTypeId">Tool type id.</param>
            <returns></returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IToolManagerUtils.GetToolsWithSameToolTypeId(System.Collections.Generic.IEnumerable{TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectTool},System.String)">
            <summary>
            Retrieves tool with specified tool type id from a collection of tools
            </summary>
            <param name="tools">Tool collection.</param>
            <param name="toolTypeId">Tool type id.</param>
            <returns></returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IToolManagerUtils.GetDrawObjectDataInstanceToUse(System.String)">
            <summary>
            Retrieves most recent data copy of specified 
            </summary>
            <param name="selectedDrawObjectId"></param>
            <returns></returns>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IToolSelectionHandler">
            <summary>
            Handles selection of tools.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IToolSelectionHandler.CheckForPossibleActions(System.Object,TPG.DrawObjects.Internals.Contracts.Module.EventManager.ModuleInputEventArgs,System.Boolean)">
            <summary>
            Checks for possible changes in selection state.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="inputEventArgs">The input events.</param>
            <param name="isInWholeObjectMode">Indicates whether the selection mechanism is in whole object mode.</param>
            <returns>The action that can bo performed.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IToolSelectionHandler.ApplyActions(TPG.DrawObjects.Internals.Contracts.Module.EventManager.ModuleInputEventArgs,TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.ToolSelectionActions[])">
            <summary>
            Applies the speficied changes previously found in CheckForPossibleActions.
            </summary>
            <param name="inputEventArgs">The input event args.</param>
            <param name="actions">The actions to apply.</param>
            <returns></returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IToolSelectionHandler.Initialize">
            <summary>
            Initializes the tool selection handler.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IToolSelectionHandler.Cleanup">
            <summary>
            Cleans up the tool selection handler.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.IToolSelectionHandler.SetIsInWholeObjectMode(System.Boolean)">
            <summary>
            Called when changes of whole object mode occurs.
            </summary>
            <param name="isInWholeObjectMode">The mode changed to.</param>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.ToolSelectionActions">
            <summary>
            The possible actions that can be performed on tool selections.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.SuppressToolTypes">
            <summary>
            Tool suppression types
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.Module.ToolHandling.SuppressToolTypes.Move">
            <summary>
            Move tool suppressed.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.ViewState.DrawObjectRenderStateKeys">
            <summary>
            Contains keys for render state.
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.Module.ViewState.DrawObjectRenderStateKeys.DrawObjectDisplayPartsKey">
            <summary>
            Render state key for controling which parts of not to render.
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.Module.ViewState.DrawObjectRenderStateKeys.SymbolLabelResourcesKey">
            <summary>
            Key for pre-rendered symbol label resources.
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.Module.ViewState.DrawObjectRenderStateKeys.ResolvedSymbolLabelTextKey">
            <summary>
            Key for storing resolved symbol label texts-
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectWorkflowStateProvider">
            <summary>
            Provider for draw object workflow state.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectWorkflowStateProvider.ContainsViewState(System.String,System.String)">
            <summary>
            Whether workflow state exists for specified view type
            </summary>
            <param name="drawObjectTypeId">Draw object type id.</param>
            <param name="viewTypeId">View type id.</param>
            <returns>True if workflow state exists, otherwise false.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectWorkflowStateProvider.GetWorkflowState(System.String,System.String)">
            <summary>
            retrieves workflow state for specified view type
            </summary>
            <param name="drawObjectTypeId">Draw object type id.</param>
            <param name="viewTypeId">View type id.</param>
            <returns>Workflow state.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectWorkflowStateProvider.GetOrCreateWorkflowState(System.String,System.String)">
            <summary>
            Creates or retrieves workflow state for specified view type
            </summary>
            <param name="drawObjectTypeId">Draw object type id.</param>
            <param name="viewTypeId">View type id.</param>
            <returns>Workflow state.</returns>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectWorkflowState">
            <summary>
            Stores temporary workflow handler state data in a map between workflow instance id and the state object.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectWorkflowState.Add(System.String,System.Object)">
            <summary>
             Adds data to workflow handler state
            </summary>
            <param name="drawObjectTypeId">The instance id of the draw object type to map state to.</param>
            <param name="workflowState">The workflow state object to add.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectWorkflowState.Get``1(System.String)">
            <summary>
            Attempts to retrieve data from workflow handler state
            </summary>
            <param name="drawObjectTypeId">The instance id of the draw object type to retrive state for.</param>
            <returns>The state object.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectWorkflowState.Contains(System.String)">
            <summary>
            Checks if key is present in workflow handler state
            </summary>
            <param name="drawObjectTypeId">The instance id of the draw object type to check if has state mapped to it.</param>
            <returns>True if state exists, false otherwise.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectWorkflowState.GetOrCreateWorkflowState``1(System.String)">
            <summary>
            Attempts to retrieve workflow state of a particular type and if it does not exist will create it first
            </summary>
            <typeparam name="T">The type of the workflow state to get or create.</typeparam>
            <param name="drawObjectTypeId">Instance id of the corresponding draw object type.</param>
            <returns>The workflow state.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectWorkflowState.ClearAllWorkflowStates">
            <summary>
             Clears all workflow state
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectWorkflowState.CreateWorkflowState``1(System.String)">
            <summary>
            Creates a new workflow state for the workflow with the given instance id.
            </summary>
            <typeparam name="T">The workflow state type to instantiate.</typeparam>
            <param name="drawObjectTypeId">The instance id of the corresponding draw object type.</param>
            <returns>The created workflow state.</returns>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectViewStateProvider">
            <summary>
            Provider for draw object view state
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectViewStateProvider.ContainsViewState(System.String,System.String)">
            <summary>
            Whether viewstate exists for specified view type
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectViewStateProvider.GetViewState(System.String,System.String)">
            <summary>
            Retrieves view state for specified view type
            </summary>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if view state for specified view type does not exist. </exception>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectViewStateProvider.GetOrCreateViewState(System.String,System.String)">
            <summary>
            Creats or retrieves view state for specified view type
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectViewStateProvider.GetAllViewStates(System.String)">
            <summary>
            Returns an enumerable of all view-states in draw object
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectViewStateProvider.RemoveAllToolStatesInAllViewStates(System.String)">
            <summary>
            Non-persistent data used by view.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Rendering.DrawObjectStyleFieldBuilder">
            <summary>
            Class for building style paths from strings. Also holds all legal string values for styles.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Rendering.DrawObjectStyleFieldBuilder.BuildFromStyles(System.String[])">
            <summary>
            Builds the string to use for fetching styles give a style path..
            </summary>
            <param name="style">The style path.</param>
            <returns>The path string.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Rendering.DrawObjectStyleFieldBuilder.LineColorStringFromColorScheme(System.String)">
            <summary>
            Returns the foreground color path string.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Rendering.DrawObjectStyleFieldBuilder.LineColorString">
            <summary>
            Returns the foreground color path string.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Rendering.DrawObjectStyleFieldBuilder.LineWidthString">
            <summary>
            Returns the foreground width path string.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Rendering.DrawObjectStyleFieldBuilder.ToolWidthString">
            <summary>
            Returns the tool width path string.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Rendering.DrawObjectStyleFieldBuilder.ToolLineColor">
            <summary>
            Returns the tool foreground color path string.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Rendering.DrawObjectStyleContext">
            <summary>
            Holds the style contexts that are possible to set.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Rendering.DrawObjectStyleCategories">
            <summary>
            Legal style categories.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Rendering.DrawObjectStyleFields">
            <summary>
            Holds the style fields that are possible to set.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Rendering.IDrawObjectStyleProvider">
            <summary>
            Adds relevant style hints.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Rendering.IDrawObjectStyleProvider.ResolveStyle(TPG.DrawObjects.Contracts.Data.IDrawObjectData,System.String,TPG.DrawObjects.Contracts.Filters.IDrawObjectItemContext)">
            <summary>
            Resolves a style for a given draw object.
            </summary>
            <param name="drawObjectData">Data of the draw object to resolve for.</param>
            <param name="styleCategory">The style category to resolve.</param>
            <param name="itemContext">Item context to use when resolveing.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Rendering.IDrawObjectStyleProvider.ResolveDefaultValueStyle(TPG.DrawObjects.Contracts.Data.IDrawObjectData,System.String,TPG.DrawObjects.Contracts.Filters.IDrawObjectItemContext)">
            <summary>
            Resolves a default value style for a given draw object.
            </summary>
            <param name="drawObjectData">Data of the draw object to resolve for.</param>
            <param name="styleCategory">The style category to resolve.</param>
            <param name="itemContext">Item context to use when resolveing.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Rendering.IDrawObjectStyleProvider.GetDrawObjectItemContext(TPG.DrawObjects.Contracts.Data.IDrawObjectData)">
            <summary>
            Returns a new item context object.
            </summary>
            <param name="drawObjectData">Data object to use. Can be null</param>
            <returns>The IDrawObjectItemContext</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Rendering.IDrawObjectStyleProvider.FindDefaultStyleProperties(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Find properties in default style.
            </summary>
            <param name="properties">Properties list.</param>
            <param name="path">Current property path.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Rendering.IDrawObjectStyleProvider.IsDefaultPropertyMapped(System.String)">
            <summary>
            Check if default property is mapped.
            </summary>
            <param name="property">Property name.</param>
            <returns>True if default property is mapped, otherwise false.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Rendering.IDrawObjectStyleProvider.GetMappedDefaultPropertyName(System.String)">
            <summary>
            Get mapped default property name.
            </summary>
            <param name="property">Property name.</param>
            <returns>Mapped default property name or null if not found.</returns>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Rendering.IDrawObjectStyleProvider.StyleSet">
            <summary>
            The style set that is active.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Rendering.IDrawObjectStyleProvider.DefaultValueStyleSet">
            <summary>
            The default value style set that is active.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Rendering.IDrawObjectStyleProvider.RootDefaultValueStyleItem">
            <summary>
            The root style item of a resolved default value style.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Rendering.IDrawObjectStyleManager">
            <summary>
            Defines the interface for all draw object tool managers.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Rendering.IDrawObjectStyleManager.GetProperty``1(TPG.DrawObjects.Contracts.Data.IDrawObjectData,System.String)">
            <summary>
            Get property by name.
            </summary>
            <typeparam name="T">Property type.</typeparam>
            <param name="drawObjectData">Data representing the draw object to style.</param>
            <param name="propertyName">Property name.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Rendering.IDrawObjectStyleManager.GetDefaultPropertyValue``1(TPG.DrawObjects.Contracts.Data.IDrawObjectData,System.String)">
            <summary>
            Get default property value by name.
            </summary>
            <typeparam name="T">Property type.</typeparam>
            <param name="drawObjectData">Data representing the draw object to style.</param>
            <param name="propertyName">Property name.</param>
            <returns>Property value.</returns>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Rendering.ISymbolsStore">
            <summary>
            Interface that implements access to a symbol service/library.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Rendering.ISymbolsStore.GetRasterSymbol(System.String,System.String,System.Int32,TPG.DrawObjects.Contracts.Data.IDrawObjectData,System.Boolean,System.Boolean,System.Nullable{System.Windows.Media.Color},TPG.GeoFramework.Symbols.Contracts.Storage.SymbolColorScheme,System.Nullable{TPG.GeoFramework.Symbols.Contracts.Storage.SymbolColorOverride})">
            <summary>
            Gets a symbol based on its code.
            </summary>
            <param name="symbolType">The type of symbol to get. Decides which symbol provider to use.</param>
            <param name="symbolCode">Unique code of the symbol.</param>
            <param name="symbolScale">Scale of object.</param>
            <param name="drawObjectData">Data of draw object in use.</param>
            <param name="grayScale">Flag to retrieve gray scale version of symbol.</param>
            <param name="dropShadow"></param>
            <param name="dropShadowColor"></param>
            <param name="symbolColorScheme"></param>
            <param name="symbolColorOverride"></param>
            <returns>The relevant symbol.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Rendering.ISymbolsStore.EchelonString(System.Char)">
            <summary>
            Returns the string representing the echelon modifier.
            </summary>
            <param name="echelonCode">Code of echelon.</param>
            <returns>String representing echelon symbol.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Rendering.ISymbolsStore.GetSymbolProvider(System.String)">
            <summary>
            Underlying symbolization provider.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Rendering.ISymbolsStore.GetSymbolScale(System.Boolean,TPG.GeoFramework.Contracts.IViewport)">
            <summary>
            Get symbol scale
            </summary>
            <param name="dynamicScale">Dynamic scale flag.</param>
            <param name="viewport">Viewport.</param>
            <returns>Scale.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Rendering.ISymbolsStore.ClearCache">
            <summary>
            Clear all cached symbols
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Rendering.PartRendererParameterTypes">
            <summary>
            Defines the types that can be used for parameters in the PrimitivePartRenderer Parameter block.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Rendering.PartRendererParameterTypes.Direction">
            <summary>
            Indicates at which end of a Corridor Area to operate on.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Rendering.PartRendererParameterTypes.GeneralPositions">
            <summary>
            Describes in which direction the text should be drawn on a polygon area line.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Rendering.PartRendererParameterTypes.PolygonAreaFeintRelativePosition">
            <summary>
            Describes where the text is to be placed relative to the modier.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Rendering.PartRendererParameterTypes.LineEndingFigure">
            <summary>
            Describes possible ending figures of a line.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Rendering.PartRendererParameterTypes.LineEndTextPosition">
            <summary>
            Defines if the text should be placed at the beginning, end or both of the line.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Rendering.PartRendererParameterTypes.LineTextPositionAlongLine">
            <summary>
            Defines if the text should be placed at the beginning, end or centered along a line.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Rendering.PartRendererParameterTypes.LineTextPositionVertical">
            <summary>
            Defines if the text should be placed above or below the line.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Rendering.PartRendererParameterTypes.TrafficArrowType">
            <summary>
            Enum describing the different types of traffic arrow used in line renderers.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Rendering.PartRendererParameterTypes.TextBlockPosition">
            <summary>
            Enum describing the different placements of a text block.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Rendering.PartRendererParameterTypes.Range">
            <summary>
            Enum describing the different ranges to use.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Rendering.PartRendererParameterTypes.OrbitAreaFigureType">
            <summary>
             Enum describing the different figures to draw a orbit area as.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Rendering.PartRendererParameterTypes.OrbitAreaDirection">
            <summary>
             Enum describing the different direction of orbit that is valid.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Resources.IResourceFinder">
            <summary>
            Utility for finding resource related information
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Resources.IResourceFinder.GetDrawObjectTypeDefinitionResourceNames">
            <summary>
            Returns an enumerator for type definition XDocument's
            </summary>
            <returns></returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Resources.IResourceFinder.GetResourceStream(System.String)">
            <summary>
            Retrieves a resource as a stream
            </summary>
            <param name="resourceName">Full name of resource</param>
            <returns>Stream. Should be disposed when no longer needed.</returns>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectDataUpdateInfo">
            <summary>
            Interface for draw object update information.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectDataUpdateInfo.Data">
            <summary>
            Get updated draw object data.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectDataUpdateInfo.IsNew">
            <summary>
            Get or set if draw object data is new.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectDataUpdateInfo.UpdatedFields">
            <summary>
            Get or set updated fields.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectDataUpdateInfo.DeletedFields">
            <summary>
            Get or set deleted fields.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectDataUpdateInfo.IsGeometryUpdated">
            <summary>
            Get or set if geometry is updated.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectDataUpdateInfo.IsCoordinateSystemsUpdated">
            <summary>
            Get or set if coordinate systems are updated.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.ServiceResources.DrawObjectDataDiffTypes">
            <summary>
            Draw object diff type definitions.
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.ServiceResources.DrawObjectDataDiffTypes.None">
            <summary>
            No differences exist.
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.ServiceResources.DrawObjectDataDiffTypes.Fields">
            <summary>
            Fields are different.
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.ServiceResources.DrawObjectDataDiffTypes.CoordinateSystems">
            <summary>
            Coordinate systems are different.
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.ServiceResources.DrawObjectDataDiffTypes.Geometry">
            <summary>
            Geometry is different.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectDataDiffFinder">
            <summary>
            Interface for comparing draw object data to find differences.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectDataDiffFinder.GetDrawObjectDataDiff(TPG.DrawObjects.Contracts.Data.IDrawObjectData,TPG.DrawObjects.Contracts.Data.IDrawObjectData)">
            <summary>
            Get info about changes in updated draw object.
            </summary>
            <param name="existingData">Existing draw object data.</param>
            <param name="updatedData">Updated draw object data.</param>
            <returns>Draw object diff info.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectDataDiffFinder.GetUpdatedFields(TPG.DrawObjects.Contracts.Data.IDrawObjectData,TPG.DrawObjects.Contracts.Data.IDrawObjectData)">
            <summary>
            Get updated fields.
            </summary>
            <param name="existingData">Existing draw object data.</param>
            <param name="updatedData">Updated draw object data.</param>
            <returns>Updated fields.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectDataDiffFinder.GetDeletedFields(TPG.DrawObjects.Contracts.Data.IDrawObjectData,TPG.DrawObjects.Contracts.Data.IDrawObjectData)">
            <summary>
            Get deleted fields.
            </summary>
            <param name="existingData">Existing draw object data.</param>
            <param name="updatedData">Updated draw object data.</param>
            <returns>Deleted fields.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectDataDiffFinder.HasGeometryDiff(TPG.DrawObjects.Contracts.Data.IDrawObjectData,TPG.DrawObjects.Contracts.Data.IDrawObjectData)">
            <summary>
            Check if geometry is different.
            </summary>
            <param name="existingData">Existing draw object data.</param>
            <param name="updatedData">Updated draw object data.</param>
            <returns>True if differences exist, otherwise false.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectDataDiffFinder.HasCoordinateSystemDiff(TPG.DrawObjects.Contracts.Data.IDrawObjectData,TPG.DrawObjects.Contracts.Data.IDrawObjectData)">
            <summary>
            Check if coordinate systems are different.
            </summary>
            <param name="existingData">Existing draw object data.</param>
            <param name="updatedData">Updated draw object data.</param>
            <returns>True if differences exist, otherwise false.</returns>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectDataInfo">
            <summary>
            Interface for draw object data information retrieved from service.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectDataInfo.DrawObjectDatas">
            <summary>
            Get or set draw object data.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectDataInfo.DeletedDrawObjectDataIds">
            <summary>
            Get or set deleted draw object data ids.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectServiceClientResources">
            <summary>
            Interface for common elements for writer/reader/monitor.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectServiceClientResources.CreateFieldUpdateMessage(TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectDataUpdateInfo)">
            <summary>
            Create update message for draw object fields.
            </summary>
            <param name="drawObjectUpdate">Draw object update to create update messages for.</param>
            <returns>Update message.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectServiceClientResources.CreateFieldDeleteMessage(TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectDataUpdateInfo)">
            <summary>
            Create delete message for draw object fields.
            </summary>
            <param name="drawObjectUpdate">Draw object update to create update messages for.</param>
            <returns>Update message.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectServiceClientResources.CreateCoordinateSystemsUpdateMessage(TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectDataUpdateInfo)">
            <summary>
            Create update message for draw object coordinate systems.
            </summary>
            <param name="drawObjectUpdate">Draw object update to create update messages for.</param>
            <returns>Update message.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectServiceClientResources.CreateGeometryUpdateMessage(TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectDataUpdateInfo)">
            <summary>
            Create update message for draw object geometry.
            </summary>
            <param name="drawObjectUpdate">Draw object update to create update messages for.</param>
            <returns>Update message.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectServiceClientResources.CreateUpdateMessage(TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectDataUpdateInfo)">
            <summary>
            Create update message for draw object.
            </summary>
            <param name="drawObjectDataUpdate">Draw object data update to create update message for.</param>
            <returns>Update message.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectServiceClientResources.CreateDeleteMessages(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create delete messages for draw objects.
            </summary>
            <param name="drawObjectIds">Ids of draw objects to create delete messages for.</param>
            <returns>List of delete messages.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectServiceClientResources.GetDrawObjectDataInfoFromDataMessage(TPG.GeoFramework.DrawObjectServiceInterfaces.DrawObjectDataMessage)">
            <summary>
            Get draw object data information from draw object data message.
            </summary>
            <param name="drawObjectDataMessage">Draw object data message from service.</param>
            <returns>Draw object data information.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectServiceClientResources.GetSortedDrawObjectInfoFromInfoMessage(TPG.GeoFramework.DrawObjectServiceInterfaces.SortedDrawObjectInfoMessage)">
            <summary>
            Get sorted draw object information from sorted draw object info message.
            </summary>
            <param name="sortedDrawObjectInfoMessage">Sorted draw object info message from service.</param>
            <returns>Sorted draw object information.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectServiceClientResources.GetDrawObjectVersionInfoFromVersionMessage(System.Collections.Generic.List{TPG.GeoFramework.DrawObjectServiceInterfaces.DrawObjectVersionMessage})">
            <summary>
            Get draw object version info from version message,
            </summary>
            <param name="drawObjectVersionMessages">Draw object version message from service.</param>
            <returns>List of draw object version info.</returns>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectServiceClientResources.ServiceClient">
            <summary>
            Service client connecting to draw object service
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectServiceManager">
            <summary>
            Interface for draw object service management.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectServiceManager.AddStore(System.String)">
            <summary>
            Add draw object store.
            </summary>
            <param name="storeId">Store id.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectServiceManager.DeleteStore(System.String)">
            <summary>
            Remove draw object store.
            </summary>
            <param name="storeId">Id of store to remove.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectServiceManager.DeleteAllStores">
            <summary>
            Remove all draw object stores.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectServiceManager.GetStoreIds">
            <summary>
            Get draw object store ids.
            </summary>
            <returns>List of draw object store ids.</returns>
        </member>
        <member name="E:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectServiceManager.ServiceRestarted">
            <summary>
            Draw object service restarted event.
            </summary>
        </member>
        <member name="E:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectServiceManager.ServiceResourcesChanged">
            <summary>
            Draw object service resources updated.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectServiceManager.ServiceResources">
            <summary>
            Service resources common to service adapters.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectServiceReader">
            <summary>
            Interface for handling reading of draw objects from service.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectServiceReader.GetDrawObjects(System.String)">
            <summary>
            Get all draw objects in "storeId" from service.
            </summary>
            <param name="storeId">Store identifier.</param>
            <returns>Draw object data information from service.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectServiceReader.GetDrawObjects(System.String,TPG.GeoFramework.Style.Core.Contracts.Condition.ICondition)">
            <summary>
            Get draw objects in "storeId" from service.
            </summary>
            <param name="storeId">Store identifier.</param>
            <param name="condition">Condition identifying draw objects to get.</param>
            <returns>Draw object data information from service.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectServiceReader.GetSortedData(System.String,TPG.GeoFramework.Style.Core.Contracts.Condition.ICondition,System.Collections.Generic.IList{TPG.GeoFramework.Style.Core.Contracts.Sorting.SortInfoItem},System.Int32,System.Int32)">
            <summary>
            Get draw objects sorted by specified field(s).
            </summary>
            <param name="storeId">Store identifier.</param>
            <param name="condition">Query for selecting sorted draw objects. Selected draw objects can be offset from start of
            sort order. THe specified number of draw objects can be lower than the total count.</param>
            <param name="sortItems">List of sort items containing sorting info.</param>
            <param name="offset">Offset into the set of draw objects to be returned.</param>
            <param name="maxCount">Maximum count of draw objects to be returned.</param>
            <returns>Sorted draw objects and supporting information.</returns>
        </member>
        <member name="E:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectServiceReader.ServiceResourcesChanged">
            <summary>
            Draw object service resources updated.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectServiceReader.ServiceResources">
            <summary>
            Service resources common to service adapters.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectServiceSynchronizer">
            <summary>
            Interface for interacting with draw object service at regular intervals to syncronize draw objects.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectServiceSynchronizer.UpdateDrawObjects(System.String,System.Collections.Generic.IEnumerable{TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectDataUpdateInfo})">
            <summary>
            Update draw object data in service.
            </summary>
            <param name="storeId">Name of store (case sensitive)</param>
            <param name="drawObjectDataUpdates">List containing draw object update info.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectServiceSynchronizer.DeleteDrawObjects(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Delete draw objects from service.
            </summary>
            <param name="storeId">Name of store (case sensitive)</param>
            <param name="instanceIds">List of draw object ids to delete.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectServiceSynchronizer.GetDrawObjectDataUpdateInfo(TPG.DrawObjects.Contracts.Data.IDrawObjectData,TPG.DrawObjects.Contracts.Data.IDrawObjectData)">
            <summary>
            Get update info for updated draw object.
            </summary>
            <param name="existingData">Existing draw object data.</param>
            <param name="updatedData">Updated draw object data.</param>
            <returns>Draw object update info.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectServiceSynchronizer.GetDrawObjectDataUpdateInfo(TPG.DrawObjects.Contracts.Data.IDrawObjectData)">
            <summary>
            Get update info for new draw object data.
            </summary>
            <param name="newDrawObjectData">New draw object data.</param>
            <returns>Draw object update info.</returns>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectServiceSynchronizer.LayerId">
            <summary>
            Get or set layer id.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectServiceSynchronizer.FetchDataCondition">
            <summary>
            Get or set condition used to fetch dat from draw object sservice.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectServiceSynchronizer.RefreshInterval">
            <summary>
            Get or set refresh interval.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectServiceSynchronizer.AutoFetchEnabled">
            <summary>
            Get or set if auto fetched is enabled
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectServiceWriter">
            <summary>
            Interface for handling writing of draw objects to service.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectServiceWriter.WriteDrawObjects(System.String,System.Collections.Generic.IEnumerable{TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectDataUpdateInfo})">
            <summary>
            Writes draw object updates to service.
            </summary>
            <param name="storeId">Name of store (case sensitive)</param>
            <param name="drawObjectDiffs">List containing draw object data updates.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectServiceWriter.DeleteDrawObjects(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Delete draw objects from store.
            </summary>
            <param name="storeId"></param>
            <param name="drawObjectIds"></param>
        </member>
        <member name="E:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectServiceWriter.ServiceResourcesChanged">
            <summary>
            Draw object service resources updated.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectServiceWriter.ServiceResources">
            <summary>
            Service resources common to service adapters
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectVersionInfo">
            <summary>
            Draw object version information interface.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectVersionInfo.Id">
            <summary>
            Get draw object id.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.ServiceResources.IDrawObjectVersionInfo.Version">
            <summary>
            Get draw object version.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.ToolHandling.IWholeObjectViewportDependentTool">
            <summary>
            Interface for viewport dependent tools.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.ToolHandling.IViewportDependentTool">
            <summary>
            Interface for viewport dependent tools.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ToolHandling.IViewportDependentTool.HandleViewportChanged(TPG.DrawObjects.Internals.Contracts.Module.EventManager.ViewportChangedEventArgs,TPG.DrawObjects.Contracts.Data.IDrawObjectData,TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectViewState)">
            <summary>
            Handle viewport changed.
            </summary>
            <param name="viewportChangedEventArgs">Viewport changed event arguments.</param>
            <param name="drawObjectData">Draw object data.</param>
            <param name="viewState">View state.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ToolHandling.IWholeObjectViewportDependentTool.HandleExternalViewportChangedEvent(TPG.DrawObjects.Internals.Contracts.Module.EventManager.ViewportChangedEventArgs,TPG.DrawObjects.Contracts.Data.IDrawObjectData,TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectViewState,TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectViewState,System.String)">
            <summary>
            Handle viewport changed.
            </summary>
            <param name="viewportChangedEventArgs">Viewport changed event arguments.</param>
            <param name="drawObjectData">Draw object data.</param>
            <param name="viewState">View state.</param>
            <param name="controllingToolViewState">Controlling tool view state.</param>
            <param name="controllingToolInstanceId">Controlling tool instance id.</param>        
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectGenericTagModifierTool">
            <summary>
            Tools that work on a xml tag in the Fields section of a Draw Object.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectTool">
            <summary>
             A single manipulation tool for a draw object. 
             This class can represent for example a move operation or a resize operation on a complete DrawObject.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectTool.ShouldDrawGeoDecorations(TPG.DrawObjects.Contracts.Data.IDrawObjectData,TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectViewState)">
            <summary>
            Decides whether geo decorations should be drawn
            </summary>
            <param name="drawObjectData">Draw object data.</param>
            <param name="viewState">View state.</param>
            <returns></returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectTool.DrawDecorations(TPG.DrawObjects.Internals.Contracts.Views.IViewRender,TPG.GeoFramework.Contracts.IViewport,TPG.DrawObjects.Contracts.Data.IDrawObjectData,TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectViewState)">
            <summary>
            Draw tool decorations.
            </summary>
            <param name="viewRender">View to draw decorations in.</param>
            <param name="viewport"></param>
            <param name="drawObjectData">Data object.</param>
            <param name="viewState">Render state / tool state for the view.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectTool.OnInputEvent(TPG.DrawObjects.Internals.Contracts.Module.EventManager.ModuleInputEventArgs,TPG.DrawObjects.Contracts.Data.IDrawObjectData,TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectToolState,TPG.DrawObjects.Internals.Contracts.Module.ICompositeCommand)">
            <summary>
             Handles input events for tool
            </summary>
            <param name="moduleInputEventArgs">Event parameters for this event.</param>
            <param name="drawObjectData">Geo data for this DrawObject</param>
            <param name="drawObjectToolState">Tool state for this view and DrawObject</param>
            <param name="command">An undoable command list to be filled in by this tool.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectTool.HitTest(TPG.DrawObjects.Internals.Contracts.Module.EventManager.ModuleInputEventArgs,System.Windows.Point,TPG.DrawObjects.Contracts.Data.IDrawObjectData,TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectViewState)">
            <summary>
            Check for mouse hit
            </summary>
            <param name="moduleInputEventArgs"></param>
            <param name="mousePosition"></param>
            <param name="drawObjectData"></param>
            <param name="viewState"></param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectTool.MouseOverTest(TPG.DrawObjects.Internals.Contracts.Module.EventManager.ModuleInputEventArgs,System.Windows.Point,TPG.DrawObjects.Contracts.Data.IDrawObjectData,TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectViewState)">
            <summary>
            Check for mouse hit
            </summary>
            <param name="moduleInputEventArgs"></param>
            <param name="mousePosition"></param>
            <param name="drawObjectData"></param>
            <param name="viewState"></param>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectTool.ToolTypeId">
            <summary>
            Unique name identifier for this tool type.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectTool.InstanceId">
            <summary>
             Draw object tool instance id
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectTool.Parameters">
            <summary>
            A dictionary of name/value pairs to be interpreted as parameters for each tool.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectTool.Decoration">
            <summary>
            The decoration object for this tool.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectTool.IsWholeObjectTool">
            <summary>
            If the tool operates in Whole Object mode it returns true, false if it operates in edit mode.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectGenericTagModifierTool.FieldToModify">
            <summary>
            The tag to work on.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.ToolHandling.IWholeObjectTransformData">
            <summary>
            Defines data that is needed to complete transformations done by whole object tools.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.ToolHandling.IWholeObjectTransformData.TransformVector">
            <summary>
            Returns the vector to transform by
            </summary>
            <returns>The vector that describes the transform.</returns>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.ToolHandling.IWholeObjectTransformData.Rotation">
            <summary>
            Returns the degrees of rotation to perform.
            </summary>
            <returns>The rotation in degrees.</returns>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.ToolHandling.IWholeObjectTransformData.ScaleX">
            <summary>
            Returns the scale factor in the x-direction
            </summary>
            <returns>The scale factor in x-direction.</returns>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.ToolHandling.IWholeObjectTransformData.ScaleY">
            <summary>
            Returns the scale factor in the y-direction
            </summary>
            <returns>The scale factor in y-direction.</returns>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.ToolHandling.Tools.IDrawObjectTransform">
            <summary>
            This is the main interface for draw object transforms.
            </summary>
            All draw object transforms expect their input in View coordinates, so a View must be given for the transform class.
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ToolHandling.Tools.IDrawObjectTransform.Rotate(TPG.DrawObjects.Contracts.Data.IDrawObjectData,TPG.GeoUnits.GeoPos,System.Double,TPG.GeoFramework.Contracts.IViewport)">
            <summary>
            Rotate a primitive about a point.
            </summary>
            This method takes a point in View coordinates and an angle, and rotates the primitive counterclockwise about the reference
            point.
            <param name="drawObjectData">Data object to transform</param>
            <param name="reference">Point in view coordinates.</param>
            <param name="angle">Angle in degrees. Positive direction is counterclockwise.</param>
            <param name="viewport">The viewport in which to perform the transform.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ToolHandling.Tools.IDrawObjectTransform.Scale(TPG.DrawObjects.Contracts.Data.IDrawObjectData,System.Double,System.Double,System.Windows.Point,System.Double,TPG.GeoFramework.Contracts.IViewport)">
            <summary>
            Scale a primitive about a point, along a direction.
            </summary>
            This method will scale a primitive about a reference point in x- and y-direction. The x- and y-directions
            are determined by the rotation angle.
            <param name="drawObjectData">Data object to transform</param>
            <param name="sx">Scale factor in x-direction (1.0 indicates no scaling).</param>
            <param name="sy">Scale factor in y-direction (1.0 indicates no scaling).</param>
            <param name="centerPoint">Reference point in view coordinates.</param>
            <param name="angle">Angle of the rotated coordinate system.</param>
            <param name="viewport">The viewport in which to perform the transform.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ToolHandling.Tools.IDrawObjectTransform.Move(TPG.DrawObjects.Contracts.Data.IDrawObjectData,System.Windows.Vector,TPG.GeoFramework.Contracts.IViewport)">
            <summary>
            Move a point in view coordinates.
            </summary>
            This method will move a primitive along a vector in view coordinates.
            <param name="drawObjectData">Data object to transform</param>
            <param name="v">Vector in view coordinates to move along.</param>
            <param name="viewport">The viewport in which to perform the transform.</param>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Views.FillStyle">
            <summary>
            Fil styles that can be used.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Views.IRenderer">
            <summary>
            Interface for graphics renderer.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.IRenderer.DrawLine(System.Windows.Point,System.Windows.Point,System.Windows.Media.Color,System.Double,System.Windows.Media.DashStyle)">
            <summary>
            Draw a line
            </summary>
            <param name="startPoint">Start point on line.</param>
            <param name="endPoint">End point on line.</param>
            <param name="lineColor">Color of line.</param>
            <param name="lineThickness">Thickness of line.</param>
            <param name="lineStyle">Line style.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.IRenderer.DrawLines(System.Windows.Point[],System.Windows.Media.Color,System.Double,System.Windows.Media.DashStyle)">
            <summary>
             Draw a polyline.
            </summary>
             This method draws a polyline connecting the points given by the input point array.
            <param name="points">Input points, must be at least two.</param>
            <param name="color">Line color.</param>
            <param name="thickness">Line thickness.</param>
            <param name="dashStyle">Line style.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.IRenderer.DrawCurve(System.Windows.Point[],System.Windows.Media.Color,System.Double,System.Windows.Media.DashStyle)">
            <summary>
            Draws a spline curve through the given points.
            </summary>
            <param name="points">The points to draw the curve through.</param>
            <param name="color">Color to draw the curve in.</param>
            <param name="thickness">Line thickness to draw the curve in.</param>
            <param name="dashStyle">Dash style to draw the curve in.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.IRenderer.Clear(System.Windows.Media.Color)">
            <summary>
            Clear the rendering surface to the given color.
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.IRenderer.DrawString(System.String,System.Windows.Point,System.String,System.Single,System.Windows.Media.Color,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
             Draw a text string
            </summary>
            <param name="text">The string to render</param>
            <param name="pos">Position of the text.</param>
            <param name="fontName">Font name</param>
            <param name="fontSize">Font size</param>
            <param name="color">Text color</param>
            <param name="bold">Bold face.</param>
            <param name="italic">Italic face. </param>
            <param name="underline">Underline face.</param>
            <param name="strikethrough">Strikethrough face.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.IRenderer.MeasureString(System.String,System.Single,System.String)">
            <summary>
             returns the size in pixels of a given text font size and name
            </summary>
            <param name="text"></param>
            <param name="fontSize"></param>
            <param name="fontName"></param>
            <returns></returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.IRenderer.PushTransform">
            <summary>
            Push the current transformation on the transform stack.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.IRenderer.PopTransform">
            <summary>
            Restore the last pushed transformation from the transform stack.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.IRenderer.TranslateTransform(System.Windows.Vector)">
            <summary>
             Append a translation to the current transformation matrix.
            </summary>
            <param name="v">Translation vector</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.IRenderer.RotateTransform(System.Double)">
            <summary>
             Append a rotation transform to the current transformation matrix.
            </summary>
            <param name="angle">Rotation angle in degrees.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.IRenderer.RotateTransform(System.Double,System.Windows.Point)">
            <summary>
            Append a rotation transform to the current transformation matrix.
            </summary>
            <param name="angle">Rotation angle in degrees.</param>
            <param name="rotationCenter">Rotation center point.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.IRenderer.PushOpacity(System.Double)">
            <summary>
            Pushes a opacity transform.
            </summary>
            <param name="opacity">Opacity factor in the range 0-1</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.IRenderer.PopOpacity">
            <summary>
            Restore the last pushed opacity from the transform stack.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.IRenderer.ScaleTransform(System.Double,System.Double)">
            <summary>
            Append a scale transform to the current transformation matrix.
            </summary>
            <param name="scalex">X scale factor</param>
            <param name="scaley">Y scale factor</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.IRenderer.ResetTransform">
            <summary>
            Set the current transform to the identity matrix.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.IRenderer.FillRectangle(System.Windows.Point,System.Double,System.Double,System.Windows.Media.Color)">
            <summary>
             Draw a filled rectangle
            </summary>
            <param name="topLeft">Position of upper left corner.</param>
            <param name="width">Width of rectangle.</param>
            <param name="height">Height of rectangle.</param>
            <param name="color">Fill color.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.IRenderer.DrawRectangle(System.Windows.Point,System.Double,System.Double,System.Windows.Media.Color,System.Double,System.Windows.Media.DashStyle)">
            <summary>
             Draw an outline rectangle
            </summary>
            <param name="topLeft">Position of upper left corner.</param>
            <param name="width">Width of rectangle.</param>
            <param name="height">Height of rectangle.</param>
            <param name="color">Line color.</param>
            <param name="lineThickness">Line thickness.</param>
            <param name="lineStyle">Line style, default solid.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.IRenderer.FillEllipse(System.Windows.Point,System.Double,System.Double,System.Windows.Media.Color)">
            <summary>
             Draw a filled ellipse
            </summary>
            <param name="center">Center point</param>
            <param name="radiusX">Horizontal radius</param>
            <param name="radiusY">Vertical radius</param>
            <param name="color">Fill color</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.IRenderer.DrawEllipse(System.Windows.Point,System.Double,System.Double,System.Windows.Media.Color,System.Double,System.Windows.Media.DashStyle)">
            <summary>
             Draw an outline ellipse
            </summary>
            <param name="center">Center point</param>
            <param name="radiusX">Horizontal radius</param>
            <param name="radiusY">Vertical radius</param>
            <param name="color">Line color</param>
            <param name="lineThickness">Line thickness</param>
            <param name="lineStyle">Line style, default solid.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.IRenderer.DrawEllipseArc(System.Windows.Point,System.Double,System.Double,System.Double,System.Double,System.Windows.Media.Color,System.Double,System.Windows.Media.DashStyle)">
            <summary>
             Draw an arc as a partial ellipse.
            </summary>
             This method draws an arc as a sub-segment of an ellipse. The ellipse is defined by a center point and two radii, and the arc is defined by a start angle
             and a sector angle.
            <param name="center">The center of the defining ellipse.</param>
            <param name="radiusX">Horizontal radius of the ellipse.</param>
            <param name="radiusY">Vertical radius of the ellipse.</param>
            <param name="startAngle">Start angle for the segment, measured clockwise from the x-axis.</param>
            <param name="sectorAngle">Angle in degrees covered by the arc, measured clockwise from the startAngle parameter.</param>
            <param name="color">Line color</param>
            <param name="lineThickness">Line thickness.</param>
            <param name="lineStyle">Line style.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.IRenderer.DrawPolygon(System.Windows.Point[],System.Windows.Media.Color,System.Double,System.Windows.Media.DashStyle)">
            <summary>
             Draw an outline polygon.
            </summary>
            <param name="points">Polygon vertex points</param>
            <param name="color">Line color</param>
            <param name="lineThickness">Line thickness</param>
            <param name="lineStyle">Line style</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.IRenderer.FillPolygon(System.Windows.Point[],System.Windows.Media.Color,TPG.DrawObjects.Internals.Contracts.Views.FillStyle,System.Nullable{System.Windows.Media.Color})">
            <summary>
            Draw a filled polygon
            </summary>
            <param name="points">Polygon vertex points</param>
            <param name="color">Fill color</param>
            <param name="fillStyle">Fill style to use.</param>
            <param name="backgroundColor">Background color when fill style needs two colors.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.IRenderer.FillPath(System.Windows.Media.PathGeometry,System.Windows.Media.Color,TPG.DrawObjects.Internals.Contracts.Views.FillStyle,System.Nullable{System.Windows.Media.Color})">
            <summary>
            Draws a filled primitive described by the pathGeometry paramter.
            </summary>
            <param name="pathGeometry">Represents the path to be filled.</param>
            <param name="color">Color to use for filling.</param>
            <param name="fillStyle">Fill style to use.</param>
            <param name="backgroundColor">Background color when fill style needs two colors.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.IRenderer.DrawPath(System.Windows.Media.PathGeometry,System.Windows.Media.Color,System.Double,System.Windows.Media.DashStyle)">
            <summary>
            Draws the path specified by pathGeometry parameter.
            </summary>
            <param name="pathGeometry">Data class that holds the path to be drawn.</param>
            <param name="color">Color to use while drawing.</param>
            <param name="lineThickness">Thickness of the line to use while drawing.</param>
            <param name="dashStyle">The dash style to use while drawing the lines.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.IRenderer.DrawImage(System.Windows.Media.Imaging.BitmapSource,System.Windows.Point)">
            <summary>
            draws an image given an byte array at a given point (upper left corner of image)
            </summary>
            <param name="data">Byte array that represents a bitmap</param>
            <param name="p">The upper left point to draw the image.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.IRenderer.DrawImage(System.Windows.Media.Imaging.BitmapSource,System.Windows.Point,System.Int32,System.Int32)">
            <summary>
            draws an image given an byte array at a given point (upper left corner of image) and width and height of the image.
            </summary>
            <param name="data">Byte array that represents a bitmap</param>
            <param name="point">The upper left point to draw the image.</param>
            <param name="w">Width to use when drawing the image.</param>
            <param name="h">Height to use when drawing the image.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.IRenderer.DrawFormattedText(TPG.DrawObjects.Internals.Contracts.Rendering.IFormattedText,System.Windows.Point)">
            <summary>
            Draw a formated text string.
            </summary>
            <param name="ft">The formated text to render.</param>
            <param name="pos">Position of the formated text.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.IRenderer.CreateFormattedText(System.String,System.String,System.Single,System.Windows.Media.Color,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create a formated text.
            </summary>
            <param name="text">Text string.</param>
            <param name="fontName">Font name.</param>
            <param name="fontSize">Font size.</param>
            <param name="color">Text color.</param>
            <param name="bold">Bold face.</param>
            <param name="italic">Italic face.</param>
            <param name="underline">Underline face.</param>
            <param name="strikethrough">Strikethrough face.</param>
            <returns>Formated text.</returns>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Rendering.PartRendererParameterIds">
            <summary>
            Class holding TagNames that can be defined in the Parameter block of a PrimitivePartRenderer.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Rendering.Serializers.IPrimitivePartRendererXmlSerializer">
            <summary>
            XML Serializer interface for PartRenderers
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Rendering.Serializers.IPrimitivePartRendererXmlSerializer.SerializeToString(TPG.DrawObjects.Internals.Contracts.Rendering.IPrimitivePartRenderer)">
            <summary>
             Serialize a PartRenderer object to a string.
            </summary>
            <param name="partRenderer">The PartRenderer object to serialize.</param>
            <returns>A text string containing the xml serialization of the PartRenderer.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Rendering.Serializers.IPrimitivePartRendererXmlSerializer.SerializeToXElement(TPG.DrawObjects.Internals.Contracts.Rendering.IPrimitivePartRenderer)">
            <summary>
            Serialize a PartRenderer object to an XElement.
            </summary>
            <param name="partRenderer">The PartRenderer object to serialize.</param>
            <returns>An XElement containing the XML serialization of the PartRenderer.</returns>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectPrimitiveTool">
            <summary>
             A single manipulation tool for a draw object primitive. 
             This class can represent for example a move operation or a resize operation on a DrawObject primitive.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectPrimitiveTool.LocalPrimitiveId">
            <summary>
            References the DrawObject primitive this tool operates on.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectToolDecoration">
            <summary>
            Interface to tool decorations for a DrawObject tool.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectToolDecoration.Draw(TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectTool,TPG.DrawObjects.Internals.Contracts.Views.IViewRender,TPG.GeoFramework.Contracts.IViewport,TPG.DrawObjects.Contracts.Data.IDrawObjectData,TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectViewState)">
            <summary>
            Draw tool decoration.
            </summary>
            <param name="tool">The tool we want to decorate.</param>
            <param name="viewRender">View in which to draw the decoration.</param>
            <param name="viewport"></param>
            <param name="drawObjectData">Data for the draw object.</param>
            <param name="viewState">state object (Drawing and Tool state) for the draw object.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectToolDecoration.HitTest(System.Windows.Point,TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectTool,TPG.DrawObjects.Internals.Contracts.Views.IViewRender,TPG.GeoFramework.Contracts.IViewport,TPG.DrawObjects.Contracts.Data.IDrawObjectData,TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectViewState)">
            <summary>
             Checks if position of event is on a tool decoration
            </summary>
            <param name="viewPoint"></param>
            <param name="tool"></param>
            <param name="viewRender"></param>
            <param name="viewport"></param>
            <param name="drawObjectData"></param>
            <param name="viewState"></param>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectToolDecoration.DecorationTypeId">
            <summary>
            Unique name identifier for this tool decoration type.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectToolDecorationFactory">
            <summary>
            Interface for a decoration object provider. 
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectToolDecorationFactory.AddDecorationType(System.String,System.Func{TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectToolDecoration})">
            <summary>
             Adds a new decoration type to factory
            </summary>
            <param name="decorationTypeId">Decoration type id.</param>
            <param name="decoratorCreator">Creation func.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectToolDecorationFactory.CreateDecoration(System.String)">
            <summary>
             Creates a decoration specified by decoration type id.
            </summary>
            <param name="decorationTypeId">Decoration type id.</param>
            <returns>Draw object tool decoration.</returns>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectToolFactory">
            <summary>
             Factory responsible for creation DrawObjectTools
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectToolFactory.AddToolType(System.String,System.Func{TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectTool})">
            <summary>
             Adds a new decoration type to factory
            </summary>
            <param name="toolTypeId">Tool type id.</param>
            <param name="toolCreator">Creation func.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectToolFactory.CreateDrawObjectTool(System.String)">
            <summary>
             Creates a new tool based on tool type id.
            </summary>
            <param name="toolTypeId">Tool type id.</param>
            <returns>Returns reference to implementation of requested tool.</returns>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.ToolHandling.IWholeObjectTool">
            <summary>
            Implemented by draw object tools that work on whole objects.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ToolHandling.IWholeObjectTool.InitiateWholeObjectManipulation(TPG.DrawObjects.Internals.Contracts.Module.EventManager.ModuleInputEventArgs,TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectToolState,TPG.DrawObjects.Contracts.Data.IDrawObjectData)">
            <summary>
            Prepares the tool for receiving manipulation external from its own event loop.
            </summary>
            <param name="moduleInputEventArgs">The event arguments.</param>
            <param name="drawObjectToolState">Tool state of the tool.</param>
            <param name="drawObjectData">The data associated with the draw object to work on.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ToolHandling.IWholeObjectTool.HandleExternalEvent(TPG.DrawObjects.Internals.Contracts.Module.EventManager.ModuleInputEventArgs,TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectToolState,TPG.DrawObjects.Contracts.Data.IDrawObjectData,TPG.DrawObjects.Internals.Contracts.Module.ICompositeCommand,TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectToolState,System.String)">
            <summary>
            Handles an actual event that originates from outside the tools own event loop.
            </summary>
            <param name="moduleInputEventArgs">The event arguments.</param>
            <param name="drawObjectToolState">The state of the tool.</param>
            <param name="drawObjectData">The data associated with the draw object to work on.</param>
            <param name="compositeCommand">Used to store undo/redo or any other type of command.</param>
            <param name="controllingToolToolState">Tool state of the tool that is doing the external controlling.</param>
            <param name="controllingToolInstanceId">Instance id of the tool that is doing the external controlling.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ToolHandling.IWholeObjectTool.EndWholeObjectManipulation(TPG.DrawObjects.Contracts.Data.IDrawObjectData,TPG.DrawObjects.Internals.Contracts.Module.ICompositeCommand,TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectToolState)">
            <summary>
            Cleans up the tool after receiving manipulation external from its own event loop.
            </summary>
            <param name="drawObjectData">The data associated with the draw object to work on.</param>
            <param name="compositeCommand">Used to store undo/redo or any other type of command.</param>
            <param name="toolState">Tool state of the draw object that is ends its whole object manipulation.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ToolHandling.IWholeObjectTool.GetDrawObjectRenderer(TPG.DrawObjects.Contracts.Data.IDrawObjectData,TPG.DrawObjects.Internals.Contracts.Views.IViewRender)">
            <summary>
            Gets the renderer that is used to render the given drawObjectData
            </summary>
            <param name="drawObjectData">DrawObjectData to find renderer for.</param>
            <param name="viewRender">The view render to get renderer for.</param>
            <returns>The renderer for the given draw object data.</returns>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.ToolHandling.Serializers.IToolBaseXmlParser">
            <summary>
            Interface for parsing common base properties for DrawObject Tools.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ToolHandling.Serializers.IToolBaseXmlParser.Parse(System.Xml.Linq.XElement,TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectTool)">
            <summary>
            Parse the given XML code and populate the tool with common base data such as LocalPrimitiveID.
            </summary>
            <param name="xElement">Input XML Code</param>
            <param name="tool">Tool to populate</param>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.ToolHandling.Serializers.IToolXmlParser">
            <summary>
            Interface for Tool XML parsers.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ToolHandling.Serializers.IToolXmlParser.Parse(System.Xml.Linq.XElement)">
            <summary>
            Parse a Tool from an XML Element.
            </summary>
            <param name="xElement">XML Element containing the Tool serialization.</param>
            <returns>Tool object</returns>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.ToolHandling.Serializers.IToolXmlParserProvider">
            <summary>
            XML Parser provider for Tools.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ToolHandling.Serializers.IToolXmlParserProvider.AddParser(System.String,TPG.DrawObjects.Internals.Contracts.ToolHandling.Serializers.IToolXmlParser)">
            <summary>
             Add a new Tool parser to the provider.
            </summary>
            <param name="toolTypeId">Type identifier for the Tool parser.</param>
            <param name="toolXmlParser">Tool XML parser object.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ToolHandling.Serializers.IToolXmlParserProvider.GetParser(System.String)">
            <summary>
            Get a Tool parser for the given type id.
            </summary>
            <param name="toolTypeId">Type identifier for the requested parser.</param>
            <returns>Tool XML Parser object.</returns>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.ToolHandling.Serializers.IToolXmlParserProvider.ParserCount">
            <summary>
            Get number of registered parsers.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.ToolHandling.Serializers.IToolXmlSerializer">
            <summary>
            XML Serializer interface for Tools
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ToolHandling.Serializers.IToolXmlSerializer.SerializeToString(TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectTool)">
            <summary>
             Serialize a Tool object to a string.
            </summary>
            <param name="tool">The Tool object to serialize.</param>
            <returns>A text string containing the xml serialization of the Tool.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ToolHandling.Serializers.IToolXmlSerializer.SerializeToXElement(TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectTool)">
            <summary>
            Serialize a Tool object to an XElement.
            </summary>
            <param name="tool">The Tool object to serialize.</param>
            <returns>An XElement containing the XML serialization of the Tool.</returns>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.ToolHandling.Serializers.IToolBaseXmlSerializer">
            <summary>
            XML Serializer for common base properties.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ToolHandling.Serializers.IToolBaseXmlSerializer.CreateBaseElement(TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectTool)">
            <summary>
            Serialize the base primitive data, such as LocalPrimitiveId.
            </summary>
            <param name="tool">The tool data to be serialized</param>
            <returns>XML Element with serialized data.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ToolHandling.Serializers.IToolBaseXmlSerializer.CreateBaseElement(TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectTool,System.Object[])">
            <summary>
            Serialize the base primitive data, such as LocalPrimitiveId.
            </summary>
            <param name="tool">The tool data to be serialized</param>
            <param name="content">Child elements/attributes for the XElement</param>
            <returns>XML Element with serialized data.</returns>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.ToolHandling.Serializers.IToolXmlSerializerProvider">
            <summary>
            XML Serializer provider for Tools.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ToolHandling.Serializers.IToolXmlSerializerProvider.AddSerializer(System.String,TPG.DrawObjects.Internals.Contracts.ToolHandling.Serializers.IToolXmlSerializer)">
            <summary>
             Add a new Tool serializer to the provider.
            </summary>
            <param name="toolTypeId">Type identifier for the Tool serializer.</param>
            <param name="toolXmlSerializer">PartRenderer XML serializer object.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ToolHandling.Serializers.IToolXmlSerializerProvider.GetSerializer(System.String)">
            <summary>
            Get a Tool serializer for the given type id.
            </summary>
            <param name="toolTypeId">Type identifier for the requested serializer.</param>
            <returns>Tool XML Serializer object.</returns>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.ToolHandling.Serializers.IToolXmlSerializerProvider.SerializerCount">
            <summary>
            Get number of registered serializers.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.ToolHandling.ToolDecorationTypeIds">
            <summary>
            Type identifiers for DrawObjectToolDecoration
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.ToolHandling.ToolTypeIds">
            <summary>
            Type identifiers for DrawObjectTool
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Views.IGdiRenderSurface.Graphics">
            <summary>
            GDI+ drawing surface.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Views.IGdiRenderSurface.Bitmap">
            <summary>
            Bitmap used for rendering.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Views.IGdiRenderSurface.HitTestGraphics">
            <summary>
            GDI+ drawing surface for Hit Test drawing operations.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Views.IGdiRenderSurface.HitTestBitmap">
            <summary>
            Bitmap used for hit testing. 
            This bitmap has the same size as the graphics bitmap and can be used by Renderers and ToolDecorations to
            test intersection between a mouse point and the drawn graphics.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Views.Transforms.IPrimitiveTransform">
            <summary>
            This is the main interface for Primitive transforms.
            </summary>
            All primitive transforms expect their input in View coordinates, so a View must be given for the transform class.
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.Transforms.IPrimitiveTransform.Rotate(TPG.DrawObjects.Contracts.Data.Geo.IDrawObjectPrimitive,TPG.GeoUnits.GeoPos,System.Double,TPG.GeoFramework.Contracts.IViewport)">
            <summary>
            Rotate a primitive about a point.
            </summary>
            This method takes a point in geographical coordinates and an angle, and rotates the primitive clockwise about the center
            point.
            <param name="primitive">The primitive to rotate</param>
            <param name="center">Point in geographical coordinates.</param>
            <param name="angle">Angle in degrees. Positive direction is clockwise.</param>
            <param name="viewport">The viewport in which to do the transform</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.Transforms.IPrimitiveTransform.RotateAbsolute(TPG.DrawObjects.Contracts.Data.Geo.IDrawObjectPrimitive,TPG.GeoUnits.GeoPos,System.Double,TPG.GeoFramework.Contracts.IViewport)">
            <summary>
            Rotate a primitive about a point.
            </summary>
            This method works as the Rotate method, but it only works for primitives with Absolute points, not relative. Usually, relative
            points will follow a coordinate system which is rotated separately.
            <param name="primitive">The primitive to rotate</param>
            <param name="center">Point in geographical coordinates.</param>
            <param name="angle">Angle in degrees. Positive direction is clockwise.</param>
            <param name="viewport">The viewport in which to do the transform</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.Transforms.IPrimitiveTransform.Scale(TPG.DrawObjects.Contracts.Data.Geo.IDrawObjectPrimitive,System.Double,System.Double,System.Windows.Point,System.Double,TPG.GeoFramework.Contracts.IViewport)">
            <summary>
            Scale a primitive about a point, along a direction.
            </summary>
            This method will scale a primitive about a center point in x- and y-direction. The x- and y-directions
            are determined by the rotation angle.
            <param name="primitive">The primitive to scale</param>
            <param name="sx">Scale factor in x-direction (1.0 indicates no scaling).</param>
            <param name="sy">Scale factor in y-direction (1.0 indicates no scaling).</param>
            <param name="centerPoint">Reference point in view coordinates.</param>
            <param name="angle">Angle of the rotated coordinate system.</param>
            <param name="viewport">The viewport in which to do the transform</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.Transforms.IPrimitiveTransform.Move(TPG.DrawObjects.Contracts.Data.Geo.IDrawObjectPrimitive,System.Windows.Vector,TPG.GeoFramework.Contracts.IViewport)">
            <summary>
            Move a primitive in view coordinates.
            </summary>
            This method will move a primitive along a vector in view coordinates.
            <param name="primitive">The primitive to move</param>
            <param name="v">A vector describing the movement in view coordinates.</param>
            <param name="viewport">The viewport in which to do the transform</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.Transforms.IPrimitiveTransform.MoveAbsolute(TPG.DrawObjects.Contracts.Data.Geo.IDrawObjectPrimitive,System.Windows.Vector,TPG.GeoFramework.Contracts.IViewport)">
            <summary>
            Move a primitive with absolute coordinates in view coordinates.
            </summary>
            This method works as the Move method, but it only works for primitives with Absolute points, not relative. Usually, relative
            points will follow a coordinate system which is moved separately.
            <param name="primitive">The primitive to move</param>
            <param name="v">A vector describing the movement in view coordinates.</param>
            <param name="viewport">The viewport in which to do the transform</param>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Views.Transforms.IPrimitiveTransform.PrimitiveTransformFactory">
            <summary>
            Factory for making sub-primitive transforms.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Views.Transforms.IPrimitiveTransformFactory">
            <summary>
            Interface for the PrimitiveTransform factory.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.Transforms.IPrimitiveTransformFactory.CreateTransform(System.String)">
            <summary>
            Create a primitive transform instance for the given primitive type ID.
            </summary>
            <param name="primitiveTypeId">Primitive type ID. Must be one of the types defined in DrawObjectPrimitiveTypeIds</param>
            <returns>A new primitive transform object of the correct type.</returns>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Views.ViewTypeIds">
            <summary>
             List of pre-defined view type ids
            </summary>
        </member>
        <member name="F:TPG.DrawObjects.Internals.Contracts.Views.ViewTypeIds.GdiViewId">
            <summary>
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Rendering.IPrimitivePartRenderer">
            <summary>
            Interface for a single primitive part renderer object.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Rendering.IPrimitivePartRenderer.PreRender(TPG.DrawObjects.Internals.Contracts.Views.IViewRender,TPG.GeoFramework.Contracts.IViewport,TPG.DrawObjects.Contracts.Data.IDrawObjectData,TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectRenderState)">
            <summary>
            Do the pre-rendering on this PartRenderer and its sub-renderers.
            </summary>
            <param name="viewRender">The view in which to pre-render the DrawObject.</param>
            <param name="viewport"></param>
            <param name="drawObjectData">Data for the entire DrawObject.</param>
            <param name="drawObjectRenderState">Render state for the DrawObject.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Rendering.IPrimitivePartRenderer.Render(TPG.DrawObjects.Internals.Contracts.Views.IViewRender,TPG.GeoFramework.Contracts.IViewport,TPG.DrawObjects.Contracts.Data.IDrawObjectData,TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectRenderState)">
            <summary>
            Do the actual rendering on this PartRenderer and its sub-renderers.
            </summary>
            <param name="viewRender">The view in which to render the DrawObject.</param>
            <param name="viewport"></param>
            <param name="drawObjectData">Data for the entire DrawObject.</param>
            <param name="drawObjectRenderState">Render state for the DrawObject.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Rendering.IPrimitivePartRenderer.HitTest(System.Windows.Point,TPG.DrawObjects.Internals.Contracts.Views.IViewRender,TPG.GeoFramework.Contracts.IViewport,TPG.DrawObjects.Contracts.Data.IDrawObjectData,TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectViewState)">
            <summary>
             Checks if the view X,Y position intersects the graphics.
            </summary>
            <param name="pointInView">Position in view coordinates.</param>
            <param name="viewRender">The current view.</param>
            <param name="viewport"></param>
            <param name="drawObjectData">Data for the DrawObject.</param>
            <param name="viewState">Render state and tool state for the DrawObject</param>
            <returns>True if hit, false if not.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Rendering.IPrimitivePartRenderer.CalcRotatedBounds(TPG.DrawObjects.Internals.Contracts.Views.IViewRender,TPG.GeoFramework.Contracts.IViewport,TPG.DrawObjects.Contracts.Data.IDrawObjectData,System.Windows.Vector,System.Windows.Vector,System.Windows.Point@,System.Windows.Point@,TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectRenderState,System.Boolean)">
            <summary>
            Calculate an oriented bounding rectangle for this primitive.
            </summary>
            This method will calculate the smallest bounding rectangle around the primitive. The min/max calculations are done in the
            coordinate system defined by the two vectors vx and vy which must be orthonormal.
            <param name="viewRender">The current view.</param>
            <param name="viewport"></param>
            <param name="drawObjectData">Data for the DrawObject.</param>
            <param name="vx">X axis of coordinate system.</param>
            <param name="vy">Y axis of coordinate system.</param>
            <param name="min">Output minimum coordinates.</param>
            <param name="max">Output maximum coordinates.</param>
            <param name="drawObjectRenderState"></param>
            <param name="includeDecorations">Include extra decorations that go beyond the primitive data.</param>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Rendering.IPrimitivePartRenderer.PartRendererTypeId">
            <summary>
            A unique name identifier for this part renderer type.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Rendering.IPrimitivePartRenderer.SubRenderers">
            <summary>
            A list of Sub-renderers for this renderer object (can be empty).
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Rendering.IPrimitivePartRenderer.Parameters">
            <summary>
            A dictionary of name/value pairs to be interpreted as parameters for each renderer.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Rendering.IPrimitivePartRenderer.LocalPrimitiveId">
            <summary>
            ID of the primitive this renderer will work on.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Views.IViewRender">
            <summary>
            A rendering view for visualizing Draw Objects.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.IViewRender.Initialize(TPG.GeoFramework.Contracts.IViewport,System.Windows.UIElement)">
            <summary>
            Initialize the view with the given viewport.
            </summary>
            <param name="viewport"></param>
            <param name="renderTarget"> </param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.IViewRender.Render(TPG.GeoFramework.Contracts.IViewport,TPG.GeoFramework.Contracts.Geo.Context.IGeoContext,TPG.DrawObjects.Contracts.Data.IDrawObjectData)">
            <summary>
            Renders a single draw object in the view.
            </summary>
            <param name="viewport">Viewport to draw in</param>
            <param name="geoContext"></param>
            <param name="drawObject">The DrawObject to be rendered.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.IViewRender.Render(TPG.GeoFramework.Contracts.IViewport,TPG.GeoFramework.Contracts.Geo.Context.IGeoContext,System.Collections.Generic.IList{TPG.DrawObjects.Contracts.Data.IDrawObjectData})">
            <summary>
            Renders a list of draw objects in the view.
            </summary>
            <param name="viewport">Viewport to draw in</param>
            <param name="geoContext"></param>
            <param name="drawObjects">List of draw objects to draw</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.IViewRender.RenderOverlay(TPG.GeoFramework.Contracts.IViewport,TPG.GeoFramework.Contracts.Geo.Context.IGeoContext,System.Collections.Generic.IList{TPG.DrawObjects.Contracts.Data.IDrawObjectData})">
            <summary>
            Renders a list of draw objects in the view. 
            These objects are drawn on top of the ones drawn by the regular Render() call.
            </summary>
            <param name="viewport">Viewport to draw in</param>
            <param name="geoContext"></param>
            <param name="drawObjects"></param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.IViewRender.UpdateMousePosition(System.Windows.Point)">
            <summary>
             Updates current mouse position in view
            </summary>
            <returns></returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.IViewRender.HitTest(System.Windows.Point)">
            <summary>
            Check if we have data in the HitTest buffer for a radius about the given view X,Y coordinate. 
            </summary>
            Any pixel that is not black is considered a hit.
            <param name="pointInView">Point in view coordinates</param>
            <returns>True if the position is a hit, false if not.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.IViewRender.ClearHitTest(TPG.GeoFramework.Contracts.IViewport)">
            <summary>
            Clear the hit test buffer
            </summary>
            <returns></returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.IViewRender.Clear">
            <summary>
            Clear render buffer
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.IViewRender.IsReadOnly(TPG.DrawObjects.Contracts.Data.IDrawObjectData)">
            <summary>
            Returns whether draw object is read-only in this view
            </summary>
            <param name="drawObjectData">Draw object data</param>
            <returns>True if draw object is read-only, otherwise false.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.IViewRender.IsReadOnly(System.String)">
            <summary>
            Returns whether draw object is read-only in this view
            </summary>
            <param name="drawObjectInstanceId">Draw object instance id</param>
            <returns>True if draw object is read-only, otherwise false.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Views.IViewRender.ClearVisualState">
            <summary>
            Clears all visual state of the renderer.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Views.IViewRender.RefreshStyle">
            <summary>
            Get or set if style needs to be resolved.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Views.IViewRender.ViewTypeId">
            <summary>
            Unique ID for this View type.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Views.IViewRender.FontScale">
            <summary>
            Overall font scale for this view.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Views.IViewRender.SymbolScale">
            <summary>
            Overall raster symbol scale for this view.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Views.IViewRender.MousePosition">
            <summary>
             Returns current mouse position in view
            </summary>
            <returns></returns>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Views.IViewRender.Renderer">
            <summary>
            Renderer for normal drawing operations.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Views.IViewRender.HitTestRenderer">
            <summary>
            Renderer for hit-test drawing operations.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Views.IViewRender.ReadOnlyFilter">
            <summary>
            Specifies which draw objects should be read-only
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Views.IViewRender.GeoUnitsSetting">
            <summary>
            Get or set geo units setting.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Views.IViewRender.HitTestRadius">
            <summary>
            Radius for hit test comparisons. Everything within this radius around the test point counts as a hit.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Views.IViewRender.DeclutterGrid">
            <summary>
            Get declutter grid.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Rendering.Serializers.IDrawObjectRendererXmlParser">
            <summary>
            Interface for all DrawObjectRenderer parsers.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Rendering.Serializers.IDrawObjectRendererXmlParser.Parse(System.Xml.Linq.XElement)">
            <summary>
            Parse DrawObjectRenderer from a given XML element.
            </summary>
            <param name="xElement">Input XML representation</param>
            <returns>DrawObjectRenderer constructed from the given XML code.</returns>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Rendering.Serializers.IDrawObjectRendererXmlSerializer">
            <summary>
            Interface for the top-level DrawObject renderer XML serializer.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Rendering.Serializers.IDrawObjectRendererXmlSerializer.SerializeToString(TPG.DrawObjects.Internals.Contracts.Rendering.IDrawObjectRenderer)">
            <summary>
            Serialize the DrawObject renderer to a string.
            </summary>
            <param name="drawObjectRenderer">The renderer object to be serialized.</param>
            <returns>A string containing XML code for the serialization of the object.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Rendering.Serializers.IDrawObjectRendererXmlSerializer.SerializeToXElement(TPG.DrawObjects.Internals.Contracts.Rendering.IDrawObjectRenderer)">
            <summary>
            Serialize the DrawObject renderer to an XElement.
            </summary>
            <param name="objectToSerialize">The renderer object to be serialized.</param>
            <returns>An XElement containing the XML serialization of the object.</returns>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.DrawObjectType.Serializers.IDrawObjectTypeXmlParser">
            <summary>
            Interface for DrawObjectType XML parsers.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.DrawObjectType.Serializers.IDrawObjectTypeXmlParser.Parse(System.Xml.Linq.XElement)">
            <summary>
            Parses a draw object type defintion from XML
            </summary>
            <param name="drawObjectTypeDefinitionElement"></param>
            <returns></returns>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.DrawObjectType.Serializers.IDrawObjectTypeXmlSerializer">
            <summary>
             Interface for DrawObjectType XML serializers.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.DrawObjectType.Serializers.IDrawObjectTypeXmlSerializer.SerializeToString(TPG.DrawObjects.Internals.Contracts.DrawObjectType.IDrawObjectTypeDefinition)">
            <summary>
             Serialize to XML string.
            </summary>
            <param name="drawObjectTypeDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.DrawObjectType.Serializers.IDrawObjectTypeXmlSerializer.SerializeToXElement(TPG.DrawObjects.Internals.Contracts.DrawObjectType.IDrawObjectTypeDefinition)">
            <summary>
             Serialize to XElement
            </summary>
            <param name="drawObjectTypeDefinition"></param>
            <returns></returns>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Rendering.Serializers.IPrimitivePartRendererXmlParser">
            <summary>
            Interface for PartRenderer XML parsers.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Rendering.Serializers.IPrimitivePartRendererXmlParser.Parse(System.Xml.Linq.XElement)">
            <summary>
            Parse a PartRenderer from an XML Element.
            </summary>
            <param name="xElement">XML Element containing the PartRenderer serialization.</param>
            <returns>PartRenderer object</returns>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Rendering.Serializers.IPrimitivePartRendererXmlParserProvider">
            <summary>
            XML Parser provider for PartRenderers.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Rendering.Serializers.IPrimitivePartRendererXmlParserProvider.AddParser(System.String,TPG.DrawObjects.Internals.Contracts.Rendering.Serializers.IPrimitivePartRendererXmlParser)">
            <summary>
             Add a new PartRenderer parser to the provider.
            </summary>
            <param name="partRendererTypeId">Type identifier for the PartRenderer parser.</param>
            <param name="primitivePartRendererXmlParser">PartRenderer XML parser object.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Rendering.Serializers.IPrimitivePartRendererXmlParserProvider.GetParser(System.String)">
            <summary>
            Get a PartRenderer parser for the given type id.
            </summary>
            <param name="partRendererTypeId">Type identifier for the requested parser.</param>
            <returns>PartRenderer XML Parser object.</returns>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Rendering.Serializers.IPrimitivePartRendererXmlParserProvider.ParserCount">
            <summary>
            Get number of registered parsers.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Rendering.Serializers.IPrimitivePartRendererXmlSerializerProvider">
            <summary>
            XML Serializer provider for PartRenderers.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Rendering.Serializers.IPrimitivePartRendererXmlSerializerProvider.AddSerializer(System.String,TPG.DrawObjects.Internals.Contracts.Rendering.Serializers.IPrimitivePartRendererXmlSerializer)">
            <summary>
             Add a new PartRenderer serializer to the provider.
            </summary>
            <param name="partRendererTypeId">Type identifier for the PartRenderer serializer.</param>
            <param name="primitivePartRendererXmlSerializer">PartRenderer XML serializer object.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Rendering.Serializers.IPrimitivePartRendererXmlSerializerProvider.GetSerializer(System.String)">
            <summary>
            Get a PartRenderer serializer for the given type id.
            </summary>
            <param name="partRendererTypeId">Type identifier for the requested serializer.</param>
            <returns>PartRenderer XML Serializer object.</returns>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Rendering.Serializers.IPrimitivePartRendererXmlSerializerProvider.SerializerCount">
            <summary>
            Get number of registered serializers.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.ToolHandling.Serializers.IDrawObjectToolHandlerXmlParser">
            <summary>
            Interface for parsing Tool handlers from XML.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ToolHandling.Serializers.IDrawObjectToolHandlerXmlParser.Parse(System.Xml.Linq.XElement)">
            <summary>
            Parse a serialized ToolHandler.
            </summary>
            <param name="xElement">The XML serialization of the ToolHandler object.</param>
            <returns>A ToolHandler object with all Tools from the serialization.</returns>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.ToolHandling.Serializers.IDrawObjectToolHandlerXmlSerializer">
            <summary>
            Serialization of the list of Tools for a DrawObject.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ToolHandling.Serializers.IDrawObjectToolHandlerXmlSerializer.SerializeToString(TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectToolHandler)">
            <summary>
            Serialize a ToolHandler to a string.
            </summary>
            <param name="toolHandler">The Tool handler to serialize.</param>
            <returns>A string containing the XML serialization of the ToolHandler.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ToolHandling.Serializers.IDrawObjectToolHandlerXmlSerializer.SerializeToXElement(TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectToolHandler)">
            <summary>
            Serialize a ToolHandler to an XElement.
            </summary>
            <param name="toolHandler">The Tool handler to serialize.</param>
            <returns>An XElement containing the XML serialization of the ToolHandler.</returns>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectRenderState">
            <summary>
            Used to store temporary render data
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectRenderState.Add(System.Guid,System.Object)">
            <summary>
             Adds data to render state
            </summary>
            <param name="key"></param>
            <param name="data"></param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectRenderState.Remove(System.Guid)">
            <summary>
            Removes data from render state
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectRenderState.Get(System.Guid)">
            <summary>
            Attempts to retrieve data from render state
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectRenderState.Get``1(System.Guid)">
            <summary>
            Attempts to retrieve data from render state
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectRenderState.Contains(System.Guid)">
            <summary>
            Checks if key is present in render state
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.DrawObjectType.IDrawObjectTypeDefinition">
            <summary>
            Draw object type definition
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.DrawObjectType.IDrawObjectTypeDefinition.GetRendererByViewTypeId(System.String)">
            <summary>
             Retrieves renderer for specified view type
            </summary>
            <param name="viewTypeId"></param>
            <returns></returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.DrawObjectType.IDrawObjectTypeDefinition.GetToolHandlerByViewTypeId(System.String)">
            <summary>
            Retrieves draw object tool handler specified by view type
            </summary>
            <param name="viewTypeId"></param>
            <returns></returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.DrawObjectType.IDrawObjectTypeDefinition.GetCreationWorkflowByViewTypeId(System.String)">
            <summary>
            Retrieves draw object creation workflow specified by view type
            </summary>
            <param name="viewTypeId"></param>
            <returns></returns>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.DrawObjectType.IDrawObjectTypeDefinition.DrawObjectTypeId">
            <summary>
            Persistent, globally unique identifier that identifies this draw object type
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.DrawObjectType.IDrawObjectTypeDefinition.Name">
            <summary>
            Name of draw object type
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.DrawObjectType.IDrawObjectTypeDefinition.Description">
            <summary>
            Description of draw object type.
            </summary>
            <remarks>
            This may be used in GUI or for tooltips.
            </remarks>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.DrawObjectType.IDrawObjectTypeDefinition.ExtraTags">
            <summary>
            Custom type definition parameters
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.DrawObjectType.IDrawObjectTypeDefinition.Renderers">
            <summary>
             Retrieves enumerator for renderers
            </summary>
            <value></value>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.DrawObjectType.IDrawObjectTypeDefinition.ToolHandlers">
            <summary>
             Retrieves enumerator for tool handlers
            </summary>
            <value></value>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.DrawObjectType.IDrawObjectTypeDefinition.CreationWorkflows">
            <summary>
             Retrieves enumerator for CreationWorkflows
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.DrawObjectType.IDrawObjectTypeDefinition.DataTemplate">
            <summary>
             Retrieves data template for draw object type
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.DrawObjectType.IDrawObjectTypeDefinition.Validator">
            <summary>
             Validator for draw object data
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Rendering.IDrawObjectRenderer">
            <summary>
             Top-level renderer for a DrawObject
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Rendering.IDrawObjectRenderer.PreRender(TPG.DrawObjects.Internals.Contracts.Views.IViewRender,TPG.GeoFramework.Contracts.IViewport,TPG.DrawObjects.Contracts.Data.IDrawObjectData,TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectRenderState)">
            <summary>
             Pre-renders draw object
            </summary>
            <param name="viewRender"></param>
            <param name="viewport"></param>
            <param name="drawObjectData"></param>
            <param name="drawObjectRenderState"></param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Rendering.IDrawObjectRenderer.Render(TPG.DrawObjects.Internals.Contracts.Views.IViewRender,TPG.GeoFramework.Contracts.IViewport,TPG.DrawObjects.Contracts.Data.IDrawObjectData,TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectRenderState,TPG.GeoFramework.Contracts.Geo.Context.IGeoContext)">
            <summary>
             Renders draw object
            </summary>
            <param name="viewRender"></param>
            <param name="viewport"></param>
            <param name="drawObjectData"></param>
            <param name="drawObjectRenderState"></param>
            <param name="geoContext"></param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Rendering.IDrawObjectRenderer.HitTest(System.Windows.Point,TPG.DrawObjects.Internals.Contracts.Views.IViewRender,TPG.GeoFramework.Contracts.IViewport,TPG.DrawObjects.Contracts.Data.IDrawObjectData,TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectViewState)">
            <summary>
             Checks if the view X,Y position intersects the graphics.
            </summary>
            <param name="pointInView"></param>
            <param name="viewRender">The current view.</param>
            <param name="viewport"></param>
            <param name="drawObjectData">Data for the DrawObject.</param>
            <param name="viewState">Render state and tool state for the DrawObject</param>
            <returns>True if hit, false if not.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Rendering.IDrawObjectRenderer.CalcRotatedBoundingRectangle(TPG.DrawObjects.Internals.Contracts.Views.IViewRender,TPG.GeoFramework.Contracts.IViewport,TPG.DrawObjects.Contracts.Data.IDrawObjectData,System.Double,System.Boolean,System.Boolean,TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectRenderState)">
            <summary>
            Calculate an oriented bounding rectangle for this draw object.
            </summary>
            This method will calculate the smallest bounding rectangle around the draw object. If the rotation angle is not zero, the
            bounds will be relative to a coordinate system rotated by this angle.
            The rectangle is returned as an array of four points in view coordinates where the points are ordered counter-clockwise starting
            with the upper left point.
            <param name="viewRender">The current view.</param>
            <param name="viewport"></param>
            <param name="drawObjectData">Data for the DrawObject.</param>
            <param name="angle">Rotation angle</param>
            <param name="includeDecorations">Include extra decorations that go beyond the primitive data.</param>
            <param name="applyViewportRotation">FIndicates if viewport rotation should be taken into account.</param>
            <param name="drawObjectRenderState"></param>
            <returns>The bounding rectangle as four points in view coordinates.</returns>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Rendering.IDrawObjectRenderer.ViewTypeId">
            <summary>
             View type id this renderer applies to
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Rendering.IDrawObjectRenderer.PartRenderers">
            <summary>
             List of top-level part-renderes
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectViewState">
            <summary>
             View state
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectViewState.ViewTypeId">
            <summary>
             View type id this view state applies to
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectViewState.RenderState">
            <summary>
             Render state
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectViewState.ToolState">
            <summary>
             Tool handler state
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectToolHandler">
            <summary>
            Collection of manipulation tools for a DrawObject and a certain view type.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectToolHandler.DrawDecorations(TPG.DrawObjects.Internals.Contracts.Views.IViewRender,TPG.GeoFramework.Contracts.IViewport,TPG.DrawObjects.Contracts.Data.IDrawObjectData,TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectViewState)">
            <summary>
            Draw tool decorations.
            </summary>
            <param name="viewRender">View to draw decorations in.</param>
            <param name="viewport"></param>
            <param name="drawObjectData">Data object.</param>
            <param name="viewState">Render state / tool state for the view.</param>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectToolHandler.ViewTypeId">
            <summary>
            The view type these DrawObject tools are defined for.
            </summary>
        </member>
        <member name="P:TPG.DrawObjects.Internals.Contracts.ToolHandling.IDrawObjectToolHandler.Tools">
            <summary>
            All tools attached to this draw object and view type.
            </summary>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectToolState">
            <summary>
            Stores temporary tool handler state data in a map between tool instance id and the state object.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectToolState.Add(System.String,System.Object)">
            <summary>
             Adds data to tool handler state
            </summary>
            <param name="toolInstanceId">The instance id of the tool to map state to.</param>
            <param name="toolState">The tool state object to add.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectToolState.Get(System.String)">
            <summary>
            Attempts to retrieve data from tool handler state
            </summary>
            <param name="toolInstanceId">The instance id of the tool to retrive state for.</param>
            <returns>The state object.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectToolState.Get``1(System.String)">
            <summary>
            Attempts to retrieve data from tool handler state
            </summary>
            <param name="toolInstanceId">The instance id of the tool to retrive state for.</param>
            <returns>The state object.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectToolState.Contains(System.String)">
            <summary>
            Checks if key is present in tool handler state
            </summary>
            <param name="toolInstanceId">The instance id of the tool to check if has state mapped to it.</param>
            <returns>True if state exists, false otherwise.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectToolState.GetOrCreateToolState``1(System.String)">
            <summary>
            Attempts to retrieve tool state of a particular type and if it does not exist will create it first
            </summary>
            <typeparam name="T">The type of the tool state to get or create.</typeparam>
            <param name="toolInstanceId">Instance id of the corresponding tool.</param>
            <returns>The tool state.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectToolState.ClearToolState(System.String)">
            <summary>
             Clear tool state for a specified tool instance id
            </summary>
            <param name="toolInstanceId">Tool instance id.</param>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectToolState.ClearAllToolStates">
            <summary>
             Clears all tool state
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectToolState.GetAllToolStates">
            <summary>
            Returns enumeration of all tool state objects
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Module.ViewState.IDrawObjectToolState.CreateToolState``1(System.String)">
            <summary>
            Creates a new tool state for the tool with the given instance id.
            </summary>
            <typeparam name="T">The tool state type to instantiate.</typeparam>
            <param name="toolInstanceId">The instance id of the corresponding tool.</param>
            <returns>The created tool state.</returns>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Rendering.Serializers.IPrimitivePartRendererBaseXmlParser">
            <summary>
            Interface for parsing common base properties for PrimitiveRenderers.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Rendering.Serializers.IPrimitivePartRendererBaseXmlParser.Parse(System.Xml.Linq.XElement,TPG.DrawObjects.Internals.Contracts.Rendering.IPrimitivePartRenderer)">
            <summary>
            Parse the given XML code and populate the partRenderer with common base data such as LocalPrimitiveID and SubRenderers.
            </summary>
            <param name="xElement">Input XML Code</param>
            <param name="partRenderer">part renderer to populate</param>
        </member>
        <member name="T:TPG.DrawObjects.Internals.Contracts.Rendering.Serializers.IPrimitivePartRendererBaseXmlSerializer">
            <summary>
            XML Serializer for common base properties.
            </summary>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Rendering.Serializers.IPrimitivePartRendererBaseXmlSerializer.CreateBaseElement(TPG.DrawObjects.Internals.Contracts.Rendering.IPrimitivePartRenderer)">
            <summary>
            Serialize the base primitive data, such as LocalPrimitiveId and SubRenderers (if any).
            </summary>
            <param name="renderer">The renderer data to be serialized</param>
            <returns>XML Element with serialized data.</returns>
        </member>
        <member name="M:TPG.DrawObjects.Internals.Contracts.Rendering.Serializers.IPrimitivePartRendererBaseXmlSerializer.CreateBaseElement(TPG.DrawObjects.Internals.Contracts.Rendering.IPrimitivePartRenderer,System.Object[])">
            <summary>
            Serialize the base primitive data, such as LocalPrimitiveId and ExtraTags (if any).
            </summary>
            <param name="renderer">The renderer data to be serialized</param>
            <param name="content">Child elements/attributes for the XElement</param>
            <returns>XML Element with serialized data.</returns>
        </member>
    </members>
</doc>
