<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TPG.GeoFramework.Map.Core</name>
    </assembly>
    <members>
        <member name="T:TPG.GeoFramework.Map.Core.BitmapDataPool">
            <summary>
            Manages a pool of fixed size BitmapData. Useful for cache structures
            where you want to reuse a set of bitmaps of equal size.
            </summary>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.BitmapDataPool.#ctor(TPG.GeoFramework.Map.Core.Contracts.IBitmapDataFactory)">
            <summary>
            Initializes a new datamanager.
            </summary>
            <param name="fac">The BitmapData factory to use when initializing new tiles.</param>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.BitmapDataPool.GetData">
            <inheritdoc/>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.BitmapDataPool.AddData(TPG.GeoFramework.Map.Core.Contracts.BitmapData)">
            <inheritdoc/>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.BitmapDataPool.CalcMemSize">
            <inheritdoc/>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.BitmapDataPool.ClearBytes(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.BitmapDataPool.Count">
            <inheritdoc/>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.BitmapDataPool.LastAccessTime">
            <inheritdoc/>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.BitmapDataPool.NodataBitmap">
            <inheritdoc/>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.BitmapDataPool.ErrorBitmap">
            <inheritdoc/>
        </member>
        <member name="T:TPG.GeoFramework.Map.Core.CategorizedLayerFactory">
            <summary>
            Creates instances of categorized layers.
            </summary>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.CategorizedLayerFactory.#ctor(TPG.GeoFramework.Map.Core.Contracts.IMapResources)">
            <summary>
            Constructor.
            </summary>
            <param name="mapResources">Map resources </param>        
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.CategorizedLayerFactory.New(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:TPG.GeoFramework.Map.Core.MaxMinElevationCalculator">
            <summary>
            calculator to perform min max elevation calculations.
            </summary>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.MaxMinElevationCalculator.#ctor(TPG.GeoFramework.Map.Core.Contracts.IMaxMinElevationObserver,System.Int32,TPG.GeoFramework.Map.Core.Contracts.BitmapData,TPG.GeoFramework.Contracts.IRasterProjector)">
            <summary>
            Creates a new instance of MinMaxElevationCalculator.
            </summary>
            <param name="observer">Ma min elevation observer.</param>
            <param name="pixelScale">Pixel scale.</param>
            <param name="elevationData">Elevation data.</param>
            <param name="elevationRasterProjector">Raster projector.</param>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.MaxMinElevationCalculator.InsideEllipse(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Check if point is inside observer range.
            </summary>
            <param name="px"></param>
            <param name="py"></param>
            <param name="cx"></param>
            <param name="cy"></param>
            <param name="rx"></param>
            <param name="ry"></param>
            <returns></returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.MaxMinElevationCalculator.ColorToUint(System.Windows.Media.Color)">
            <summary>
            Get int representation for color.
            </summary>
            <param name="color">Color value.</param>
            <returns>Int representation for color.</returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.MaxMinElevationCalculator.CalcBitmap">
            <summary>
            Create/Update max min elevation bitmap.
            </summary>
            <returns>Updated bitmap.</returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.MaxMinElevationCalculator.CalculateBitmapAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:TPG.GeoFramework.Map.Core.ElevationData">
            <summary>
            Elevation calculations.
            </summary>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.ElevationData.CalcElevationAsync(System.Double,System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.ElevationData.CalcElevation(System.Double,System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:TPG.GeoFramework.Map.Core.MapContentQuery">
            <summary>
            Utility class used to index map queries.
            </summary>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.MapResources.ClearLayerData">
            <inheritdoc/>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.MapResources.UpdateLayerOrder(System.Collections.Generic.List{TPG.GeoFramework.Map.Core.Contracts.IRasterLayerData})">
            <summary>
            Update layer order.
            </summary>
            <param name="rasterLayerData">Layers to order.</param>
            <returns>Ordered list of layers.</returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.MapResources.RemoveLayerData(TPG.GeoFramework.Map.Core.Contracts.IRasterLayerData)">
            <inheritdoc/>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.MapResources.AddLayerData(TPG.GeoFramework.Map.Core.Contracts.IRasterLayerData)">
            <inheritdoc/>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.MapResources.SetupMap(System.Collections.Generic.IEnumerable{TPG.GeoFramework.MapServiceInterfaces.MapTemplateLayer})">
            <inheritdoc/>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.MapResources.SetupBookmarks(System.Collections.Generic.List{TPG.GeoFramework.MapServiceInterfaces.Bookmark})">
            <inheritdoc/>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.MapResources.RasterLayerDataOrder">
            <inheritdoc/>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.MapResources.RasterLayerDataFactory">
            <inheritdoc/>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.MapResources.CategorizedLayers">
            <summary>
            Maintained by other parts of the system. Template connects to categorized layers through placeholders
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.MapResources.RasterLayerDataGeneration">
            <inheritdoc/>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.MapResources.RasterLayerData">
            <inheritdoc/>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.MapResources.MapVisualSettings">
            <inheritdoc/>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.MapResources.Bookmarks">
            <inheritdoc/>
        </member>
        <member name="T:TPG.GeoFramework.Map.Core.MapRevisionManager">
            <summary>
            Revision manager for map data.
            </summary>
            Each revision is identified by an integer number. Higher numbers indicate newer revisions. Each
            revision for a map source is stored as a list of RevisionInfoEntry objects. Each of these contain
            the revision number as well as a list of bounding boxes with optional min/max quadtree levels that
            are affected by this revision.
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.MapRevisionManager.AddRevisionDir(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.MapRevisionManager.AddRevisionDir(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.MapRevisionManager.AddRevisionFile(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.MapRevisionManager.LoadNewRevisions(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.MapRevisionManager.CheckForNewRevisions">
            <inheritdoc/>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.MapRevisionManager.AddRevision(System.String,TPG.GeoFramework.Map.Proto.RevisionInfoEntry)">
            <inheritdoc/>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.MapRevisionManager.GetRevision(System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.MapRevisionManager.CheckRevision(TPG.GeoFramework.Map.Proto.CheckRevision)">
            <inheritdoc/>
        </member>
        <member name="T:TPG.GeoFramework.Map.Core.MapRevisions">
            <summary>
            Helper class for handling revisions for one map source.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.MapRevisions.Paths">
            <summary>
            List of paths to directories containing revision files for this map source.
            </summary>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.MapServiceCatalogManager.CreateServiceEntry(TPG.GeoFramework.MapServiceInterfaces.ServiceRegistrationInfo,System.Guid)">
            <summary>
            Create a catalog service entry
            </summary>
            <param name="catalogEntryInfo">Entry information</param>
            <param name="sessionId"></param>
            <returns></returns>
        </member>
        <member name="E:TPG.GeoFramework.Map.Core.MapServiceManager.Disposing">
            <inheritdoc/>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.RasterLayerData.VisualizationDirty">
            <inheritdoc/>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.RasterLayerData.PixelsPerCm">
            <inheritdoc/>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.RasterLayerData.UseTileCache">
            <summary>
            Use quadtree based tile cache for rendering. 
            This is recommended unless you have a very small or very static map. The alternative is to refetch
            the entire map raster from the map server each time the viewport changes.
            Default is true.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.RasterLayerData.HasNoDataSource">
            <inheritdoc/>
        </member>
        <member name="T:TPG.GeoFramework.Map.Core.MapTileCache">
            <inheritdoc/>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.MapTileCache.CreateRasterProjector(System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.MapTileCache.CreateRasterProjector(TPG.GeoFramework.Map.Core.Contracts.BitmapTileIndex)">
            <inheritdoc/>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.MapTileCache.CalcTileIndex(TPG.GeoFramework.Contracts.IRasterProjector,TPG.GeoFramework.Map.Core.Contracts.BitmapTileIndex,System.Double,System.Boolean,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.MapTileCache.TileIntersect(TPG.GeoFramework.Contracts.IRasterProjector,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.MapTileCache.CalcTileLevel(TPG.GeoFramework.Contracts.IRasterProjector,System.Int32@,System.Double)">
            <summary>
            Calculate the required quadtree level to have high enough resolution for the given viewport 
            </summary>
            <param name="rasterProjector"></param>
            <param name="tileLevel">Tile level output</param>
            <param name="pixelScale">Adjusts the resolution parameter, range. 
            1.0 guarantees that the pixels are at least the same resolution as the viewport resolution. 2.0 
            allows the pixels to be up to 2x as big as the viewport resolution.
            </param>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.MapTileCache.UpdateTileRequests(TPG.GeoFramework.Contracts.IRasterProjector,TPG.GeoFramework.Map.Core.Contracts.BitmapTileIndex,System.Double,System.Boolean,System.Double)">
            <summary>
            Update tile requests based on updated Viewport. 
            This method calculates the visible set of tiles, and the required quadtree depth given the current viewport. 
            It also calculates the priorities for each tile request.
            The return value from this method indicates whether or not the tiling has changed so that we need to assemble a new bitmap.
            </summary>
            <param name="rasterProjector"></param>
            <param name="prevIndex">TileIndex from previous frame.</param>
            <param name="pixelScale">Adjusts the resolution parameter, range. 
                1.0 guarantees that the pixels are at least the same resolution as the viewport resolution. 2.0 
                allows the pixels to be up to 2x as big as the viewport resolution.
            </param>
            <param name="allowTileWraparound"></param>
            <param name="targetResolution">If this parameter is given > 0.0, this resolution is used instead of the raster projector resolution
            to decide the quadtree level for the active tile set.</param>
            <returns>Desired tiles</returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.MapTileCache.CalcReadyTileIndex(TPG.GeoFramework.Contracts.IRasterProjector,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.MapTileCache.TileContains(System.UInt64,TPG.GeoUnits.GeoPos)">
            <inheritdoc/>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.MapTileCache.GetNearestTileResolution(TPG.GeoUnits.GeoPos,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.MapTileCache.GetCreateTileResolution(TPG.GeoUnits.GeoPos,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.MapTileCache.GetCreateNearestTileResolution(TPG.GeoUnits.GeoPos,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.MapTileCache.RemoveEmptyLeafNodes">
            <inheritdoc/>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.MapTileCache.GetOrCreateTile(System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.MapTileCache.Create(System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.MapTileCache.MinRequestLevel">
            <summary>
            Minimum level for tile requests. This property can be used to limit requests of huge areas.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.MapTileCache.RootNominalScale">
            <summary>
            Nominal scale for a level 0 tile.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.MapTileCache.NumTotal">
            <summary>
            Total number of tiles in cache
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.MapTileCache.NumWanted">
            <summary>
            Number of tiles that should be downloaded
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.MapTileCache.NumReady">
            <summary>
            Number of tiles that are ready in the cache
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.MapTileCache.TilesLock">
            <inheritdoc/>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.MapTileCache.TileSize">
            <inheritdoc/>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.MapTileCache.CurrentRevision">
            <inheritdoc/>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.MapTileCache.Tiles">
            <inheritdoc/>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.MapTileCache.ResolutionAreas">
            <inheritdoc/>
        </member>
        <member name="T:TPG.GeoFramework.Map.Core.QuadTileCache">
            <summary>
            Simple dictionary-based quadtree strucutre for the tile caches.
            </summary>
            This class implements a simple quadtree structure with a Dictionary indexed on the quad tile ID. 
            See TileId for more details on the index structure.
            Depends on external locks to be threadsafe
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.QuadTileCache.CalcChildTileId(System.UInt64,TPG.GeoFramework.Map.Core.Contracts.ChildDir)">
            <summary>
            Calculate the quad tile ID of the child of the given tile in the given direction.
            </summary>
            <param name="tileId">parent tile ID</param>
            <param name="childDir">Child direction.</param>
            <returns>Child tile ID.</returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.QuadTileCache.CalcNeighborTileId(System.UInt64,TPG.GeoFramework.Map.Core.Contracts.NeighDir)">
            <summary>
            Calculate the Tile ID for the neigboring tile.
            </summary>
            This method will return the ID of the neighbor tile in the specified direction. If the neighbor tile
            is outside the border of the quadtree at the current level, UndefTileId is returned.
            <param name="tileId">ID of the current tile.</param>
            <param name="neighDir">Direction to get the neighbor tile.</param>
            <returns>Neighboring TileId or UndefTileId.</returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.QuadTileCache.CalcParentTileId(System.UInt64)">
            <summary>
            Calculate the quad tile ID of the parent of the given tile ID.
            </summary>
            <param name="tileId">Input child tile ID.</param>
            <returns>Parent tile ID.</returns>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.ServiceRequestQueue.MaxQueueTime">
            <summary>
            Set the maximum queue length based on the average request time.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.ServiceRequestQueue.AverageRequestTime">
            <summary>
            Returns the average time in ms for the last NumTimings requests
            </summary>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.ServiceRequestManager.SetMaxQueueTime(TPG.GeoFramework.MapServiceInterfaces.MapServiceType,System.Int64)">
            <summary>
            Set maximum queue time for pending requests for the given service type
            </summary>
            <param name="serviceType"></param>
            <param name="timeMs"></param>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.ServiceRequestManager.SetMinQueueLength(TPG.GeoFramework.MapServiceInterfaces.MapServiceType,System.Int32)">
            <summary>
            Set the minimum queue length for this service type. 
            Default is 1, but for services that may handle many requests in parallell, this number can be higher.
            This number can only be exceeded when the expected processing time for the entire queue is less than
            the queue's MaxQueueTime.
            </summary>
            <param name="serviceType"></param>
            <param name="length"></param>
        </member>
        <member name="T:TPG.GeoFramework.Map.Core.TileAndTileCache">
            <summary>
            Utility class to keep track of a tile and and the cache it lives in.
            </summary>
        </member>
        <member name="T:TPG.GeoFramework.Map.Core.TileCacheQuery">
            <summary>
            Utility class for storing a tile cache and its related map content query
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.TileCacheManager.MaxCacheSize">
            <inheritdoc/>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.TileCacheManager.CurrentCacheSize">
            <inheritdoc/>
        </member>
        <member name="T:TPG.GeoFramework.Map.Core.TileDataReader">
            <summary>
            This class handle asynchronous loading of tiles in all the tile caches.
            </summary>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.TileDataReader.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.TileDataReader.StartThread">
            <inheritdoc/>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.TileDataReader.AddDataRequest(TPG.GeoFramework.Map.Core.Contracts.IMapTileCache,TPG.GeoFramework.MapServiceInterfaces.IMapContentQuery,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.TileDataReader.CancelDataRequest(TPG.GeoFramework.Map.Core.Contracts.IMapTileCache,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.TileDataReader.GetTileCacheStats">
            <inheritdoc/>
        </member>
        <member name="E:TPG.GeoFramework.Map.Core.TileDataReader.TileRequestFinished">
            <inheritdoc/>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.TileDataReader.WorkQueueSize">
            <inheritdoc/>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.TileDataReader.ServiceRequestManager">
            <inheritdoc/>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.TileDataReader.MaxRequestAge">
            <inheritdoc/>
        </member>
    </members>
</doc>
