<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MilSym.MilSymbol.WPF</name>
    </assembly>
    <members>
        <member name="T:MilSym.MilSymbol.DrawMobility">
            <summary>
            Support methods for rendering the mobility portion of symbols in MIL STD-2525C
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.DrawMobility.End">
            <summary>
            The maximumpositive x-ccordinate value of many mobility indicators
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.DrawMobility.HalfEnd">
            <summary>
            Half of the End x-coordinate value
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.DrawMobility.HalfWidth">
            <summary>
            Half of the default line width, i.e, 0.5 * 10.0
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.DrawMobility.Rad">
            <summary>
            The radius of the most curved parts making up mobility indicators
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.DrawMobility.Sqr">
            <summary>
            Another common dimension for most objects, about half the normal height
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.DrawMobility.ThreeSqr">
            <summary>
            Three times the commmon Sqr dimension
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.DrawMobility.TwoRad">
            <summary>
            Twice the default radius for most curved parts making up mobility indicators
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.DrawMobility.TwoSqr">
            <summary>
            Twice the common Sqr dimension
            </summary>
        </member>
        <member name="M:MilSym.MilSymbol.DrawMobility.GenerateWheels(System.Double[],System.Double)">
            <summary>
            Generates the wheels for mobility indicators, e.g., wheeled transport.
            </summary>
            <param name="exes">
            The center x-coordinates of the wheels to be generated.
            </param>
            <param name="y">
            The common, center y-coordinate of the wheels to be generated.
            </param>
            <returns>
            A shape that represents the necessary wheels.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.DrawMobility.GenerateTowed(System.Double)">
            <summary>
            Generates the "towed" shape.
            </summary>
            <param name="y">
            The y-coordinate at which to generate the towed shape.
            </param>
            <returns>
            The "towed" shape as a Shape object.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.DrawMobility.GenerateSled(System.Double)">
            <summary>
            Generates the sled shape using the SledGeometry
            </summary>
            <param name="y">
            The y- coordinate that is passed to SledGeometry.
            </param>
            <returns>
            A shape repersenting the sled geometry.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.DrawMobility.GenerateTracked(System.Double)">
            <summary>
            Generates tracked mobility object by combining SledGeometry with a line segment.
            </summary>
            <param name="y">
            The y-coordinate of the mobility indicator.
            </param>
            <returns>
            A Shape object representing the modified tracked mobility object.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.DrawMobility.GenerateWheeledTracked(System.Double)">
            <summary>
            Generates wheeled, tracked mobility object by combining SledGeometry with a line segment and wheels.
            </summary>
            <param name="y">
            The y-coordinate of the mobility indicator.
            </param>
            <returns>
            A Shape object representing the modified wheeled, tracked mobility object.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.DrawMobility.GenerateOverSnow(System.Double)">
            <summary>
            Generates snow mobility object.
            </summary>
            <param name="y">
            The y-coordinate of the mobility indicator.
            </param>
            <returns>
            A Shape object representing the modified snow mobility object.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.DrawMobility.GeneratePackAnimals(System.Double)">
            <summary>
            Generates pack animals mobility object.
            </summary>
            <param name="y">
            The y-coordinate of the mobility indicator.
            </param>
            <returns>
            A Shape object representing the pack animals mobility object.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.DrawMobility.GenerateBarge(System.Double)">
            <summary>
            Generates barge mobility object.
            </summary>
            <param name="y">
            The y-coordinate of the mobility indicator.
            </param>
            <returns>
            A Shape object representing the barge mobility object.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.DrawMobility.GenerateAmphibious(System.Double)">
            <summary>
            Generates amphibious mobility object.
            </summary>
            <param name="y">
            The y-coordinate of the mobility indicator.
            </param>
            <returns>
            A Shape object representing the amphibious mobility object.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.DrawMobility.GenerateArray(System.Double[],System.Double)">
            <summary>
            Generates generic array mobility object.
            </summary>
            <param name="exes">
            The x-coordinates of the centers of the array objects.
            </param>
            <param name="y">
            The y-coordinate of the centers of the array objects.
            </param>
            <returns>
            A Shape representing the generic array mobility object.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.DrawMobility.GenerateMobility(System.String)">
            <summary>
            Generates barge mobility object.
            </summary>
            <param name="symbolCode">
            The symbol code containing the mobility indicator for which to create a mobility Shape.
            </param>
            <returns>
            A Shape object representing the mobility object.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.DrawMobility.HalfFib(System.Double,System.Double,System.Windows.Media.SweepDirection)">
            <summary>
            Generates an arc segment to support the amphibious moblity object
            </summary>
            <param name="x">
            The x-coordinate of the start of the arc segment.
            </param>
            <param name="y">
            The y-coordinate of the start of the arc segment.
            </param>
            <param name="sd">
            The sweep direction of the arc segment.
            </param>
            <returns>
            An ArcSegment representing the arc segment making up the anphibious mobility object.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.DrawMobility.Block(System.Double,System.Double)">
            <summary>
            Generates the square blocks making up a towed array.
            </summary>
            <param name="x">
            The x-coordinates of the square blocks.
            </param>
            <param name="y">
            The y-coordinate of the square blocks.
            </param>
            <returns>
            A PathFigure reresenting the square blocks making up the towed array.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.DrawMobility.Segment(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Helper method for generating a line segment.
            </summary>
            <param name="x1">
            The initial x-coordinate of the line segment.
            </param>
            <param name="y1">
            The initial y-coordinate of the line segment.
            </param>
            <param name="x2">
            The final x-coordinate of the line segment.
            </param>
            <param name="y2">
            The final y-coordinate of the line segment.
            </param>
            <returns>
            A PathFigure representing the requested line segment.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.DrawMobility.Arc(System.Double,System.Double,System.Double,System.Double,System.Windows.Media.SweepDirection)">
            <summary>
            Draw an arc segment of radius Rad between the two indicated points.
            </summary>
            <param name="x1">
            The initial x-coordinate of the arc segment.
            </param>
            <param name="y1">
            The initial y-coordinate of the arc segment.
            </param>
            <param name="x2">
            The final x-coordinate of the arc segment.
            </param>
            <param name="y2">
            The final y-coordinate of th arc segment.
            </param>
            <param name="sd">
            The sweep direction - clockwise or counter-clockwise.
            </param>
            <returns>
            A PathFigure representing the arc segment.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.DrawMobility.SledGeometry(System.Double)">
            <summary>
            Generates the geometry required by the sled geometry.
            </summary>
            <param name="y">
            The y-coordinate for the sled geometry.
            </param>
            <returns>
            A PathGeometry representing the sled geometry.
            </returns>
        </member>
        <member name="T:MilSym.MilSymbol.ExtensionMethods">
            <summary>
            ExtensionMethods is a static class with some common extension methods for all components.
            All components depend on MilSym.MilSymbol.
            </summary>
            <summary>
            WPF specific extensions.
            </summary>
        </member>
        <member name="M:MilSym.MilSymbol.ExtensionMethods.GetVisuals(System.Windows.DependencyObject)">
            <summary>
            Returns all the visuals in the tree branch, one at a time.
            </summary>
            <param name="root">
            The root of the tree branch as a dependency object.
            </param>
            <returns>
            Each visual in the tree branch, one at a time.
            </returns>
        </member>
        <member name="F:MilSym.MilSymbol.ExtensionMethods.Culture">
            <summary>
            Use the current culture.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.ExtensionMethods.Black">
            <summary>
            The default black brush.
            </summary>
        </member>
        <member name="M:MilSym.MilSymbol.ExtensionMethods.FindTextExtent(System.Windows.Controls.TextBlock)">
            <summary>
            Finds the text extent. This is a lot messier than the Silverlight version.
            But with WPF we could actually bind the Width/Height properties
            and auto-adjust according to the content - maybe sometime.
            </summary>
            <param name="tb">
            The TextBlock for which to find the extent.
            </param>
        </member>
        <member name="M:MilSym.MilSymbol.ExtensionMethods.SetDashArray(System.Windows.Style,System.Int32[])">
            <summary>
            Set the dash array for WPF.
            </summary>
            <param name="st">
            The style for which to set the dash array.
            </param>
            <param name="dashes">
            A series of integers to set for the dash array.
            </param>
        </member>
        <member name="M:MilSym.MilSymbol.ExtensionMethods.SetTransform(System.Windows.Shapes.Path,System.Windows.Media.Matrix)">
            <summary>
            Set the transform matrix for a given path.
            </summary>
            <param name="path">
            The path on which to set the transform.
            </param>
            <param name="matrix">
            The transform matrix to set for the path.
            </param>
        </member>
        <member name="T:MilSym.MilSymbol.Appendix">
            <summary>
            A helper structure that holds the decsription and the parent template name for a given template. 
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Appendix.Description">
            <summary>
            The description of a given template, derived from the 2525C documentation.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Appendix.ParentCode">
            <summary>
            The symbol code for the parent template.
            </summary>
        </member>
        <member name="M:MilSym.MilSymbol.Appendix.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MilSym.MilSymbol.Appendix"/> struct.
            </summary>
            <param name="d">
            The description for a template.
            </param>
            <param name="p">
            The parent code for a template.
            </param>
        </member>
        <member name="T:MilSym.MilSymbol.MilAppendix">
            <summary>
            Maps the template for a symbol to a friendly name for that symbol as well as a parent template.
            Thus the entire symbol tree can be reproduced from this class.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilAppendix.A">
            <summary>
            A dictionary of all the templates in Appendix A.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilAppendix.B">
            <summary>
            A dictionary of all the templates in Appendix B.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilAppendix.C">
            <summary>
            A dictionary of all the templates in Appendix C.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilAppendix.D">
            <summary>
            A dictionary of all the templates in Appendix D.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilAppendix.E">
            <summary>
            A dictionary of all the templates in Appendix E.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilAppendix.G">
            <summary>
            A dictionary of all the templates in Appendix G.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilAppendix.DictList">
            <summary>
            A list of all the Appendix dictionaries.
            </summary>
        </member>
        <member name="M:MilSym.MilSymbol.MilAppendix.Keys(System.String)">
            <summary>
            Returns the standard's symbol codes for the given appendix.
            </summary>
            <param name="match">Regular expression for the symbol codes to return</param>
            <returns>An enumerable list of strings representing the appendix symbol codes or an empty list if no codes exist</returns>
        </member>
        <member name="M:MilSym.MilSymbol.MilAppendix.Description(System.String)">
            <summary>
            The description for the given symbol code's hierarchy as described in MIL-STD 2525C. The return string can include
            multiple newlines with each newline following by an increasing number of spaces for indentation purposes.
            In the future it may just be a series of strings separated by newlines.
            </summary>
            <param name="symbolCode">a valid 2525C symbol code</param>
            <returns>a formatted string, including spaces and newlines, that describes the symbol</returns>
        </member>
        <member name="M:MilSym.MilSymbol.MilAppendix.Recurse(System.Collections.Generic.IDictionary{System.String,MilSym.MilSymbol.Appendix},System.String)">
            <summary>
            Recurses the dictionary, going up the tree, to find the ancestors of a symbol code.
            </summary>
            <param name="dict">
            The dictionary to traverse.
            </param>
            <param name="newCode">
            The code to find in the dictionary.
            </param>
            <returns>
            The extended list of ancestors to that point.
            </returns>
        </member>
        <member name="T:MilSym.MilSymbol.ColorSchemeProperty">
            <summary>
            Enumeration of the MIL-STD 2525C standard color schemes
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.ColorSchemeProperty.Dark">
            <summary>
            Enumerated value representing the dark colors specified in MIL-STD 2525C
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.ColorSchemeProperty.Medium">
            <summary>
            Enumerated value representing the medium dark colors specified in MIL-STD 2525C
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.ColorSchemeProperty.Light">
            <summary>
            Enumerated value representing the light colors specified in MIL-STD 2525C
            </summary>
        </member>
        <member name="T:MilSym.MilSymbol.MilBrush">
            <summary>
            MilBrush maintains the colored brushes specified by the military standard.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilBrush.Yellows">
            <summary>
            The offsets into the array of default brushes for yellows.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilBrush.Purples">
            <summary>
            The offsets into the array of default brushes for purples.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilBrush.Greens">
            <summary>
            The offsets into the array of default brushes for greens.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilBrush.Reds">
            <summary>
            The offsets into the array of default brushes for reds.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilBrush.Blues">
            <summary>
            The offsets into the array of default brushes for blues.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilBrush.Rust">
            <summary>
            A rust color used by some weather symbols
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilBrush.Defaults">
            <summary>
            Array of all the colors, defined as brushes, as specificed by MIL-STD 2525C
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilBrush.Black">
            <summary>
            A black solid color brush.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilBrush.DarkBlue">
            <summary>
            A dark blue solid color brush.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilBrush.DarkGreen">
            <summary>
            A dark green solid color brush.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilBrush.DarkPurple">
            <summary>
            A dark purple solid color brush.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilBrush.DarkRed">
            <summary>
            A dark red solid color brush.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilBrush.DarkYellow">
            <summary>
            A dark yellow solid color brush.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilBrush.LightBlue">
            <summary>
            A light blue solid color brush.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilBrush.LightGreen">
            <summary>
            A light green solid color brush.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilBrush.LightPurple">
            <summary>
            A light purple solid color brush.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilBrush.LightRed">
            <summary>
            A light red solid color brush.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilBrush.LightYellow">
            <summary>
            A light yellow solid color brush.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilBrush.MediumBlue">
            <summary>
            A medium blue solid color brush.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilBrush.MediumGreen">
            <summary>
            A medium green solid color brush.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilBrush.MediumPurple">
            <summary>
            A medium purple solid color brush.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilBrush.MediumRed">
            <summary>
            A medium red solid color brush.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilBrush.MediumYellow">
            <summary>
            A medium yellow solid color brush.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilBrush.LinePresents">
            <summary>
            A dictionary of solid line styles (present, not anticipated).
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilBrush.LineFillPresents">
            <summary>
            A dictionary of solid line-fill styles (present, not anticipated).
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilBrush.Fills">
            <summary>
            A dictionary of solid fill styles.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilBrush.BlackPresent">
            <summary>
            A solid black line style. This is the same as the ResourceDictionary's BS10
            </summary>
        </member>
        <member name="M:MilSym.MilSymbol.MilBrush.#cctor">
            <summary>
            Initializes static members of the <see cref="T:MilSym.MilSymbol.MilBrush"/> class.
            </summary>
        </member>
        <member name="M:MilSym.MilSymbol.MilBrush.FindColorScheme(System.String)">
            <summary>
            This is the current background color for this particular symbol
            </summary>
            <param name="symbolCode">The symbol code</param>
            <returns>A brush representing the current background color for the symbol code</returns>
        </member>
        <member name="M:MilSym.MilSymbol.MilBrush.GetFill(System.Windows.Media.Brush)">
            <summary>
            Gets the background fill style for the specified brush. There is little or
            no reason for a user to call this method unless they wish to capture the
            style for other reasons.
            </summary>
            <param name="brush">The brush to use for background fills</param>
            <returns>The style corresponding to a fill using the specified brush</returns>
        </member>
        <member name="M:MilSym.MilSymbol.MilBrush.GetLinePresent(System.Windows.Media.Brush)">
            <summary>
            Gets the "Present" linestyle associated with the specified brush,
            a style for drawing solid lines with a thickness of 10. There is little or
            no reason for a user to call this method unless they wish to capture the
            style for other reasons.
            </summary>
            <param name="brush">The brush to use for the solid lines, typically a solid black brush</param>
            <returns>The style for drawing solid lines with the specified brush</returns>
        </member>
        <member name="M:MilSym.MilSymbol.MilBrush.GetLineFillPresent(System.Windows.Media.Brush)">
            <summary>
            Returns the line, fill, and present Style for the given brush or adds a line, fill, and present style based on the brush.
            "Present" in this context refers to the object being present (solid) as opposed to anticipated (dashed).
            In this case, the Style has both a solid line and a solid fill.
            </summary>
            <param name="brush">
            The brush for which to get the Style.
            </param>
            <returns>
            The style corresponding to the requested brush.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.MilBrush.Add(System.Boolean,System.Windows.Media.Brush)">
            <summary>
            Method to load up the various default line and fill styles
            </summary>
            <param name="isFill">
            True if the style includes a fill.
            </param>
            <param name="br">
            The brush to be used for the given style.
            </param>
            <returns>
            Returns the style while also adding it to the list of default styles.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.MilBrush.GetDefault(System.Int32,MilSym.MilSymbol.ColorSchemeProperty)">
            <summary>
            Returns the appropriate brush type according to the current color scheme
            </summary>
            <param name="colorOffset">
            The color offset in the array of Default colors.
            </param>
            <param name="csp">
            The particular color scheme property, Dark, Medium, or Light
            </param>
            <returns>
            The brush corresponding to the color scheme property
            </returns>
        </member>
        <member name="P:MilSym.MilSymbol.MilBrush.ColorScheme">
            <summary>
            Gets or sets which of the three default color schemes to use: dark, medium, or light.
            The default is "Light."
            This is a static property so it is possible for one thread to overwrite
            the user by a different thread. This behavior may change in the future.
            </summary>
        </member>
        <member name="T:MilSym.MilSymbol.MilHats">
            <summary>
            Supports decorations on top of the standard military symbol.
            </summary>
        </member>
        <member name="M:MilSym.MilSymbol.MilHats.Generate(MilSym.MilSymbol.MilSymbol,System.String,System.Double,System.Double)">
            <summary>
            Generates the correct combination of task force, installation, and feint dummy for a symbol.
            </summary>
            <param name="ms">
              The symbol to which the generated rendering is attached.
            </param>
            <param name="symbolCode">
              The symbol code for the given symbol
            </param>
            <param name="widthOfEchelon"></param>
            <param name="heightOfEchelon"></param>
            <returns>
            The maximum height of the generated rendering.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.MilHats.GenerateTaskForce(MilSym.MilSymbol.MilSymbol,System.Double@,System.Double,System.Double)">
            <summary>
            Generate the task force rendering for the passed in symbol.
            </summary>
            <param name="ms">
              The military symbol for which to provide the task force rendering.
            </param>
            <param name="height">
              The height at which to provide the task force rendering.
            </param>
            <param name="widthOfEchelon"></param>
            <param name="heightOfEchelong"></param>
            <param name="heightOfEchelon"></param>
            <returns>
            The graphics Path object that represents the task force rendering.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.MilHats.GenerateFeintDummy(MilSym.MilSymbol.MilSymbol,System.Double@)">
            <summary>
            Generate the feint dummy rendering for the passed in symbol.
            </summary>
            <param name="ms">
            The military symbol for which to provide the feint dummy rendering.
            </param>
            <param name="height">
            The height at which to provide the feint dummy rendering.
            </param>
            <returns>
            The graphics Path object that represents the feint dummy rendering.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.MilHats.GenerateHeadquarters(MilSym.MilSymbol.MilSymbol)">
            <summary>
            Generate the headquarters rendering for the passed in symbol.
            </summary>
            <param name="ms">
            The military symbol for which to provide the headquarters rendering.
            </param>
            <returns>
            The graphics Shape object that represents the headquarters rendering.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.MilHats.UnknownSpaceInstallation(System.Windows.Media.Brush,System.Double)">
            <summary>
            Generate the unknown space installation rendering for the passed in symbol.
            </summary>
            <param name="br">
            The brush to use for the unknown space installation rendering.
            </param>
            <param name="height">
            The height at which to provide the unknown space installation rendering.
            </param>
            <returns>
            The graphics Path object that represents the unknown space installation rendering.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.MilHats.UnknownGroundInstallation(System.Windows.Media.Brush,System.Double)">
            <summary>
            Generate the unknown ground installation rendering for the passed in symbol.
            </summary>
            <param name="br">
            The brush to use for the unknown ground installation rendering.
            </param>
            <param name="height">
            The height at which to provide the unknown ground installation rendering.
            </param>
            <returns>
            The graphics Path object that represents the unknown ground installation rendering.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.MilHats.HostileSpaceInstallation(System.Windows.Media.Brush,System.Double)">
            <summary>
            Generate the hostile space installation rendering for the passed in symbol.
            </summary>
            <param name="br">
            The brush to use for the hostile space installation rendering.
            </param>
            <param name="height">
            The height at which to provide the hostile space installation rendering.
            </param>
            <returns>
            The graphics Shape object that represents the hostile space installation rendering.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.MilHats.HostileGroundInstallation(System.Windows.Media.Brush,System.Double)">
            <summary>
            Generate the hostile ground installation rendering for the passed in symbol.
            </summary>
            <param name="br">
            The brush to use for the hostile ground installation rendering.
            </param>
            <param name="height">
            The height at which to provide the hostile ground installation rendering.
            </param>
            <returns>
            The graphics Shape object that represents the hostile ground installation rendering.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.MilHats.FriendSpaceInstallation(System.Windows.Media.Brush,System.Double)">
            <summary>
            Generate the friendly space installation rendering for the passed in symbol.
            </summary>
            <param name="br">
            The brush to use for the friendly space installation rendering.
            </param>
            <param name="height">
            The height at which to provide the friendly space installation rendering.
            </param>
            <returns>
            The graphics Path object that represents the friendly space installation rendering.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.MilHats.FriendCircleInstallation(System.Windows.Media.Brush,System.Double)">
            <summary>
            Generate the friendly circular installation rendering for the passed in symbol.
            For example, some sea surface symbols are represented by circles.
            </summary>
            <param name="br">
            The brush to use for the friendly circular installation rendering.
            </param>
            <param name="height">
            The height at which to provide the friendly circular installation rendering.
            </param>
            <returns>
            The graphics Path object that represents the friendly circular installation rendering.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.MilHats.GenericInstallation(System.Windows.Media.Brush,System.Double,System.Double)">
            <summary>
            Generate the generic installation rendering for the passed in symbol.
            This is typically a black rectangular block placed on top of the symbol.
            </summary>
            <param name="br">
            The brush to use for the generic installation rendering.
            </param>
            <param name="height">
            The height at which to provide the generic installation rendering.
            </param>
            <param name="bottom">
            The base at which to provide the generic installation rendering.
            This is typically the top of the symbol.
            </param>
            <returns>
            The graphics Shape object that represents the generic installation rendering.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.MilHats.GenerateInstallation(MilSym.MilSymbol.MilSymbol,System.Double@)">
            <summary>
            Generate the installation rendering for the passed in symbol.
            </summary>
            <param name="ms">
            The military symbol for which to provide the installation rendering.
            </param>
            <param name="height">
            The height at which to provide the installation rendering.
            </param>
            <returns>
            The graphics Shape object that represents the installation rendering.
            </returns>
        </member>
        <member name="T:MilSym.MilSymbol.MilLabels">
            <summary>
            Supports the generation of all labels for the standard military symbol.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilLabels.TopLabels">
            <summary>
            An enumerated value to indicate that the labels above the symbol are under consideration.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilLabels.BigLabels">
            <summary>
            An enumerated value to indicate that the big labels noartheast of the symbol are under consideration.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilLabels.LeftLabels">
            <summary>
            An enumerated value to indicate that the labels to the left of the symbol are under consideration.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilLabels.RightLabels">
            <summary>
            An enumerated value to indicate that the labels to the right of the symbol are under consideration.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilLabels.TacticalGraphicsLabels">
            <summary>
            An enumerated value to indicate that tactical graphics labels are under consideration.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilLabels.LabelCount">
            <summary>
            The number of label styles affected by changes to the symbol's label style.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilLabels.PlusMinus">
            <summary>
            The amount to offset the direction arrow when it originates from the center.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilLabels.Divider">
            <summary>
            Separator between strings on the same line. The standard says this should be a space.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilLabels.LegalLabels">
            <summary>
            The legal labels
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilLabels.Default">
            <summary>
            A placeholder key for the default collection of label styles
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilLabels.LabelStyles">
            <summary>
            Cached list of styles - currently this is not ever pruned and could be abused
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilLabels.DashLabels">
            <summary>
            A dictionary just for the "W" label
            </summary>
        </member>
        <member name="M:MilSym.MilSymbol.MilLabels.#cctor">
            <summary>
            Initializes static members of the <see cref="T:MilSym.MilSymbol.MilLabels"/> class.
            </summary>
        </member>
        <member name="M:MilSym.MilSymbol.MilLabels.Generate(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Parses the LabelString as dictionary of labels
            </summary>
            <param name="labelsIn">
            The label string coming in.
            </param>
            <param name="labelsOut">
            The dictionary of labels with the name of the label as the key.
            </param>
            <returns>
            Also returns the dictionary of labels.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.MilLabels.GetStyles(System.Windows.Style)">
            <summary>
            Return the cache of styles for the particular symbol.
            </summary>
            <param name="style">
            The style for which to retrieve the array of styles.
            </param>
            <returns>
            An array of styles, such as left labels, right labels, etc. that match the passed in style.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.MilLabels.GenerateQ(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Double)">
            <summary>
            Returns the arrow representing a direction of travel for a mil symbol
            </summary>
            <param name="symbolCode">Code for the mil symbol</param>
            <param name="labels">The labels for the symbol, we're looking for "Q"</param>
            <param name="extraOffset">An extra offset for tactical graphics</param>
            <returns>The arrow shape representing the direction of travel</returns>
        </member>
        <member name="M:MilSym.MilSymbol.MilLabels.GenerateJokerFakerExercise(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Windows.Style)">
            <summary>
            Generate the Joker, Faker, or eXercise character.
            </summary>
            <param name="symbolCode">
            The symbol code for which to generate the large character string.
            </param>
            <param name="labels">
            A dictionary of the labels to be drawn.
            </param>
            <param name="style">
            The style to apply to the labels.
            </param>
            <returns>
            The TextBlock that incorporates the labels.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.MilLabels.GenerateLeft(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Windows.Style)">
            <summary>
            Generate the left labels for the symbol.
            </summary>
            <param name="symbolCode">
            The symbol code for which to generate the labels.
            </param>
            <param name="labels">
            The dictionary of labels to generate.
            </param>
            <param name="style">
            The style with which to render the labels.
            </param>
            <returns>
            A TextBlock that represents the rendered labels.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.MilLabels.GenerateRight(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Windows.Style)">
            <summary>
            Generate the right labels for the symbol.
            </summary>
            <param name="symbolCode">
            The symbol code for which to generate the labels.
            </param>
            <param name="labels">
            The dictionary of labels to generate.
            </param>
            <param name="style">
            The style with which to render the labels.
            </param>
            <returns>
            A TextBlock that represents the rendered labels.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.MilLabels.GenerateTop(System.Double,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Windows.Style)">
            <summary>
            Generate the top labels for the symbol.
            </summary>
            <param name="high">
            The height at which to generate the labels.
            </param>
            <param name="symbolCode">
            The symbol code for which to generate the labels.
            </param>
            <param name="labels">
            The dictionary of labels to generate.
            </param>
            <param name="style">
            The style with which to render the labels.
            </param>
            <returns>
            A TextBlock that represents the rendered labels.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.MilLabels.GenerateMiddle(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Generate the middle label for the symbol.
            </summary>
            <param name="symbolCode">
            The symbol code for which to generate the labels.
            </param>
            <param name="labels">
            The dictionary of labels to generate.
            </param>
            <returns>
            A TextBlock that represents the rendered labels.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.MilLabels.IntegerLabel(System.Double,System.Double,System.String,System.String)">
            <summary>
            Generate a TextBlock label based on an integer value.
            </summary>
            <param name="x">
            The x coordinate for the TextBlock.
            </param>
            <param name="y">
            The y coordinate for the TextBlock.
            </param>
            <param name="integerLabel">
            The integer label to be displayed.
            </param>
            <param name="style">
            The style for the label.
            </param>
            <returns>
            The TextBlock containing the integer as a label.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.MilLabels.GenerateWeather(System.String,System.Collections.Generic.IDictionary{System.String,System.String},MilSym.MilSymbol.MilLabels.AddChild)">
            <summary>
            Generate the labels for the single point weather symbology.
            </summary>
            <param name="symbolCode">
            The weather symbol code.
            </param>
            <param name="labels">
            The dictionary of labels to be displayed with the weather symbology.
            </param>
            <param name="addChild">
            The delegate that will actually add the child to the UIElement.
            </param>
        </member>
        <member name="M:MilSym.MilSymbol.MilLabels.GenerateSingleLabel(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Double,System.Double,System.Double,System.Double,System.Windows.Style,MilSym.MilSymbol.MilLabels.AddChild)">
            <summary>
            Adds a label to a UIElement at a given offset based on the text width and height.
            </summary>
            <param name="labels">
            The dictionary of labels containing the label to render.
            </param>
            <param name="match">
            The key to the label to render.
            </param>
            <param name="locationX">
            The x coordinate of where to place the label.
            </param>
            <param name="locationY">
            The y coordinate of where to place the label.
            </param>
            <param name="multiplierX">
            The x multiplier to apply to the label's width to further offset the label.
            </param>
            <param name="multiplierY">
            The y multiplier to apply to the label's height to further offset the label.
            </param>
            <param name="style">
            The style with which to render the label.
            </param>
            <param name="addChild">
            The delegate that will actually render the label into the UIElement.
            </param>
            <returns>
            The TextBlock containing the rendered lablel.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.MilLabels.SetTopLeft(System.Windows.Controls.TextBlock,System.Double,System.Double)">
            <summary>
            Helper method to set the x and y coordinates for a TextBlock
            </summary>
            <param name="tb">
            The TextBlock on which to set the x and y coordinates.
            </param>
            <param name="x">
            The x coordinate.
            </param>
            <param name="y">
            The y coordinate.
            </param>
        </member>
        <member name="M:MilSym.MilSymbol.MilLabels.GenerateTacticalGraphics(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Windows.Style,MilSym.MilSymbol.MilLabels.AddChild)">
            <summary>
            Generate the labels for single point technical graphics.
            </summary>
            <param name="symbolCode">
            The symbol code for the technical graphic.
            </param>
            <param name="labels">
            The dictionary of labels for the technical graphic.
            </param>
            <param name="style">
            The style for the labels.
            </param>
            <param name="addChild">
            The delegate that actually adds the label to the UIElement.
            </param>
        </member>
        <member name="M:MilSym.MilSymbol.MilLabels.SetSingleProperty(System.Windows.DependencyProperty,System.Object,System.Windows.Style[]@)">
            <summary>
            Set one attribute value for the labels affected by the symbols label style.
            </summary>
            <param name="dp">
            The dependency property to set.
            </param>
            <param name="o">
            The value to set for the dependency property.
            </param>
            <param name="styles">
            The styles for which to set the dependency property.
            </param>
        </member>
        <member name="M:MilSym.MilSymbol.MilLabels.CheckValidity(System.String[])">
            <summary>
            Check to make sure that all label names are valid - as listed in MIL-STD 2525C.
            </summary>
            <param name="bits">
            The array of label names to check.
            </param>
            <returns>
            A boolean to indicate whether the passed in labels are valid.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.MilLabels.GenerateArrowPoints(System.Double,System.Double)">
            <summary>
            Generates points for an arrow assuming a 10-pixel wide line (unscaled value).
            </summary>
            <param name="off">The pixel distance down from the center of the symbol to the start of the arrow</param>
            <param name="angle">The arrow angle measured clockwise from true north</param>
            <returns>An array of points that make up the arrow</returns>
        </member>
        <member name="M:MilSym.MilSymbol.MilLabels.ProcessLabels(System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Windows.Controls.TextBlock,System.Boolean@)">
            <summary>
            Process a set of labels into a TextBlock.
            </summary>
            <param name="labels">
            A dictionary of the labels to be processed.
            </param>
            <param name="skip">
            Whether or not to return after generating the first line.
            </param>
            <param name="choices">
            The choice of keys for labels are to be generated.
            </param>
            <param name="tb">
            The TextBlock to which the labels are to be added.
            </param>
            <param name="gotLine">
            Whether or not an entire line was generated, including a line break.
            </param>
        </member>
        <member name="M:MilSym.MilSymbol.MilLabels.TruncateNewLines(System.Windows.Controls.TextBlock)">
            <summary>
            Clean the line breaks off the end of the InLines.
            </summary>
            <param name="tb">
            The TextBlock from which the line breaks should be removed.
            </param>
        </member>
        <member name="M:MilSym.MilSymbol.MilLabels.TacticalGraphicsPointLabels(System.Collections.Generic.IDictionary{System.String,System.String},MilSym.MilSymbol.MilLabels.AddChild,System.Collections.Generic.IEnumerable{System.String},System.Windows.Style)">
            <summary>
            Generate the labels for a tactical graphic point symbol.
            </summary>
            <param name="labels">
            The dictionary containing the labels to be generated for the point symbol.
            </param>
            <param name="addChild">
            The delegate to actually add the labels.
            </param>
            <param name="matches">
            The list of keys for the labels to be generated.
            </param>
            <param name="style">
            The style for generating the labels.
            </param>
        </member>
        <member name="T:MilSym.MilSymbol.MilLabels.AddChild">
            <summary>
            A delegate for adding a string to a child element.
            </summary>
            <param name="name">
            The string to be added to the child element.
            </param>
            <param name="ue">
            The child element to contain the string.
            </param>
        </member>
        <member name="P:MilSym.MilSymbol.IMilSymbol.Bounds">
            <summary>
            Gets Bounds which defines the bounding rectangle 
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.IMilSymbol.Scale">
            <summary>
            Gets or sets the scale with which to render the symbol. The default
            Scale of 1.0 is rather large (approximately 300x300).
            In practice a Scale of 0.1 to 0.2 is effective. When
            symbols are rendered in a browser that supports magnification
            it is possible to change the zoom factor to see more detail.
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.IMilSymbol.Angle">
            <summary>
            Gets or sets the rotation angle for the current symbol. The standard 
            severely limits the occasions when rotating a symbol is
            allowed so this option should be used with caution.
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.IMilSymbol.LabelC">
            <summary>
            Gets or sets label C - quantity 
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.IMilSymbol.LabelF">
            <summary>
            Gets or sets label F where + => reinforced, - => reduced, ± => reinforced and reduced
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.IMilSymbol.LabelG">
            <summary>
            Gets or sets label G - staff comments
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.IMilSymbol.LabelH">
            <summary>
            Gets or sets label H - additional informmation
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.IMilSymbol.LabelH1">
            <summary>
            Gets or sets label H1 - additional informmation
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.IMilSymbol.LabelJ">
            <summary>
            Gets or sets label J - evaluation (reliability plus credibility) 
              A-completely reliable           B-usually reliable    C-fairly reliable
              D-not usually reliable          E-unreliable          F-reliability cannot be judged
              1-confirmed by other sources    2-probably true       3-possibly true
              4-doubtfully true               5-improbable          6-truth cannot be judged
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.IMilSymbol.LabelK">
            <summary>
            Gets or sets label K - combat effectiveness
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.IMilSymbol.LabelL">
            <summary>
            Gets or sets label L - signature equipment (! indicates detectable electronic signatures)
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.IMilSymbol.LabelM">
            <summary>
            Gets or sets label M - higher formation (number/title of higher commannd, Roman numerals designate corps)
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.IMilSymbol.LabelN">
            <summary>
            Gets or sets label N - enemy (ENY) for equipment
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.IMilSymbol.LabelP">
            <summary>
            Gets or sets label P - IFF/SIF indentification modes and codes
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.IMilSymbol.LabelQ">
            <summary>
            Gets or sets label Q - degrees measured clockwise from true north 
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.IMilSymbol.LabelT">
            <summary>
            Gets or sets label T - unique designation (acquisition nummber when used in SIGINT)
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.IMilSymbol.LabelV">
            <summary>
            Gets or sets label V - equipment type
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.IMilSymbol.LabelW">
            <summary>
            Gets or sets label W - date/time as DDHHMMSSZMONYYYY or O/O
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.IMilSymbol.LabelW1">
            <summary>
            Gets or sets label W1 - date/time as DDHHMMSSZMONYYYY or O/O
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.IMilSymbol.LabelX">
            <summary>
             Gets or sets label X - altitude or depth
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.IMilSymbol.LabelY">
            <summary>
            Gets or sets label Y - location (DMS, UTM, or MGRS)
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.IMilSymbol.LabelZ">
            <summary>
            Gets or sets label Z - speed
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.IMilSymbol.LabelAA">
            <summary>
            Gets or sets label AA - name of special C2 headquarters
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.IMilSymbol.SymbolCode">
            <summary>
            Gets or sets the symbol code property for the current military symbol.
            Valid symbol codes are fully defined by the MIL-STD 2525C specification.
            As of this writing that specification is the first reference at the Wikipedia
            link http://en.wikipedia.org/wiki/Military_symbology.
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.IMilSymbol.LabelStyle">
            <summary>
            Gets or sets the label style property for the current military symbol.
            Currently on the FontFamily, FontSize, FontWeight, and Foreground properties are used.
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.IMilSymbol.LabelString">
            <summary>
            Gets or sets this write-only string property to provide an easy way to set
            multiple labels at one time. The syntax is
            "label=value;label=value;..." where '=' and ';' can be
            any two characters that are ONLY used as separators in the
            string. It is also possible to use the same character for both
            '=' and ';' with a subsequent loss of readability.
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.IMilSymbol.LineBrush">
            <summary>
            Gets or sets the brush for drawing the outline of a symbol, typically black and either solid or dashed.
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.IMilSymbol.FillBrush">
            <summary>
            Gets or sets the brush for drawing the background of a symbol, typically dependent on the symbol's standard identity (aka affiliation).
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.IMilSymbol.OverrideFillBrush">
            <summary>
            The brush used that overrides fill colors of symbols that are always the same color otherwise. Will not affect symbols that change color based on
            affiliation.
            </summary>
        </member>
        <member name="T:MilSym.MilSymbol.MilSymbol">
            <summary>
            The MilSymbol class is the only class of interest for
            most developers who wish to plot military symbology.
            Its various methods support any valid, and some invalid,
            symbol codes (once fully implemented). Labels
            can be specified as well as symbol scales and brushes to use
            for rendering the symbol's frame. Since MilSymbol extends
            Canvas it can be used anywhere that a Canvas can be used.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbol.LabelAAProperty">
            <summary>
            The AA label as defined in MIL-STD 2525C.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbol.LabelCProperty">
            <summary>
            The C label as defined in MIL-STD 2525C.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbol.LabelFProperty">
            <summary>
            The F label as defined in MIL-STD 2525C.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbol.LabelGProperty">
            <summary>
            The G label as defined in MIL-STD 2525C.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbol.LabelHProperty">
            <summary>
            The H label as defined in MIL-STD 2525C.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbol.LabelH1Property">
            <summary>
            The H1 label as defined in MIL-STD 2525C.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbol.LabelJProperty">
            <summary>
            The J label as defined in MIL-STD 2525C.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbol.LabelKProperty">
            <summary>
            The K label as defined in MIL-STD 2525C.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbol.LabelLProperty">
            <summary>
            The L label as defined in MIL-STD 2525C.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbol.LabelMProperty">
            <summary>
            The M label as defined in MIL-STD 2525C.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbol.LabelNProperty">
            <summary>
            The N label as defined in MIL-STD 2525C.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbol.LabelPProperty">
            <summary>
            The P label as defined in MIL-STD 2525C.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbol.LabelQProperty">
            <summary>
            The Q label as defined in MIL-STD 2525C.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbol.LabelTProperty">
            <summary>
            The T label as defined in MIL-STD 2525C.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbol.LabelVProperty">
            <summary>
            The V label as defined in MIL-STD 2525C.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbol.LabelWProperty">
            <summary>
            The W label as defined in MIL-STD 2525C.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbol.LabelW1Property">
            <summary>
            The W1 label as defined in MIL-STD 2525C.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbol.LabelXProperty">
            <summary>
            The X label as defined in MIL-STD 2525C.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbol.LabelYProperty">
            <summary>
            The Y label as defined in MIL-STD 2525C.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbol.LabelZProperty">
            <summary>
            The Z label as defined in MIL-STD 2525C.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbol.Dependencies">
            <summary>
            A dictionary that maps the graphical element for a label to the MIL-STD 2525C designation for that label.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbol.AngleProperty">
            <summary>
            The rotation angle (in degrees measured clockwise from true north) at which to display the symbol. 
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbol.FillBrushProperty">
            <summary>
            The brush used to fill the symbol's background.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbol.OverrideFillBrushProperty">
            <summary>
            The brush used to fill the symbol's background.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbol.LabelStringProperty">
            <summary>
            A single string potentially representing multuple label properties.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbol.LabelStyleProperty">
            <summary>
            The style to apply to the labels for the symbol.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbol.LineBrushProperty">
            <summary>
            The brush to be used when rendering the outline of the symbol.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbol.ScaleProperty">
            <summary>
            The relative size of the symbol.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbol.SymbolCodeProperty">
            <summary>
            The code for the symbol as defined in MIL-STD 2525C.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbol.elements">
            <summary>
            A convenience dictionary that tracks elements with a label that can be used to replace that
            labelled portion of the symbol following a change.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbol.suppressRefresh">
            <summary>
            Flag used to indicate whether or not it is acceptable to redraw the symbol.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbol.bounds">
            <summary>
            The backing store variable for Bounds
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbol.high">
            <summary>
            How high is the top of the symbol after decoration?
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbol.labels">
            <summary>
            The dictionary that maps the label name (as defined in MIL-STD 2525C) to the label contents.
            </summary>
        </member>
        <member name="M:MilSym.MilSymbol.MilSymbol.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MilSym.MilSymbol.MilSymbol"/> class.
            </summary>
        </member>
        <member name="M:MilSym.MilSymbol.MilSymbol.#ctor(System.String,System.Double,System.String)">
            <summary>
            Initializes a new instance of the MilSymbol class, a canvas representing a military symbol code
            </summary>
            <param name="symbolCode">15 character code from the 2525C symbology manual</param>
            <param name="scale">the scale of the entity as a fraction of the default size (about 300x300 pixels)</param>
            <param name="labelsIn">a string representing an array of labels to be displayed near the symbol, e.g., "X=100;H=a string"</param>
        </member>
        <member name="M:MilSym.MilSymbol.MilSymbol.#ctor(System.String,System.Double)">
            <summary>
            Initializes a new instance of the MilSymbol class, a canvas representing a military symbol code
            </summary>
            <param name="symbolCode">15 character code from the 2525C symbology manual</param>
            <param name="scaleIn">the scale of the entity as a fraction of the default size (about 300x300 pixels)</param>
        </member>
        <member name="M:MilSym.MilSymbol.MilSymbol.#ctor(System.String,System.Double,System.String,System.Windows.Media.Brush,System.Windows.Media.Brush,System.Windows.Style,System.Double)">
            <summary>
            Initializes a new instance of the MilSymbol class, a canvas representing a military symbol code
            </summary>
            <param name="symbolCode">The 15 character code from the 2525C symbology manual</param>
            <param name="scale">The scale of the entity as a fraction of the default size (about 300x300 pixels)</param>
            <param name="labelString">A string representing an array of labels to be displayed near the symbol, e.g., "X=100;H=a string"</param>
            <param name="lineBrush">A brush to color the base symbol outline </param>
            <param name="fillBrush">A brush to color the base symbol background</param>
            <param name="labelStyle">A style to use for labels</param>
            <param name="angle">The clockwise rotation angle for the symbol, in degrees</param>
        </member>
        <member name="M:MilSym.MilSymbol.MilSymbol.NotifyPropertyChanged(System.String)">
            <summary>
            Notify property changed.
            </summary>
            <param name="propertyName">
            The property name that changed.
            </param>
        </member>
        <member name="M:MilSym.MilSymbol.MilSymbol.AddChild(System.String,System.Windows.UIElement)">
            <summary>
            Tracks which elements have been plotted vis a vis a military symbol.
            In the future, we'll be smart about which ones to update when
            bound data changes.
            </summary>
            <param name="name">The label to apply to the UIElement.</param>
            <param name="ue">The symbol's UIElement to add/replace/update.</param>
        </member>
        <member name="M:MilSym.MilSymbol.MilSymbol.OnTransformChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Event handler for when the symbols transform matrix needs changing.
            </summary>
            <param name="dp">
            The symbol whose transform needs changing.
            </param>
            <param name="ea">
            This parameter is ignored.
            </param>
        </member>
        <member name="M:MilSym.MilSymbol.MilSymbol.OnLabelsChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Event handler for when the symbols labels need changing.
            </summary>
            <param name="dp">
            The symbol whose labels need changing.
            </param>
            <param name="ea">
            The ea.Property value is the key into Dependencies for which label changed.
            </param>
        </member>
        <member name="M:MilSym.MilSymbol.MilSymbol.OnSymbolChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Event handler for when the symbol has changed.
            </summary>
            <param name="dp">
            The symbol that has changed.
            </param>
            <param name="ea">
            This parameter is ignored.
            </param>
        </member>
        <member name="M:MilSym.MilSymbol.MilSymbol.OnLabelStyleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Event handler for when the label style has changed.
            </summary>
            <param name="dp">
            The symbol that has changed.
            </param>
            <param name="ea">
            This parameter is ignored.
            </param>
        </member>
        <member name="M:MilSym.MilSymbol.MilSymbol.OnLabelStringChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Event handler for when the label string has changed.
            </summary>
            <param name="dp">
            The symbol whose label string has changed.
            </param>
            <param name="ea">
            This parameter is ignored.
            </param>
        </member>
        <member name="M:MilSym.MilSymbol.MilSymbol.SetTransform">
            <summary>
            Generates the rotate and scale transforms upon demand, adding them to the symbol.
            </summary>
        </member>
        <member name="M:MilSym.MilSymbol.MilSymbol.GenerateLabels(System.Collections.Generic.IList{System.Windows.Style})">
            <summary>
            Selectively (re)generates labels.
            </summary>
            <param name="styles">
            An optional list of styles to apply to the labels.
            </param>
        </member>
        <member name="M:MilSym.MilSymbol.MilSymbol.GenerateSymbol">
            <summary>
            Always generates the entire symbol.
            The symbol code should not change very often.
            </summary>
        </member>
        <member name="E:MilSym.MilSymbol.MilSymbol.PropertyChanged">
            <summary>
            The PropertyChanged event handler.
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.MilSymbol.IsDirty">
            <summary>
            Gets or sets a value indicating whether the symbol .
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.MilSymbol.Bounds">
            <summary>
            Gets Bounds which defines the bounding rectangle 
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.MilSymbol.Scale">
            <summary>
            Gets or sets the scale with which to render the symbol. The default
            Scale of 1.0 is rather large (approximately 300x300).
            In practice a Scale of 0.1 to 0.2 is effective. When
            symbols are rendered in a browser that supports magnification
            it is possible to change the zoom factor to see more detail.
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.MilSymbol.Angle">
            <summary>
            Gets or sets the rotation angle for the current symbol. The standard 
            severely limits the occasions when rotating a symbol is
            allowed so this option should be used with caution.
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.MilSymbol.LabelC">
            <summary>
            Gets or sets label C - quantity 
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.MilSymbol.LabelF">
            <summary>
            Gets or sets label F where + => reinforced, - => reduced, ± => reinforced and reduced
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.MilSymbol.LabelG">
            <summary>
            Gets or sets label G - staff comments
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.MilSymbol.LabelH">
            <summary>
            Gets or sets label H - additional informmation
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.MilSymbol.LabelH1">
            <summary>
            Gets or sets label H1 - additional informmation
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.MilSymbol.LabelJ">
            <summary>
            Gets or sets label J - evaluation (reliability plus credibility) 
              A-completely reliable           B-usually reliable    C-fairly reliable
              D-not usually reliable          E-unreliable          F-reliability cannot be judged
              1-confirmed by other sources    2-probably true       3-possibly true
              4-doubtfully true               5-improbable          6-truth cannot be judged
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.MilSymbol.LabelK">
            <summary>
            Gets or sets label K - combat effectiveness
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.MilSymbol.LabelL">
            <summary>
            Gets or sets label L - signature equipment (! indicates detectable electronic signatures)
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.MilSymbol.LabelM">
            <summary>
            Gets or sets label M - higher formation (number/title of higher commannd, Roman numerals designate corps)
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.MilSymbol.LabelN">
            <summary>
            Gets or sets label N - enemy (ENY) for equipment
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.MilSymbol.LabelP">
            <summary>
            Gets or sets label P - IFF/SIF indentification modes and codes
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.MilSymbol.LabelQ">
            <summary>
            Gets or sets label Q - degrees measured clockwise from true north 
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.MilSymbol.LabelT">
            <summary>
            Gets or sets label T - unique designation (acquisition nummber when used in SIGINT)
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.MilSymbol.LabelV">
            <summary>
            Gets or sets label V - equipment type
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.MilSymbol.LabelW">
            <summary>
            Gets or sets label W - date/time as DDHHMMSSZMONYYYY or O/O
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.MilSymbol.LabelW1">
            <summary>
            Gets or sets label W1 - date/time as DDHHMMSSZMONYYYY or O/O
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.MilSymbol.LabelX">
            <summary>
             Gets or sets label X - altitude or depth
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.MilSymbol.LabelY">
            <summary>
            Gets or sets label Y - location (DMS, UTM, or MGRS)
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.MilSymbol.LabelZ">
            <summary>
            Gets or sets label Z - speed
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.MilSymbol.LabelAA">
            <summary>
            Gets or sets label AA - name of special C2 headquarters
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.MilSymbol.SymbolCode">
            <summary>
            Gets or sets the symbol code property for the current military symbol.
            Valid symbol codes are fully defined by the MIL-STD 2525C specification.
            As of this writing that specification is the first reference at the Wikipedia
            link http://en.wikipedia.org/wiki/Military_symbology.
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.MilSymbol.LabelStyle">
            <summary>
            Gets or sets the label style property for the current military symbol.
            Currently on the FontFamily, FontSize, FontWeight, and Foreground properties are used.
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.MilSymbol.LabelString">
            <summary>
            Gets or sets this write-only string property to provide an easy way to set
            multiple labels at one time. The syntax is
            "label=value;label=value;..." where '=' and ';' can be
            any two characters that are ONLY used as separators in the
            string. It is also possible to use the same character for both
            '=' and ';' with a subsequent loss of readability.
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.MilSymbol.LineBrush">
            <summary>
            Gets or sets the brush for drawing the outline of a symbol, typically black and either solid or dashed.
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.MilSymbol.FillBrush">
            <summary>
            Gets or sets the brush for drawing the background of a symbol, typically dependent on the symbol's standard identity (aka affiliation).
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.MilSymbol.Empty">
            <summary>
            Gets a value indicating whether the requested military symbol is
            not available for whatever reason.
            If no symbol is generated, the Empty flag will be set to
            true and an error message will potentially be
            generated on the console log.
            </summary>
            <returns>true if there is no symbol yet</returns>
        </member>
        <member name="P:MilSym.MilSymbol.MilSymbol.BaseRect">
            <summary>
            Gets BaseRect, the base rectangle for the code symbol - gets used a lot for symbol decorations.
            </summary>
        </member>
        <member name="T:MilSym.MilSymbol.MilSymbolBase">
            <summary>
            The core code for identifying the right base symbol for a symbol defined by MIL-STD 2525C
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbolBase.empty">
            <summary>
            Whether or not the symbol base is empty after going to the resource dictionary.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbolBase.fill">
            <summary>
            The framed fill style (works for unframed too).
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbolBase.overrideFill">
            <summary>
            Overrides color in symbols.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbolBase.line">
            <summary>
            The framed line style.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbolBase.lineFill">
            <summary>
            The framed line and fill style.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbolBase.unframedLine">
            <summary>
            The unframed line style.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbolBase.unframedLineFill">
            <summary>
            The unframed line and fill style.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbolBase.needDashed">
            <summary>
            The backing store for NeedDashed.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbolBase.brush">
            <summary>
            The fill brush.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.MilSymbolBase.lineThickness">
            <summary>
            The backing store for LineThickness, defaults to 3.0
            </summary>
        </member>
        <member name="M:MilSym.MilSymbol.MilSymbolBase.#ctor(System.String,System.Windows.Media.Brush,System.Windows.Media.Brush,System.Windows.Media.Brush)">
            <summary>
            Initializes a new instance of the <see cref="T:MilSym.MilSymbol.MilSymbolBase"/> class.
            </summary>
            <param name="symbolCode">
            The symbol code for this symbol.
            </param>
            <param name="lineBrush">
            An optional line brush for outlining the symbol.
            </param>
            <param name="fillBrush">
            An optional fill brush for filling the symbol's background.
            </param>
        </member>
        <member name="M:MilSym.MilSymbol.MilSymbolBase.CodeToStencil(System.String)">
            <summary>
            Takes the symbol code and matches one of the stencils in the resource dictionary.
            </summary>
            <param name="symbolCode">
            The symbol code for which to look up the stencil.
            </param>
            <returns>
            The string that should be used to get the ResourceDictionary entry for this symbol.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.MilSymbolBase.NotifyPropertyChanged(System.String)">
            <summary>
            Notify property changed.
            </summary>
            <param name="propertyName">
            The property name that changed.
            </param>
        </member>
        <member name="M:MilSym.MilSymbol.MilSymbolBase.GenerateSpace(System.String)">
            <summary>
            Adds the black ribbon at the top of the symbol for the standard identity "Space".
            </summary>
            <param name="symbolCode">The symbol code for the space entity.</param>
            <returns>The shape representing the black ribbon overlay for a space entity.</returns>
        </member>
        <member name="M:MilSym.MilSymbol.MilSymbolBase.GetAnticipated(System.Windows.Style)">
            <summary>
            Since we can't reuse this style in the visual tree, because of StrokeDashArrayProperty, we need to
            generate a new one on demand, as this method does.
            </summary>
            <param name="baseStyle">
            The base style for which to generate the anticipated style.
            </param>
            <returns>
            The new Style with dashed instead of solid lines.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.MilSymbolBase.GenerateBlackSpline(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Generates a black spline outline, typically used to overlay on a space element.
            </summary>
            <param name="p0">
            The first point for the spline.
            </param>
            <param name="p1">
            The second point for the spline.
            </param>
            <param name="p2">
            The third point for the spline.
            </param>
            <param name="p3">
            The fourth point for the spline.
            </param>
            <returns>
            A Path that incorporates the spline.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.MilSymbolBase.SetLimits(System.String)">
            <summary>
            Sets the width and height of the base symbol based on the symbol code, 
            as well as the top and left properties,
            checking first to see if the canvas already has such limits.
            </summary>
            <param name="symbolCode">
            The symbol code for the symbol.
            </param>
        </member>
        <member name="M:MilSym.MilSymbol.MilSymbolBase.SetUnframedLines(System.Windows.Media.Brush)">
            <summary>
            Sets the brush for unframed lines.
            </summary>
            <param name="lineBrush">
            The line brush to use for unframed lines.
            </param>
        </member>
        <member name="M:MilSym.MilSymbol.MilSymbolBase.SetUnframedLineFills(System.Windows.Media.Brush)">
            <summary>
            Sets the brush for unframed lines and fills
            </summary>
            <param name="fillBrush">
            The fill brush to use for unframed lines and fills.
            </param>
        </member>
        <member name="M:MilSym.MilSymbol.MilSymbolBase.SetLines(System.Windows.Media.Brush)">
            <summary>
            Sets the standard line brush.
            </summary>
            <param name="lineBrush">
            The line brush to be used as the standard.
            </param>
        </member>
        <member name="M:MilSym.MilSymbol.MilSymbolBase.SetLineFills(System.Windows.Media.Brush,System.Windows.Media.Brush)">
            <summary>
            Sets the standard line and fill brush.
            </summary>
            <param name="lineBrush">
            The line brush to be used for lines.
            </param>
            <param name="fillBrush">
            The fill brush to be used for fills.
            </param>
        </member>
        <member name="E:MilSym.MilSymbol.MilSymbolBase.PropertyChanged">
            <summary>
            The PropertyChanged event handler.
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.MilSymbolBase.Brush">
            <summary>
            Gets the current default brush for drawing regular framed symbol lines.
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.MilSymbolBase.UnframedLine">
            <summary>
            Gets the current default brush for drawing unframed symbol lines.
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.MilSymbolBase.Fill">
            <summary>
            Gets the current default fill style for framed symbols.
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.MilSymbolBase.Line">
            <summary>
            Gets the current default line style for framed symbols.
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.MilSymbolBase.UnframedLineFill">
            <summary>
            Gets the current default line and fill style for unframed symbols.
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.MilSymbolBase.LineFill">
            <summary>
            Gets the current default line and fill styles for framed symbols.
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.MilSymbolBase.LineThickness">
            <summary>
            Gets or sets the line thickness for the base symbol.
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.MilSymbolBase.NeedDashed">
            <summary>
            Sets a value indicating whether we need a dashed line style for unframed.
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.MilSymbolBase.Empty">
            <summary>
            Gets a value indicating whether the base symbol is Empty (missing).
            </summary>
        </member>
        <member name="T:MilSym.MilSymbol.Schemas.BattleDimension">
            <summary>
            Support methods for managing the battle dimension code portion of symbols in MIL STD-2525C.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.BattleDimension.Index">
            <summary>
            The symbol code index for the battle dimension
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.BattleDimension.Air">
            <summary>
            Air character.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.BattleDimension.Ground">
            <summary>
            Ground character.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.BattleDimension.Other">
            <summary>
            Other character.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.BattleDimension.SeaSurface">
            <summary>
            Sea surface character.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.BattleDimension.Space">
            <summary>
            Space character.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.BattleDimension.SpecialOperationsForce">
            <summary>
            Special operations force character.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.BattleDimension.Subsurface">
            <summary>
            Subsurface character.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.BattleDimension.Unknown">
            <summary>
            Unknown character.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.BattleDimension.Names">
            <summary>
            Dictionary mapping of character values to friendly names.
            </summary>
        </member>
        <member name="M:MilSym.MilSymbol.Schemas.BattleDimension.GetCode(System.String)">
            <summary>
            Get the battle dimension code from the symbol code.
            </summary>
            <param name="symbolCode">The symbol code.</param>
            <returns>The battle dimension code.</returns>
        </member>
        <member name="M:MilSym.MilSymbol.Schemas.BattleDimension.GetName(System.String)">
            <summary>
            Get a friendly name for the battle dimension.
            </summary>
            <param name="symbolCode">The symbol code.</param>
            <returns>A friendly name for the battle dimension.</returns>
        </member>
        <member name="T:MilSym.MilSymbol.Schemas.Category">
            <summary>
            Support methods for managing the Category code portion of symbols in MIL STD-2525C
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Category.Index">
            <summary>
            The index of the first character in the Modifier code
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Category.FeintDummy">
            <summary>
            The character value for the category code Dummy
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Category.FeintDummyHeadquarters">
            <summary>
            The character value for the category code Feint Dummy Headquarters
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Category.FeintDummyTaskForce">
            <summary>
            The character value for the category code Feint Dummy/Task Force
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Category.FeintDummyTaskForceHeadquarters">
            <summary>
            The character value for the category code Feint Dummy/Task Force Headquarters
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Category.Headquarters">
            <summary>
            The character value for the category code Headquarters
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Category.Installation">
            <summary>
            The character value for the category code Installation
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Category.Mobility">
            <summary>
            The character value for the category code Mobility
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Category.None">
            <summary>
            Empty character for modifier code
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Category.TaskForce">
            <summary>
            The character value for the category code Task Force
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Category.TaskForceHeadquarters">
            <summary>
            The character value for the category code Task Force Headquarters
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Category.Towed">
            <summary>
            The character value for the category code Towed array
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Category.Names">
            <summary>
            A mapping of the character codes to more meaningful strings
            </summary>
        </member>
        <member name="M:MilSym.MilSymbol.Schemas.Category.GetCode(System.String)">
            <summary>
            Get the first character of the Modifier code 
            Use CombinedModifierCode.GetCode to get both characters.
            </summary>
            <param name="symbolCode">the symbol code</param>
            <returns>the first character of the Modifier code</returns>
        </member>
        <member name="M:MilSym.MilSymbol.Schemas.Category.GetName(System.String)">
            <summary>
            Get the friendly name for the first character of the modifier code.
            Use CombinedModifierCode.GetName to get the friendly name for both characters.
            </summary>
            <param name="symbolCode">the symbol code</param>
            <returns>a friendly name for the first character of the modifier code</returns>
        </member>
        <member name="T:MilSym.MilSymbol.Schemas.CategoryBattleDimension">
            <summary>
            Support methods for managing the CategoryBattleDimension portion of symbols in MIL STD-2525C
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CategoryBattleDimension.EmInfrastructure">
            <summary>
            A unique enumerable value representing Emergency Management Infrastructure
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CategoryBattleDimension.EmIncident">
            <summary>
            A unique enumerable value representing Emergency Management Incident
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CategoryBattleDimension.EmNaturalEvents">
            <summary>
            A unique enumerable value representing Emergency Management Natural events
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CategoryBattleDimension.EmOperations">
            <summary>
            A unique enumerable value representing Emergency Management Operations
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CategoryBattleDimension.MetocAtmospheric">
            <summary>
            A unique enumerable value representing Meteorological Atmospheric
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CategoryBattleDimension.MetocOceanic">
            <summary>
            A unique enumerable value representing Meteorological Oceanic
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CategoryBattleDimension.MetocSpace">
            <summary>
            A unique enumerable value representing Meteorological Space
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CategoryBattleDimension.SoNonMilitaryGroupOrOrganization">
            <summary>
            A unique enumerable value representing Stablity Operations Non military group or organization
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CategoryBattleDimension.SoItems">
            <summary>
            A unique enumerable value representing Stablity Operations Items
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CategoryBattleDimension.SoLocations">
            <summary>
            A unique enumerable value representing Stablity Operations Locations
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CategoryBattleDimension.SoOperations">
            <summary>
            A unique enumerable value representing Stablity Operations Operations
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CategoryBattleDimension.SoIndividual">
            <summary>
            A unique enumerable value representing Stablity Operations Individual
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CategoryBattleDimension.SoRape">
            <summary>
            A unique enumerable value representing Stablity Operations Rape
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CategoryBattleDimension.SoViolentActivities">
            <summary>
            A unique enumerable value representing Stablity Operations Violent activities
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CategoryBattleDimension.TgFireSupport">
            <summary>
            A unique enumerable value representing Tactical Graphics Fire support
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CategoryBattleDimension.TgC2GeneralManeuver">
            <summary>
            A unique enumerable value representing Tactical Graphics Commmand/Control and general maneuver
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CategoryBattleDimension.TgMobilitySurvivability">
            <summary>
            A unique enumerable value representing Tactical Graphics Mobility surviability
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CategoryBattleDimension.TgOther">
            <summary>
            A unique enumerable value representing Tactical Graphics Other
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CategoryBattleDimension.TgCombatServiceSupport">
            <summary>
            A unique enumerable value representing Tactical Graphics Combat service support
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CategoryBattleDimension.TgTasks">
            <summary>
            A unique enumerable value representing Tactical Graphics Tasks
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CategoryBattleDimension.BdAir">
            <summary>
            A unique enumerable value representing Battle Dimension Air
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CategoryBattleDimension.BdGround">
            <summary>
            A unique enumerable value representing Battle Dimension Ground
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CategoryBattleDimension.BdOther">
            <summary>
            A unique enumerable value representing Battle Dimension Other
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CategoryBattleDimension.BdSeaSurface">
            <summary>
            A unique enumerable value representing Battle Dimension Sea surface
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CategoryBattleDimension.BdSpace">
            <summary>
            A unique enumerable value representing Battle Dimension Space
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CategoryBattleDimension.BdSpecialOperationsForce">
            <summary>
            A unique enumerable value representing Battle Dimension Special operations force
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CategoryBattleDimension.BdSubsurface">
            <summary>
            A unique enumerable value representing Battle Dimension Subsurface
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CategoryBattleDimension.BdUnknown">
            <summary>
            A unique enumerable value representing Battle Dimension Unknown
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CategoryBattleDimension.BdIndex">
            <summary>
            Location of classical battle dimension in symbol code
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CategoryBattleDimension.EmIndex">
            <summary>
            Location of emergency management battle dimension category in symbol code
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CategoryBattleDimension.MetocIndex">
            <summary>
            Location of meterology battle dimension category in symbol code
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CategoryBattleDimension.SoIndex">
            <summary>
            Location of stability operations battle dimension category in symbol code
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CategoryBattleDimension.TgIndex">
            <summary>
            Location of tactical graphics battle dimension category in symbol code
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CategoryBattleDimension.Ems">
            <summary>
            Dictionary mapping symbol codes to enumerable values
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CategoryBattleDimension.EmNames">
            <summary>
            Dictionary mapping of enumerated values to strings
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CategoryBattleDimension.Bds">
            <summary>
            Dictionary mapping symbol codes to enumerable values
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CategoryBattleDimension.BdNames">
            <summary>
            Dictionary mapping of enumerated values to strings
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CategoryBattleDimension.Tgs">
            <summary>
            Dictionary mapping symbol codes to enumerable values
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CategoryBattleDimension.TgNames">
            <summary>
            Dictionary mapping of enumerated values to strings
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CategoryBattleDimension.Sos">
            <summary>
            Dictionary mapping symbol codes to enumerable values
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CategoryBattleDimension.SoNames">
            <summary>
            Dictionary mapping of enumerated values to strings
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CategoryBattleDimension.Metocs">
            <summary>
            Dictionary mapping symbol codes to enumerable values
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CategoryBattleDimension.MetocNames">
            <summary>
            Dictionary mapping of enumerated values to strings
            </summary>
        </member>
        <member name="M:MilSym.MilSymbol.Schemas.CategoryBattleDimension.GetCode(System.String)">
            <summary>
            Get the battle dimension code from the symbol code.
            </summary>
            <param name="symbolCode">the symbol code</param>
            <returns>the battle dimension code</returns>
        </member>
        <member name="M:MilSym.MilSymbol.Schemas.CategoryBattleDimension.GetName(System.String)">
            <summary>
            Get a friendly name for the battle dimension.
            </summary>
            <param name="symbolCode">the symbol code</param>
            <returns>a friendly name for the battle dimension</returns>
        </member>
        <member name="T:MilSym.MilSymbol.Schemas.CodingScheme">
            <summary>
            Support methods for managing the Coding Scheme portion of symbols in MIL STD-2525C
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CodingScheme.EmergencyManagement">
            <summary>
            Unique value for mapping Coding Scheme representing Emergency management
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CodingScheme.Intelligence">
            <summary>
            Unique value for mapping Coding Scheme representing Intelligence
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CodingScheme.StabilityOperations">
            <summary>
            Unique value for mapping Coding Scheme representing Stability operations 
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CodingScheme.TacticalGraphics">
            <summary>
            Unique value for mapping Coding Scheme representing Tactical graphics
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CodingScheme.Warfighting">
            <summary>
            Unique value for mapping Coding Scheme representing Warfighting
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CodingScheme.Weather">
            <summary>
            Unique value for mapping Coding Scheme representing Weather, also METOC
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CodingScheme.Index">
            <summary>
            The symbol code index for the coding scheme
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CodingScheme.Css">
            <summary>
            Dictionary mapping the coding scheme to unique numeric values
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CodingScheme.Names">
            <summary>
            Dictionary for mapping unique coding scheme numeric values to friendly strings
            </summary>
        </member>
        <member name="M:MilSym.MilSymbol.Schemas.CodingScheme.GetCode(System.String)">
            <summary>
            Get the symbol code's character for the coding scheme
            </summary>
            <param name="symbolCode">the symbol code</param>
            <returns>the coding scheme for the symbol code</returns>
        </member>
        <member name="M:MilSym.MilSymbol.Schemas.CodingScheme.GetName(System.String)">
            <summary>
            Get a friendly name for the coding scheme.
            </summary>
            <param name="symbolCode">the symbol code</param>
            <returns>a friendly name for the coding scheme</returns>
        </member>
        <member name="T:MilSym.MilSymbol.Schemas.CombinedModifierCode">
            <summary>
            This is an artificial class to provide a useful interface
            for a combined friendly name for a two character modifier code. Because the
            codes are so convoluted, the actual program logic uses the
            ModifierCode, Mobility, and Echelon classes instead
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.CombinedModifierCode.Index">
            <summary>
            The staring symbol index for the combined (2-character) modifier code
            </summary>
        </member>
        <member name="M:MilSym.MilSymbol.Schemas.CombinedModifierCode.GetCode(System.String)">
            <summary>
            Get the two character string that is the combined modifier code
            </summary>
            <param name="symbolCode">the symbol code</param>
            <returns>the combined two character modifier code</returns>
        </member>
        <member name="M:MilSym.MilSymbol.Schemas.CombinedModifierCode.GetName(System.String)">
            <summary>
            Get the combined modifier code for the coding scheme.
            </summary>
            <param name="symbolCode">the symbol code</param>
            <returns>a friendly name for the combined modifier code</returns>
        </member>
        <member name="T:MilSym.MilSymbol.Schemas.Countries">
            <summary>
            This is a placeholder class to return the names of the
            countries associated with the character codes.
            In the future, additional methods will return
            an icon and a brush indicative of a country's flag.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Countries.Index">
            <summary>
            The starting location in the symbol code for the two character country code 
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Countries.Names">
            <summary>
            Mapping of symbol country code to friendly nation name
            </summary>
        </member>
        <member name="M:MilSym.MilSymbol.Schemas.Countries.GetCode(System.String)">
            <summary>
            Get the two character country code for the given symbol code
            </summary>
            <param name="symbolCode">the symbol code</param>
            <returns>the two character country code for the given symbol code</returns>
        </member>
        <member name="M:MilSym.MilSymbol.Schemas.Countries.GetName(System.String)">
            <summary>
            Get the friendly name of the country code for the given symbol code
            </summary>
            <param name="symbolCode">the symbol code</param>
            <returns>a friendly name for the country code</returns>
        </member>
        <member name="T:MilSym.MilSymbol.Schemas.Echelon">
            <summary>
            Support methods for managing the Echelon portion of symbols in MIL STD-2525C
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Echelon.Army">
            <summary>
            The character echelon code for Army
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Echelon.ArmyGroupFront">
            <summary>
            The character echelon code for Army/Group/Front
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Echelon.BattalionSquadron">
            <summary>
            The character echelon code for Battalion/Squadron
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Echelon.Brigade">
            <summary>
            The character echelon code for Brigade
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Echelon.Command">
            <summary>
            The character echelon code for Command
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Echelon.CompanyBatteryTroop">
            <summary>
            The character echelon code for Company/Battery/Troop
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Echelon.CorpsMarineExpeditionaryForce">
            <summary>
            The character echelon code for Corps/Marine Expeditionary Force (MEF)
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Echelon.Division">
            <summary>
            The character echelon code for Division
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Echelon.None">
            <summary>
            The character echelon code for Null - there is no echelon code
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Echelon.PlatoonDetachment">
            <summary>
            The character echelon code for Platoon/Detachment
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Echelon.RegimentGroup">
            <summary>
            The character echelon code for Regiment/Group
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Echelon.Region">
            <summary>
            The character echelon code for Region
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Echelon.Section">
            <summary>
            The character echelon code for Section
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Echelon.Squad">
            <summary>
            The character echelon code for Squad
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Echelon.TeamCrew">
            <summary>
            The character echelon code for Team/Crew
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Echelon.Index">
            <summary>
            The symbol code index corresponding to the echelon code. 
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Echelon.Echelons">
            <summary>
            Dictionary mapping the echelon symbol codes to strings to represent echelon value graphically
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Echelon.Names">
            <summary>
            Dictionary mapping the echelon symbol codes to friendly string descriptions
            </summary>
        </member>
        <member name="M:MilSym.MilSymbol.Schemas.Echelon.GetCode(System.String)">
            <summary>
            Get the echelon code for the given symbol code.
            </summary>
            <param name="symbolCode">the symbol code</param>
            <returns>the echelon code for the given symbol code</returns>
        </member>
        <member name="M:MilSym.MilSymbol.Schemas.Echelon.GetEchelonSymbol(System.String)">
            <summary>
            Get the echelon symbol for the coding scheme.
            </summary>
            <param name="symbolCode">the symbol code</param>
            <returns>a echelon symbol for the echelon</returns>
        </member>
        <member name="M:MilSym.MilSymbol.Schemas.Echelon.GetName(System.String)">
            <summary>
            Get the echelon name for the coding scheme.
            </summary>
            <param name="symbolCode">the symbol code</param>
            <returns>a friendly name for the echelon</returns>
        </member>
        <member name="M:MilSym.MilSymbol.Schemas.Echelon.Generate(System.Double,System.String)">
            <summary>
            Generate the text block representing the possible echelon value
            </summary>
            <param name="high">how high to draw the echelon text string above the symbol</param>
            <param name="symbolCode">the symbol code so we know which echelon to use</param>
            <returns>the graphic text block representing the echelon value</returns>
        </member>
        <member name="T:MilSym.MilSymbol.Schemas.Mobility">
            <summary>
            Support methods for managing the Mobility code portion of symbols in MIL STD-2525C
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Mobility.Amphibious">
            <summary>
            The Mobility symbol code for Amphibious
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Mobility.Barge">
            <summary>
            The Mobility symbol code for Barge
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Mobility.OverSnow">
            <summary>
            The Mobility symbol code for Over snow
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Mobility.PackAnimals">
            <summary>
            The Mobility symbol code for Pack animals
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Mobility.Railway">
            <summary>
            The Mobility symbol code for Railway
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Mobility.Sled">
            <summary>
            The Mobility symbol code for Sled
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Mobility.Towed">
            <summary>
            The Mobility symbol code for Towed
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Mobility.TowedArrayLong">
            <summary>
            The Mobility symbol code for Towed array (long)
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Mobility.TowedArrayShort">
            <summary>
            The Mobility symbol code for Towed array (short)
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Mobility.Tracked">
            <summary>
            The Mobility symbol code for Tracked
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Mobility.WheeledCrossCountry">
            <summary>
            The Mobility symbol code for Wheeled - cross country
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Mobility.WheeledLimited">
            <summary>
            The Mobility symbol code for Wheeled - limited
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Mobility.WheeledTracked">
            <summary>
            The Mobility symbol code for Wheeled and tracked
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Mobility.Index">
            <summary>
            The symbol code's starting index for the two character mobility code.
            Mobility is a special case of the modifier code.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.Mobility.Names">
            <summary>
             Dictionary to map Mobility symbol codes to friendly names
            </summary>
        </member>
        <member name="M:MilSym.MilSymbol.Schemas.Mobility.GetCode(System.String)">
            <summary>
            Get the symbol code's two character mobility code.
            Mobility is a special case of the modifier code.
            </summary>
            <param name="symbolCode">the symbol code</param>
            <returns>the symbol code's two character mobility code</returns>
        </member>
        <member name="M:MilSym.MilSymbol.Schemas.Mobility.GetName(System.String)">
            <summary>
            Get the mobility code's friendly name for the symbol code.
            Mobility is a special case of the modifier code.
            </summary>
            <param name="symbolCode">the symbol code</param>
            <returns>a friendly name for the mobility code</returns>
        </member>
        <member name="M:MilSym.MilSymbol.Schemas.Mobility.IsMobility(System.String)">
            <summary>
            Determines whether a given symbol code has a non-empty mobility component
            </summary>
            <param name="symbolCode">
            The symbol code to check for mobility.
            </param>
            <returns>
            True is the symbol code contains a mobility component.
            </returns>
        </member>
        <member name="T:MilSym.MilSymbol.Schemas.ModifierCode">
            <summary>
            Support methods for managing the Modifier code portion of symbols in MIL STD-2525C
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.ModifierCode.FeintDummy">
            <summary>
            The symbol's modifier code for Feint Dummy
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.ModifierCode.FeintDummyHeadquarters">
            <summary>
            The symbol's modifier code for Feint Dummy Headquarters
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.ModifierCode.FeintDummyTaskForce">
            <summary>
            The symbol's modifier code for Feint Dummy/Task Force
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.ModifierCode.FeintDummyTaskForceHeadquarters">
            <summary>
            The symbol's modifier code for Feint Dummy/Task Force Headquarters
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.ModifierCode.Headquarters">
            <summary>
            The symbol's modifier code for Headquarters
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.ModifierCode.Installation">
            <summary>
            The symbol's modifier code for Installation
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.ModifierCode.Mobility">
            <summary>
            The symbol's modifier code for Mobility
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.ModifierCode.None">
            <summary>
            The symbol's modifier code for Empty 
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.ModifierCode.TaskForce">
            <summary>
            The symbol's modifier code for Task Force
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.ModifierCode.TaskForceHeadquarters">
            <summary>
            The symbol's modifier code for Task Force Headquarters
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.ModifierCode.Towed">
            <summary>
            The symbol's modifier code for Towed array
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.ModifierCode.Index">
            <summary>
            The index of the first character in the Modifier code
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.ModifierCode.Names">
            <summary>
            Dictionary mapping modifier codes to friendly names
            </summary>
        </member>
        <member name="M:MilSym.MilSymbol.Schemas.ModifierCode.GetCode(System.String)">
            <summary>
            Get the first character of the Modifier code 
            Use CombinedModifierCode.GetCode to get both characters.
            </summary>
            <param name="symbolCode">the symbol code</param>
            <returns>the first character of the Modifier code</returns>
        </member>
        <member name="M:MilSym.MilSymbol.Schemas.ModifierCode.GetName(System.String)">
            <summary>
            Get the friendly name for the first character of the modifier code.
            Use CombinedModifierCode.GetName to get the friendly name for both characters.
            </summary>
            <param name="symbolCode">the symbol code</param>
            <returns>a friendly name for the first character of the modifier code</returns>
        </member>
        <member name="T:MilSym.MilSymbol.Schemas.OrderOfBattle">
            <summary>
            Support methods for managing the Order of Battle code portion of symbols in MIL STD-2525C
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.OrderOfBattle.Air">
            <summary>
            The symbol's Order of Battle code for Air
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.OrderOfBattle.Civilian">
            <summary>
            The symbol's Order of Battle code for Civilian
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.OrderOfBattle.Electronic">
            <summary>
            The symbol's Order of Battle code for Electronic
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.OrderOfBattle.Ground">
            <summary>
            The symbol's Order of Battle code for Ground
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.OrderOfBattle.Maritime">
            <summary>
            The symbol's Order of Battle code for Maritime
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.OrderOfBattle.StrategicForceRelated">
            <summary>
            The symbol's Order of Battle code for Strategic force related
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.OrderOfBattle.Index">
            <summary>
            The symbol code index for the order of battle.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.OrderOfBattle.Names">
            <summary>
            Dictionary mapping Order of Battle symbol code values to friendly names
            </summary>
        </member>
        <member name="M:MilSym.MilSymbol.Schemas.OrderOfBattle.GetCode(System.String)">
            <summary>
            Get the symbol code's order of battle.
            </summary>
            <param name="symbolCode">the symbol code</param>
            <returns>the order of battle code</returns>
        </member>
        <member name="M:MilSym.MilSymbol.Schemas.OrderOfBattle.GetName(System.String)">
            <summary>
            Get the order of battle's friendly name for the given symbol code.
            </summary>
            <param name="symbolCode">the symbol code</param>
            <returns>a friendly name for the order of battle</returns>
        </member>
        <member name="T:MilSym.MilSymbol.Schemas.StandardIdentity">
            <summary>
            Support methods for managing the Standard Identity code portion of symbols in MIL STD-2525C
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.StandardIdentity.AssumedFriend">
            <summary>
            The symbol's Standard Identity code for Assumed friend as a distinct enumerated value
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.StandardIdentity.ExerciseAssumedFriend">
            <summary>
            The symbol's Standard Identity code for Exercise assumed friend as a distinct enumerated value
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.StandardIdentity.ExerciseFriend">
            <summary>
            The symbol's Standard Identity code for Exercise friend as a distinct enumerated value
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.StandardIdentity.ExerciseNeutral">
            <summary>
            The symbol's Standard Identity code for Exercise neutral as a distinct enumerated value
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.StandardIdentity.ExercisePending">
            <summary>
            The symbol's Standard Identity code for Exercise pending as a distinct enumerated value
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.StandardIdentity.ExerciseUnknown">
            <summary>
            The symbol's Standard Identity code for Exercise unknown as a distinct enumerated value
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.StandardIdentity.Faker">
            <summary>
            The symbol's Standard Identity code for Faker as a distinct enumerated value
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.StandardIdentity.Friend">
            <summary>
            The symbol's Standard Identity code for Friend as a distinct enumerated value
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.StandardIdentity.Hostile">
            <summary>
            The symbol's Standard Identity code for Hostile as a distinct enumerated value
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.StandardIdentity.Joker">
            <summary>
            The symbol's Standard Identity code for Joker as a distinct enumerated value
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.StandardIdentity.Neutral">
            <summary>
            The symbol's Standard Identity code for Neutral as a distinct enumerated value
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.StandardIdentity.Pending">
            <summary>
            The symbol's Standard Identity code for Pending as a distinct enumerated value 
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.StandardIdentity.Suspect">
            <summary>
            The symbol's Standard Identity code for Suspect as a distinct enumerated value
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.StandardIdentity.Unknown">
            <summary>
            The symbol's Standard Identity code for Unknown as a distinct enumerated value
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.StandardIdentity.Index">
            <summary>
            The symbol code's index for the standard identity, aka affiliation
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.StandardIdentity.Sis">
            <summary>
            Dictionary mapping symbol code value to unique numeric values
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.StandardIdentity.SisRev">
            <summary>
            Dictionary mapping unique standard identity numeric values to symbol code values
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.StandardIdentity.Names">
            <summary>
            Dictionary mapping unique numeric identifiers to friendly names
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.StandardIdentity.Exercise">
            <summary>
            Those helpful Navy guys added some X's of their own so we'll have to special case it for now
            </summary>
        </member>
        <member name="M:MilSym.MilSymbol.Schemas.StandardIdentity.GetCode(System.String)">
            <summary>
            Get the standard identity (aka affiliation) for the given symbol code.
            </summary>
            <param name="symbolCode">the symbol code</param>
            <returns>an arbitrary standard identity integer code for the given symbol code</returns>
        </member>
        <member name="M:MilSym.MilSymbol.Schemas.StandardIdentity.GetName(System.String)">
            <summary>
            Get the standard identity for the coding scheme.
            </summary>
            <param name="symbolCode">the symbol code</param>
            <returns>a friendly name for the standard identity</returns>
        </member>
        <member name="M:MilSym.MilSymbol.Schemas.StandardIdentity.IsColorHostile(System.String)">
            <summary>
            Determines if the background color should be hostile.
            This includes Hostile, Joker, Faker, and Suspect.
            </summary>
            <param name="symbolCode">the symbol code</param>
            <returns>true if the background color should be hostile</returns>
        </member>
        <member name="M:MilSym.MilSymbol.Schemas.StandardIdentity.GetNormalizedStandardIdentity(System.String)">
            <summary>
            Maps the actual standard identity into one of the four basic standard identities (affiliations)
            which include Friend, Hostile, Neutral, and Unknown. Normalize here strictly means "What will the templates understand?"
            </summary>
            <param name="symbolCode">the symbol code</param>
            <returns>an arbitrary integer representing Friend, Hostile, Neutral or Unknown or 0 if there is an error</returns>
        </member>
        <member name="M:MilSym.MilSymbol.Schemas.StandardIdentity.ToChar(System.Int32)">
            <summary>
            Maps the internal numeric identifier back into the symbol's code for Standard Identity
            </summary>
            <param name="key">
            The internal numeric identifier
            </param>
            <returns>
            The Standard Identity symbol code
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.Schemas.StandardIdentity.GetExerciseAmplifyingDescriptor(System.String)">
            <summary>
            Gets the exercise amplifying descriptor which can be
            Exercise, Joker, or Faker.
            </summary>
            <param name="symbolCode">the symbol code</param>
            <returns>the display character for Exercise, Joker, or Faker or (char)0 if there is an error</returns>
        </member>
        <member name="T:MilSym.MilSymbol.Schemas.StatusOperationalCapacity">
            <summary>
            Support methods for managing the Standard Operation Capacity code portion of symbols in MIL STD-2525C
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.StatusOperationalCapacity.AnticipatedPlanned">
            <summary>
            The symbol's Status Operational Capacity code for Anticipated/planned
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.StatusOperationalCapacity.Present">
            <summary>
            The symbol's Status Operational Capacity code for Present
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.StatusOperationalCapacity.PresentDamaged">
            <summary>
            The symbol's Status Operational Capacity code for Present/damaged
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.StatusOperationalCapacity.PresentDestroyed">
            <summary>
            The symbol's Status Operational Capacity code for Present/destroyed
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.StatusOperationalCapacity.PresentFullToCapacity">
            <summary>
            The symbol's Status Operational Capacity code for Present/full to capacity
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.StatusOperationalCapacity.PresentFullyCapable">
            <summary>
            The symbol's Status Operational Capacity code for Present/fully capable
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.StatusOperationalCapacity.Index">
            <summary>
            The symbol code index for the status or operational capacity
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.Schemas.StatusOperationalCapacity.Names">
            <summary>
            Dictionary that maps symbol code values to friendly names
            </summary>
        </member>
        <member name="M:MilSym.MilSymbol.Schemas.StatusOperationalCapacity.GetCode(System.String)">
            <summary>
            Gets the symbol code's status or operational capacity
            </summary>
            <param name="symbolCode">the symbol code</param>
            <returns>the character for the symbol code's status or operational capacity</returns>
        </member>
        <member name="M:MilSym.MilSymbol.Schemas.StatusOperationalCapacity.GetName(System.String)">
            <summary>
            Get the symbol code's friendly name for the status or operational capacity.
            </summary>
            <param name="symbolCode">the symbol code</param>
            <returns>a friendly name for the status/operational capacity</returns>
        </member>
        <member name="M:MilSym.MilSymbol.Schemas.StatusOperationalCapacity.Generate(System.String)">
            <summary>
            Generate a full or partial "X" shape to represent damaged or destroyed entities 
            </summary>
            <param name="symbolCode">symbol code for the entity</param>
            <returns>shape representing the damage</returns>
        </member>
        <member name="M:MilSym.MilSymbol.Schemas.StatusOperationalCapacity.Segment(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Generate a line segment as part of generating a slash or an X covering a map symbol.
            </summary>
            <param name="x1">
            First X-coordinate of the line segment.
            </param>
            <param name="y1">
            First Y-coordinate of the line segment.
            </param>
            <param name="x2">
            Second X-coordinate of the line segment.
            </param>
            <param name="y2">
            Second Y-coordinate of the line segment.
            </param>
            <returns>
            A PathFigure representing the given line segment.
            </returns>
        </member>
        <member name="T:MilSym.MilSymbol.SymbolData">
            <summary>
            SymbolData is the core data class for the resource dictionary templates for all symbology.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.SymbolData.HalfWidth">
            <summary>
            Half the default line width
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.SymbolData.Rect137137G">
            <summary>
            One of several rectangular bounding boxes for the various symbol backgrounds.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.SymbolData.Rect137149A">
            <summary>
            One of several rectangular bounding boxes for the various symbol backgrounds.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.SymbolData.Rect137149U">
            <summary>
            One of several rectangular bounding boxes for the various symbol backgrounds.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.SymbolData.Rect137161A">
            <summary>
            One of several rectangular bounding boxes for the various symbol backgrounds.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.SymbolData.Rect137161U">
            <summary>
            One of several rectangular bounding boxes for the various symbol backgrounds.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.SymbolData.Rect149149G">
            <summary>
            One of several rectangular bounding boxes for the various symbol backgrounds.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.SymbolData.Rect178178G">
            <summary>
            One of several rectangular bounding boxes for the various symbol backgrounds.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.SymbolData.Rect180180G">
            <summary>
            One of several rectangular bounding boxes for the various symbol backgrounds.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.SymbolData.Rect185125G">
            <summary>
            One of several rectangular bounding boxes for the various symbol backgrounds.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.SymbolData.Rect183161A">
            <summary>
            One of several rectangular bounding boxes for the various symbol backgrounds.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.SymbolData.Rect183161U">
            <summary>
            One of several rectangular bounding boxes for the various symbol backgrounds.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.SymbolData.Stencils">
            <summary>
            This is the resource dictionary that ultimately holds all of the resource dictionary entries
            for all the stencils.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.SymbolData.EmInfrastructureEquipment">
            <summary>
            These are the infrastructure equipment codes from appendix G ("E*F*" + code)
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.SymbolData.EmOperationsEquipment">
            <summary>
            These are the operations equipment codes from appendix G ("E*O*" + code)
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.SymbolData.Leads">
            <summary>
            A list of the leading characters for each appendix (S for A, G for B, W for C, I for D, O for E, and E for G)
            </summary>
        </member>
        <member name="M:MilSym.MilSymbol.SymbolData.#cctor">
            <summary>
            Initializes static members of the <see cref="T:MilSym.MilSymbol.SymbolData"/> class.
            </summary>
        </member>
        <member name="M:MilSym.MilSymbol.SymbolData.Check(System.String@)">
            <summary>
            Does a preliminary check for a valid symbol code.
            In the future this may consult a rule base to see if the code is valid.
            </summary>
            <param name="symbolCode">
            The symbol code to check for validity.
            </param>
            <returns>
            A boolean indicating whether the symbol code is valid.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.SymbolData.GetStyle(System.String)">
            <summary>
            Gets a named style from the resource dictionaries
            </summary>
            <param name="style">
            The name of the style to get.
            </param>
            <returns>
            The Style corresponding to the passed in name.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.SymbolData.GetString(System.String)">
            <summary>
            Gets a named string from the resource dictionaries
            </summary>
            <param name="key">
            The name of the string to get.
            </param>
            <returns>
            The string corresponding to the passed in name.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.SymbolData.IsTopFlat(System.String)">
            <summary>
            When is the top of the symbol flat?
            Answer:
            1. normalize StandardIdentity to 'F', 'H', 'N' or 'U'
            2. return true when it is Subsurface
            3. return true when it is Neutral
            4. return true when it is Friendly Units, Installations, or SOF
            5. return true when it is Friendly Emergency Operations
              a. technically, friendly emergency equipment is not flat 
            </summary>
            <param name="symbolCode">
            The symbol code to check for a flat top to the symbol.
            </param>
            <returns>
            Returns a boolean to indicate whether the top of the symbol is flat.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.SymbolData.GetBounds(System.String)">
            <summary>
            This function returns the symbol bounds for the various standard symbol backgrounds.
            Tried to do this as a dictionary but the possibilities exploded.
            The exceptions to these sizes are the symbols that have headquarters or installions built-in.
            If that built-in is in the normal symbol code place (SymbolCode[10-11]) we're OK.
            But the designers threw in a few curveballs that we're going to special case for now.
            </summary>
            <param name="sc">
            The symbol code.
            </param>
            <returns>
            A Rect reprsenting the bounding rectangle in the same space as the resource dictionary.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.SymbolData.GetHqFactor(System.String)">
            <summary>
            Return the headquarter's factor to help position the headquarter's staff
            </summary>
            <param name="sc">
            The symbol code for the headquarters.
            </param>
            <returns>
            A fractional offset as a double ranging from 0.0 to 1.0. 
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.SymbolData.GetControlTemplate(System.String)">
            <summary>
            Returns the ControlTemplate corresponding to the passed in template derived from a symbol code.
            </summary>
            <param name="template">
            The template string corresponding to a control template.
            </param>
            <returns>
            The control template.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.SymbolData.GetDataTemplate(System.String)">
            <summary>
            Returns the DataTemplate corresponding to the passed in template derived from a symbol code.
            </summary>
            <param name="template">
            The template string corresponding to a data template.
            </param>
            <returns>
            The data template.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.SymbolData.IsEquipment(System.String)">
            <summary>
            Determine once and for all if a symbol code is for a piece of equipment.
            </summary>
            <param name="symbolCode">
            The symbol code.
            </param>
            <returns>
            A boolean indicating if the symbol code represents equipment.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.SymbolData.IsDashed(System.String)">
            <summary>
            Checks to see if the symbol requires a dashed outline.
            </summary>
            <param name="symbolCode">
            The symbol code to check.
            </param>
            <returns>
            A boolean to indicate whether the outline should be dashed.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.SymbolData.IsBaseFlat(System.String)">
            <summary>
            When is the base of the symbol flat?
            Flat symbols are easier to draw against.
            Answer:
            1. normalize StandardIdentity to 'F', 'H', 'N' or 'U'
            2. return true when it is Air or Space
            3. return true when it is Neutral
            4. return true when it is Friendly Units, Installations, or SOF
            </summary>
            <param name="symbolCode">
            The symbol code.
            </param>
            <returns>
            A boolean indicating whether the base of the symbol is flat.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.SymbolData.LoadMissingData(System.Char)">
            <summary>
            Loads an appendix on demand.
            </summary>
            <param name="lead">
            The leading character for the requested template controls which resource dictionary to load.
            Pass 0 to just load the default label and symbol outline files.
            </param>
        </member>
        <member name="M:MilSym.MilSymbol.SymbolData.LoadDictionary(System.String)">
            <summary>
            Load an indicated dictionary and add it to Stencils.
            </summary>
            <param name="dictionary">
            The dictionary to load into the Stencils.
            </param>
        </member>
        <member name="M:MilSym.MilSymbol.SymbolData.CreateAppendix(System.Char)">
            <summary>
            Create an ILoadResources instance that can be invoked to load a resource dictionary.
            </summary>
            <param name="lead">
            The lead character for all the symbols in this appendix such as 'S' for AppendixA
            </param>
            <returns>
            Returns an instance of an ILoadResources instance for later invocation. 
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.SymbolData.NormalizeBattleDimension(System.String)">
            <summary>
            Normalize here strictly means "what will the templates understand?" which is mostly air, land, and water.
            </summary>
            <param name="symbolCode">
            The symbol code.
            </param>
            <returns>
            The enumerated battle dimension value.
            </returns>
        </member>
        <member name="P:MilSym.MilSymbol.SymbolData.Logger">
            <summary>
            Gets or sets Logger which is possibly set by the main program, TBD.
            </summary>
        </member>
        <member name="T:MilSym.MilSymbol.WindBarb">
            <summary>
            Generates the wind barbs for weather symbology
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.WindBarb.XmlnsOpen">
            <summary>
            The header for parsing some XAML code strings.
            </summary>
        </member>
        <member name="F:MilSym.MilSymbol.WindBarb.Clouds">
            <summary>
            A list of XAML strings that define cloud cover
            </summary>
        </member>
        <member name="M:MilSym.MilSymbol.WindBarb.GenerateWind(System.Nullable{System.Double},System.Double,System.Boolean)">
            <summary>
            The primary method for generating a wind barb when the hemisphere is specified.
            </summary>
            <param name="speedIn">
            The speed (in knots).
            </param>
            <param name="direction">
            The direction (in degrees).
            </param>
            <param name="southernHemisphere">
            A boolean that is true when the wind barb is in the southern hemisphere.
            </param>
            <returns>
            A Shape representing the wind barb.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.WindBarb.GenerateWind(System.Nullable{System.Double},System.Double)">
            <summary>
            The primary method for generating a wind barb, defaulting to the northern hemisphere.
            </summary>
            <param name="speedIn">
            The speed (in knots).
            </param>
            <param name="direction">
            The direction (in degrees).
            </param>
            <returns>
            A Shape representing the wind barb.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.WindBarb.GenerateCloudCover(System.Double,System.Int32)">
            <summary>
            Generates the Shape for the desired cloud cover.
            </summary>
            <param name="scale">
            The scale to apply to the cloud cover.
            </param>
            <param name="cloudCover">
            The cloud cover value.
            </param>
            <returns>
            A Shape representing the desired cloud cover at the requested scale.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.WindBarb.Scale(System.Text.StringBuilder,System.Double)">
            <summary>
            Adds a scale transformation to the passed in XAML string.
            </summary>
            <param name="sb">
            The string to keep appending to.
            </param>
            <param name="scale">
            The scale to apply via the transformation matrix.
            </param>
            <returns>
            The Shape generated by the resulting XAML string.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.WindBarb.Rotate(System.Text.StringBuilder,System.Double,System.Boolean)">
            <summary>
            Adds a rotate transformation to the passed in XAML string.
            </summary>
            <param name="sb">
            The XAML string up to this point.
            </param>
            <param name="direction">
            The angle (in degrees) to rotate the wind barb.
            </param>
            <param name="southernHemisphere">
            Whether the barb is in the southern hemisphere.
            </param>
            <returns>
            The new shape defined by the rotation angle.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.WindBarb.BuildKnotsList(System.Double)">
            <summary>
            Generates the list of barbs on the side of the indicator for a given speed.
            </summary>
            <param name="speed">
            The speed (in knots).
            </param>
            <returns>
            A collection of integers that is used to build the barbs on the side of the indicator.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.WindBarb.GetStart(System.Collections.Generic.ICollection{System.Int32})">
            <summary>
            Gets the starting location for barbs. Five knots is a special case
            </summary>
            <param name="list">
            The list from the BuildKnotsList method.
            </param>
            <returns>
            The starting location for the barb location on the side on the indicator, in pixels.
            </returns>
        </member>
        <member name="M:MilSym.MilSymbol.WindBarb.DrawBarbs(System.Text.StringBuilder,System.Collections.Generic.ICollection{System.Int32},System.Double,System.Boolean)">
            <summary>
            Add the barbs to the side of the indicator.
            </summary>
            <param name="sb">
            The string to which to add the barbs.
            </param>
            <param name="list">
            The list of barb indicators from BuildKnotsList.
            </param>
            <param name="direction">
            The direction to display the indicator.
            </param>
            <param name="southernHemisphere">
            A flag indicating whether the indicator is in the southern hemisphere.
            </param>
            <returns>
            A Shape representing the requested wind barb.
            </returns>
        </member>
        <member name="P:MilSym.MilSymbol.TPG.ISymbol2525CCanvas.Bounds">
            <summary>
            Gets Bounds which defines the bounding rectangle 
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.TPG.ISymbol2525CCanvas.Scale">
            <summary>
            Gets or sets the scale with which to render the symbol. The default
            Scale of 1.0 is rather large (approximately 300x300).
            In practice a Scale of 0.1 to 0.2 is effective. When
            symbols are rendered in a browser that supports magnification
            it is possible to change the zoom factor to see more detail.
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.TPG.ISymbol2525CCanvas.Angle">
            <summary>
            Gets or sets the rotation angle for the current symbol. The standard 
            severely limits the occasions when rotating a symbol is
            allowed so this option should be used with caution.
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.TPG.ISymbol2525CCanvas.LabelC">
            <summary>
            Gets or sets label C - quantity 
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.TPG.ISymbol2525CCanvas.LabelF">
            <summary>
            Gets or sets label F where + => reinforced, - => reduced, ± => reinforced and reduced
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.TPG.ISymbol2525CCanvas.LabelG">
            <summary>
            Gets or sets label G - staff comments
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.TPG.ISymbol2525CCanvas.LabelH">
            <summary>
            Gets or sets label H - additional informmation
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.TPG.ISymbol2525CCanvas.LabelH1">
            <summary>
            Gets or sets label H1 - additional informmation
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.TPG.ISymbol2525CCanvas.LabelJ">
            <summary>
            Gets or sets label J - evaluation (reliability plus credibility) 
              A-completely reliable           B-usually reliable    C-fairly reliable
              D-not usually reliable          E-unreliable          F-reliability cannot be judged
              1-confirmed by other sources    2-probably true       3-possibly true
              4-doubtfully true               5-improbable          6-truth cannot be judged
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.TPG.ISymbol2525CCanvas.LabelK">
            <summary>
            Gets or sets label K - combat effectiveness
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.TPG.ISymbol2525CCanvas.LabelL">
            <summary>
            Gets or sets label L - signature equipment (! indicates detectable electronic signatures)
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.TPG.ISymbol2525CCanvas.LabelM">
            <summary>
            Gets or sets label M - higher formation (number/title of higher commannd, Roman numerals designate corps)
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.TPG.ISymbol2525CCanvas.LabelN">
            <summary>
            Gets or sets label N - enemy (ENY) for equipment
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.TPG.ISymbol2525CCanvas.LabelP">
            <summary>
            Gets or sets label P - IFF/SIF indentification modes and codes
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.TPG.ISymbol2525CCanvas.LabelQ">
            <summary>
            Gets or sets label Q - degrees measured clockwise from true north 
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.TPG.ISymbol2525CCanvas.LabelT">
            <summary>
            Gets or sets label T - unique designation (acquisition nummber when used in SIGINT)
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.TPG.ISymbol2525CCanvas.LabelV">
            <summary>
            Gets or sets label V - equipment type
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.TPG.ISymbol2525CCanvas.LabelW">
            <summary>
            Gets or sets label W - date/time as DDHHMMSSZMONYYYY or O/O
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.TPG.ISymbol2525CCanvas.LabelW1">
            <summary>
            Gets or sets label W1 - date/time as DDHHMMSSZMONYYYY or O/O
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.TPG.ISymbol2525CCanvas.LabelX">
            <summary>
             Gets or sets label X - altitude or depth
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.TPG.ISymbol2525CCanvas.LabelY">
            <summary>
            Gets or sets label Y - location (DMS, UTM, or MGRS)
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.TPG.ISymbol2525CCanvas.LabelZ">
            <summary>
            Gets or sets label Z - speed
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.TPG.ISymbol2525CCanvas.LabelAA">
            <summary>
            Gets or sets label AA - name of special C2 headquarters
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.TPG.ISymbol2525CCanvas.SymbolCode">
            <summary>
            Gets or sets the symbol code property for the current military symbol.
            Valid symbol codes are fully defined by the MIL-STD 2525C specification.
            As of this writing that specification is the first reference at the Wikipedia
            link http://en.wikipedia.org/wiki/Military_symbology.
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.TPG.ISymbol2525CCanvas.LabelStyle">
            <summary>
            Gets or sets the label style property for the current military symbol.
            Currently on the FontFamily, FontSize, FontWeight, and Foreground properties are used.
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.TPG.ISymbol2525CCanvas.LabelString">
            <summary>
            Gets or sets this write-only string property to provide an easy way to set
            multiple labels at one time. The syntax is
            "label=value;label=value;..." where '=' and ';' can be
            any two characters that are ONLY used as separators in the
            string. It is also possible to use the same character for both
            '=' and ';' with a subsequent loss of readability.
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.TPG.ISymbol2525CCanvas.LineBrush">
            <summary>
            Gets or sets the brush for drawing the outline of a symbol, typically black and either solid or dashed.
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.TPG.ISymbol2525CCanvas.FillBrush">
            <summary>
            Gets or sets the brush for drawing the background of a symbol, typically dependent on the symbol's standard identity (aka affiliation).
            </summary>
        </member>
        <member name="P:MilSym.MilSymbol.TPG.ISymbol2525CCanvas.OverrideFillBrush">
            <summary>
            The brush used that overrides fill colors of symbols that are always the same color otherwise. Will not affect symbols that change color based on
            affiliation.
            </summary>
        </member>
    </members>
</doc>
