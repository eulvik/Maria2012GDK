<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TPG.Maria.DrawObjectContracts</name>
    </assembly>
    <members>
        <member name="T:TPG.Maria.DrawObjectContracts.ICreationWorkflow">
            <summary>
            Represents a draw object creation workflow in Maria.
            </summary>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.ICreationWorkflow.IsActive">
            <summary>
            Get or set if creation workflow is active.
            </summary>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.ICreationWorkflow.Group">
            <summary>
            Get or set if creation workflow group.
            </summary>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.ICreationWorkflow.HierarchyCode">
            <summary>
            The complete hierarchy code of the objects of this workflow.
            </summary>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.ICreationWorkflow.ObjectTypeId">
            <summary>
            Get or set if creation workflow draw object type.
            </summary>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.ICreationWorkflow.Image">
            <summary>
            Get image.
            </summary>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.ICreationWorkflow.Name">
            <summary>
            Get or set name.
            </summary>
        </member>
        <member name="T:TPG.Maria.DrawObjectContracts.IDrawObjectFactory">
            <summary>
            Draw object factory interface in Maria.
            </summary>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IDrawObjectFactory.CreateTacticalGraphic(System.String)">
            <summary>
            Create a tactical graphic object from a hierarchy code.
            </summary>
            <param name="hierarchyCode">2525C Hierarchy Code</param>
            <returns>ITacticalGraphic of the correct type with no default data.</returns>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IDrawObjectFactory.CreateTacticalGraphicInView(System.String,System.Double,System.Nullable{TPG.GeoUnits.GeoPos})">
            <summary>
            Create a tactical graphic object from a hierarchy code and place it in the view.
            </summary>
            <param name="hierarchyCode">2525C Hierarchy Code</param>
            <param name="relSize">Size relative to the view size. 0.5 is half the view.</param>
            <param name="centerGeo">Optional center point for the TacticalGraphic. If no center is given, the center of the view is assumed.</param>
            <returns>ITacticalGraphic of the correct type with no default data.</returns>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IDrawObjectFactory.CreatePolyArea">
            <summary>
            Create polygon area generic graphics object.
            </summary>
            <returns>ITacticalGraphic with IGenericGraphic containing a generic draw object without any data.</returns>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IDrawObjectFactory.CreatePolyAreaInView(System.Double,System.Nullable{TPG.GeoUnits.GeoPos})">
            <summary>
            Create polygon area generic graphics object placed within the view.
            </summary>
            <param name="relSize">Size relative to the view size. 0.5 is half the view.</param>
            <param name="centerGeo">Optional center point for the TacticalGraphic. If no center is given, the center of the view is assumed.</param>
            <returns>ITacticalGraphic with IGenericGraphic containing a generic draw object without any data.</returns>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IDrawObjectFactory.CreatePolyLine">
            <summary>
            Create polyline area generic graphics object.
            </summary>
            <returns>ITacticalGraphic with IGenericGraphic containing a generic draw object without any data.</returns>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IDrawObjectFactory.CreatePolyLineInView(System.Double,System.Nullable{TPG.GeoUnits.GeoPos})">
            <summary>
            Create polyline area generic graphics object placed within the view.
            </summary>
            <param name="relSize">Size relative to the view size. 0.5 is half the view.</param>
            <param name="centerGeo">Optional center point for the TacticalGraphic. If no center is given, the center of the view is assumed.</param>
            <returns>ITacticalGraphic with IGenericGraphic containing a generic draw object without any data.</returns>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IDrawObjectFactory.CreateEllipse">
            <summary>
            Create ellipse generic graphics object.
            </summary>
            <returns>ITacticalGraphic with IGenericGraphic containing a generic draw object without any data.</returns>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IDrawObjectFactory.CreateEllipseInView(System.Double,System.Nullable{TPG.GeoUnits.GeoPos})">
            <summary>
            Create ellipse generic graphics object placed within the view.
            </summary>
            <param name="relSize">Size relative to the view size. 0.5 is half the view.</param>
            <param name="centerGeo">Optional center point for the TacticalGraphic. If no center is given, the center of the view is assumed.</param>
            <returns>ITacticalGraphic with IGenericGraphic containing a generic draw object without any data.</returns>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IDrawObjectFactory.CreateFanArea">
            <summary>
            Create fan area generic graphics object.
            </summary>
            <returns>ITacticalGraphic with IGenericGraphic containing a generic draw object without any data.</returns>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IDrawObjectFactory.CreateFanAreaInView(System.Double,System.Nullable{TPG.GeoUnits.GeoPos})">
            <summary>
            Create fan area generic graphics object placed within the view.
            </summary>
            <param name="relSize">Size relative to the view size. 0.5 is half the view.</param>
            <param name="centerGeo">Optional center point for the TacticalGraphic. If no center is given, the center of the view is assumed.</param>
            <returns>ITacticalGraphic with IGenericGraphic containing a generic draw object without any data.</returns>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IDrawObjectFactory.CreateRangeRings">
            <summary>
            Create generic range rings graphics object.
            </summary>
            <returns>ITacticalGraphic with IGenericGraphic containing a generic draw object without any data.</returns>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IDrawObjectFactory.CreateRangeRingsInView(System.Double,System.Nullable{TPG.GeoUnits.GeoPos})">
            <summary>
            Create generic range rings graphics object placed within the view.
            </summary>
            <param name="relSize">Size relative to the view size. 0.5 is half the view.</param>
            <param name="centerGeo">Optional center point for the TacticalGraphic. If no center is given, the center of the view is assumed.</param>
            <returns>ITacticalGraphic with IGenericGraphic containing a generic draw object without any data.</returns>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IDrawObjectFactory.CreateOrbitArea">
            <summary>
            Create generic orbit area graphics object.
            </summary>
            <returns>ITacticalGraphic with IGenericGraphic containing a generic draw object without any data.</returns>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IDrawObjectFactory.CreateOrbitAreaInView(System.Double,System.Nullable{TPG.GeoUnits.GeoPos})">
            <summary>
            Create generic orbit area graphics object placed within the view.
            </summary>
            <param name="relSize">Size relative to the view size. 0.5 is half the view.</param>
            <param name="centerGeo">Optional center point for the TacticalGraphic. If no center is given, the center of the view is assumed.</param>
            <returns>ITacticalGraphic with IGenericGraphic containing a generic draw object without any data.</returns>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IDrawObjectFactory.CreateVolumeOrbitArea">
            <summary>
            Create generic orbit area graphics object.
            </summary>
            <returns>ITacticalGraphic with IGenericGraphic containing a generic draw object without any data.</returns>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IDrawObjectFactory.CreateVolumeOrbitAreaInView(System.Double,System.Nullable{TPG.GeoUnits.GeoPos})">
            <summary>
            Create generic volume orbit area graphics object placed within the given viewport.
            </summary>
            <param name="relSize">Size relative to the viewport size. 0.5 is half the viewport.</param>
            <param name="centerGeo">Optional center point for the TacticalGraphic. If no center is given, the center of the viewport is assumed.</param>
            <returns>ITacticalGraphic with IGenericGraphic containing a generic draw object without any data.</returns>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IDrawObjectFactory.CreateLane">
            <summary>
            Create generic Lane graphics object.
            </summary>
            <returns>ITacticalGraphic with IGenericGraphic containing a generic draw object without any data.</returns>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IDrawObjectFactory.CreateLaneInView(System.Double,System.Nullable{TPG.GeoUnits.GeoPos})">
            <summary>
            Create generic Lane graphics object placed within the view.
            </summary>
            <param name="relSize">Size relative to the view size. 0.5 is half the view.</param>
            <param name="centerGeo">Optional center point for the TacticalGraphic. If no center is given, the center of the view is assumed.</param>
            <returns>ITacticalGraphic with IGenericGraphic containing a generic draw object without any data.</returns>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IDrawObjectFactory.CreateVolumeLane">
            <summary>
            Create generic volume lane graphics object.
            </summary>
            <returns>ITacticalGraphic with IGenericGraphic containing a generic draw object without any data.</returns>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IDrawObjectFactory.CreateVolumeLaneInView(System.Double,System.Nullable{TPG.GeoUnits.GeoPos})">
            <summary>
            Create generic volume lane graphics object placed within the given viewport.
            </summary>
            <param name="relSize">Size relative to the viewport size. 0.5 is half the viewport.</param>
            <param name="centerGeo">Optional center point for the TacticalGraphic. If no center is given, the center of the viewport is assumed.</param>
            <returns>ITacticalGraphic with IGenericGraphic containing a generic draw object without any data.</returns>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IDrawObjectFactory.CreateSymbol">
            <summary>
            Create generic Symbol graphics object.
            </summary>
            <returns>ITacticalGraphic with IGenericGraphic containing a generic draw object without any data.</returns>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IDrawObjectFactory.CreateText(System.String)">
            <summary>
            Create generic text graphics object.
            </summary>
            <param name="text">Initial text in the text object</param>
            <returns>ITacticalGraphic with IGenericGraphic containing a generic draw object without any data.</returns>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IDrawObjectFactory.CreateSymbolInView(System.Nullable{TPG.GeoUnits.GeoPos})">
            <summary>
            Create generic Symbol graphics object placed within the given viewport.
            </summary>
            <param name="centerGeo">Optional center point for the SimpleDrawObject. If no center is given, the center of the viewport is assumed.</param>
            <returns>ISimpleDrawObject with IGenericGraphic containing a generic draw object without any data.</returns>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IDrawObjectFactory.CreateCrossHairs">
            <summary>
            Create generic Cross Hairs graphics object.
            </summary>
            <returns>ITacticalGraphic with IGenericGraphic containing a generic draw object without any data.</returns>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IDrawObjectFactory.CreateCrossHairsInView(System.Double,System.Nullable{TPG.GeoUnits.GeoPos})">
            <summary>
            Create generic Cross Hairs graphics object placed within the view.
            </summary>
            <param name="relSize">Size relative to the view size. 0.5 is half the view.</param>
            <param name="centerGeo">Optional center point for the TacticalGraphic. If no center is given, the center of the view is assumed.</param>
            <returns>ITacticalGraphic with IGenericGraphic containing a generic draw object without any data.</returns>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IDrawObjectFactory.CreateTextInView(System.String,System.Double,System.Nullable{TPG.GeoUnits.GeoPos})">
            <summary>
            Create generic text graphics object placed within the view.
            </summary>
            <param name="text">Initial text in the text object</param>
            <param name="relSize">Size relative to the view size. 0.5 is half the view.</param>
            <param name="centerGeo">Optional center point for the TacticalGraphic. If no center is given, the center of the view is assumed.</param>
            <returns>ITacticalGraphic with IGenericGraphic containing a generic draw object without any data.</returns>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IDrawObjectFactory.FitToView(TPG.DrawObjects.Contracts.SimpleDrawObjectAPI.ISimpleDrawObject,System.Double,System.Nullable{TPG.GeoUnits.GeoPos})">
            <summary>
            Place a TacticalGraphic in view.
            </summary>
            <param name="simpleDrawObject">Input tactical graphic data.</param>
            <param name="relSize">Size relative to the view size. 0.5 is half the view.</param>
            <param name="centerGeo">Optional center point for the TacticalGraphic. If no center is given, the center of the view is assumed.</param>
            <returns>TacticalGraphic object placed in the view.</returns>
            <remarks>If you want to create and place a tactical graphic in the view, use CreateTacticalGraphicInView instead, since it is more efficient. 
            This method assumes that the ITacticalGraphic object is valid with an IGenericGraphic if applicable.</remarks>
        </member>
        <member name="T:TPG.Maria.DrawObjectContracts.IMariaDrawObjectLayer">
            <summary>
            Draw object layer interface in Maria.
            </summary>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaDrawObjectLayer.AddDrawObjectServiceStore(System.String)">
            <summary>
            Add draw object service store to active draw object service.
            </summary>
            <param name="storeId">Store id.</param>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaDrawObjectLayer.DeleteDrawObjectServiceStore(System.String)">
            <summary>
            Remove draw object service store from active draw object service.
            </summary>
            <param name="storeId">Id of store to remove.</param>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaDrawObjectLayer.DeleteAllDrawObjectServiceStores">
            <summary>
            Remove all draw object service stores from active draw object service.
            </summary>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaDrawObjectLayer.GetDrawObjectServiceStores">
            <summary>
            Get draw object service store ids.
            </summary>
            <returns>List of draw object store ids.</returns>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaDrawObjectLayer.GetDrawObjectFromStore(System.String)">
            <summary>
            Get draw object from the store.
            </summary>
            <param name="objectId">Draw object ID.</param>
            <returns>Draw object with given id.</returns>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaDrawObjectLayer.GetDrawObjectXMLFromStore(System.String)">
            <summary>
            Get draw object as xml from the store.
            </summary>
            <param name="objectId">Draw object ID.</param>
            <returns>Draw object with given id as xml.</returns>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaDrawObjectLayer.GetSortedDrawObjectsFromStore(TPG.GeoFramework.Style.Core.Contracts.Condition.ICondition,System.Collections.Generic.IList{TPG.GeoFramework.Style.Core.Contracts.Sorting.SortInfoItem},System.Int32,System.Int32)">
            <summary>
            Get draw objects sorted by specified field(s).
            </summary>
            <param name="query">Query for selecting sorted draw objects. Selected draw objects can be offset from start of
            sort order. THe specified number of draw objects can be lower than the total count.</param>
            <param name="sortItems">List of sort items containing sorting info.</param>
            <param name="offset">Offset into the set of draw objects to be returned.</param>
            <param name="maxCount">Maximum count of draw objects to be returned.</param>
            <returns>Sorted draw objects and supporting information.</returns>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaDrawObjectLayer.GetSortedDrawObjectsXMLFromStore(TPG.GeoFramework.Style.Core.Contracts.Condition.ICondition,System.Collections.Generic.IList{TPG.GeoFramework.Style.Core.Contracts.Sorting.SortInfoItem},System.Int32,System.Int32)">
            <summary>
            Get draw objects as xml sorted by specified field(s).
            </summary>
            <param name="query">Query for selecting sorted draw objects. Selected draw objects can be offset from start of
            sort order. THe specified number of draw objects can be lower than the total count.</param>
            <param name="sortItems">List of sort items containing sorting info.</param>
            <param name="offset">Offset into the set of draw objects to be returned.</param>
            <param name="maxCount">Maximum count of draw objects to be returned.</param>
            <returns>Sorted draw objects and supporting information.</returns>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaDrawObjectLayer.UpdateStore(TPG.DrawObjects.Contracts.SimpleDrawObjectAPI.ISimpleDrawObject)">
            <summary>
            Save draw object to store.
            </summary>
            <param name="simpleDrawObject">Draw object to save.</param>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaDrawObjectLayer.UpdateStore(System.Collections.Generic.IEnumerable{TPG.DrawObjects.Contracts.SimpleDrawObjectAPI.ISimpleDrawObject})">
            <summary>
            Save a list of draw objects to store.
            </summary>
            <param name="simpleDrawObjects">Draw objects to save.</param>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaDrawObjectLayer.UpdateStore(System.String)">
            <summary>
            Save draw object as xml to store.
            </summary>
            <param name="drawObjectXML">Draw object xml to update.</param>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaDrawObjectLayer.UpdateStore(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Save a list of draw objects as xml to store.
            </summary>
            <param name="drawObjectXMLs">List of draw object xml to update.</param>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaDrawObjectLayer.Delete(System.String)">
            <summary>
            Removes a draw object already present in layer
            </summary>
            <param name="instanceId">Instance id of draw to be removed.</param>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaDrawObjectLayer.Delete(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Delete draw objects.
            </summary>
            <param name="instanceIds">Instance ids of draw objects to delete.</param>
        </member>
        <member name="E:TPG.Maria.DrawObjectContracts.IMariaDrawObjectLayer.ServiceConnected">
            <summary>
            Event raised when the connection to the service is established.
            </summary>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.IMariaDrawObjectLayer.ActiveDrawObjectService">
            <summary>
            Get or set active draw object service.
            </summary>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.IMariaDrawObjectLayer.DrawObjectServices">
            <summary>
            Get or set draw object services.
            </summary>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.IMariaDrawObjectLayer.ActiveDrawObjectServiceStore">
            <summary>
            Get or set draw object store id to store draw objects in.
            </summary>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.IMariaDrawObjectLayer.DrawObjectServiceStores">
            <summary>
            Get or set draw object service stores.
            </summary>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.IMariaDrawObjectLayer.DrawObjectFactory">
            <summary>
            Get draw object factory for creating draw object instances.
            </summary>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.IMariaDrawObjectLayer.ExtendedDrawObjectLayer">
            <summary>
            Get extended draw object layer features.
            </summary>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.IMariaDrawObjectLayer.SymbolScale">
            <summary>
            Get or set symbol scale.
            </summary>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.IMariaDrawObjectLayer.SymbolColorScheme">
            <summary>
            Get or set color scheme.
            </summary>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.IMariaDrawObjectLayer.StyleXml">
            <summary>
            Get or set style xml.
            </summary>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.IMariaDrawObjectLayer.GenericCreationWorkflows">
            <summary>
            Get generic draw object creation workflows.
            </summary>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.IMariaDrawObjectLayer.CreationWorkflows">
            <summary>
            Get or set draw object creation workflows.
            </summary>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.IMariaDrawObjectLayer.DisplayFilter">
            <summary>
            Get display filter.
            </summary>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.IMariaDrawObjectLayer.InitializeCreationWorkflows">
            <summary>
            Get or set if all creation workflows should be initialized. This will override any
            values set in <see cref="P:TPG.Maria.DrawObjectContracts.IMariaDrawObjectLayer.InitializeGenericCreationWorkflows"/> and <see cref="P:TPG.Maria.DrawObjectContracts.IMariaDrawObjectLayer.InitializeTacticalCreationWorkflows"/>
            </summary>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.IMariaDrawObjectLayer.InitializeGenericCreationWorkflows">
            <summary>
            Get or set if creation workflows for generic objects should be initialized. Will not
            have any effect if <see cref="P:TPG.Maria.DrawObjectContracts.IMariaDrawObjectLayer.InitializeCreationWorkflows"/> is set to true.
            </summary>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.IMariaDrawObjectLayer.InitializeTacticalCreationWorkflows">
            <summary>
            Get or set if creation workflows for tactical objects should be initialized. Will not
            have any effect if <see cref="P:TPG.Maria.DrawObjectContracts.IMariaDrawObjectLayer.InitializeCreationWorkflows"/> is set to true.
            </summary>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.IMariaDrawObjectLayer.CopyCommand">
            <summary>
            Get copy draw object command.
            </summary>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.IMariaDrawObjectLayer.CutCommand">
            <summary>
            Get cut draw object command.
            </summary>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.IMariaDrawObjectLayer.PasteCommand">
            <summary>
            Get paste draw object command.
            </summary>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.IMariaDrawObjectLayer.PasteCenteredCommand">
            <summary>
            Get paste draw object centered command.
            </summary>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.IMariaDrawObjectLayer.EditPointsCommand">
            <summary>
            Get edit draw object command.
            </summary>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.IMariaDrawObjectLayer.DeleteDrawObjectCommand">
            <summary>
            Get delete draw object command.
            </summary>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.IMariaDrawObjectLayer.CancelCurrentOperationCommand">
            <summary>
            Get cancel current draw object operation command.
            </summary>
        </member>
        <member name="T:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer">
            <summary>
            Extended draw object layer interface in Maria.
            </summary>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.EditPoints(System.String)">
            <summary>
            Sets edit mode for tool operations
            </summary>
            <param name="instanceId">Instance id of draw object to set edit points for.</param>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.EndEditPoints">
            <summary>
            Ends edit mode for tool operations.
            </summary>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.DeleteAll">
            <summary>
            Removes all draw objects already present in layer.
            If draw object is present in multiple layers it is only removed from current layer.
            If draw object is present in current layer only it is removed from store as well.
            </summary>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.CanDeleteSelectedPrimitives">
            <summary>
            Check if selected draw object primitives can be deleted.
            </summary>
            <returns>True if selected draw object primitives can be deleted, otherwise false.</returns>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.DeleteSelectedPrimitives">
            <summary>
            Delete selected draw object primitives.
            </summary>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.IsSelected(System.String)">
            <summary>
            Returns whether a draw object in layer is selected
            </summary>
            <param name="instanceId">Instance id of draw object</param>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.Select(System.String,System.Boolean)">
            <summary>
            Selects a draw object in layer
            </summary>
            <param name="instanceId">Instance id of draw object</param>
            <param name="deselect">If set to "true" deselects all selected draw objects. </param>
            <remarks>This will not de-select other selected draw objects</remarks>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.Select(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Selects a draw objects in layer
            </summary>
            <param name="instanceIds">Instance ids of draw objects</param>
            <param name="deselect">If set to "true" deselects all selected draw objects.</param>
            <remarks>This will not de-select other selected draw objects</remarks>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.DeSelect(System.String)">
            <summary>
            De-selects a draw object in layer
            </summary>
            <param name="instanceId">Instance id of draw object</param>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.DeSelect(System.Collections.Generic.List{System.String})">
            <summary>
            De-selects a draw objects in layer
            </summary>
            <param name="instanceIds">Instance ids of draw objects</param>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.DeSelectAll">
            <summary>
            De-selects all draw object in layer
            </summary>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.SetDirty(System.Boolean,System.Boolean)">
            <summary>
            If draw layer is dirty, it will be redrawn on the next Update().
            </summary>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.HasDrawObjectChanged(System.String)">
            <summary>
            Checks if the draw object with given instance id has been changed.
            </summary>
            <param name="drawObjectInstanceId">Instance id of draw object to check.</param>
            <returns>True if changed, false otherwise.</returns>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.HasDrawObjectChangedSince(System.String,System.DateTime)">
            <summary>
            Checks if the draw object with given instance id has been changed after the given timestamp.
            </summary>
            <param name="drawObjectInstanceId">Instance id of draw object to check.</param>
            <param name="since">The timestamp to check against.</param>
            <returns>True if changed, false otherwise.</returns>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.ClearChangedState(System.String)">
            <summary>
            Clears the changed flag if the draw object with given instance id.
            </summary>
            <param name="drawObjectInstanceId">The instance id of the draw object to clear changed stateus for.</param>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.RemoveDrawObjectFromUndoRedoStack(System.String)">
            <summary>
            Removes all undo steps where the given instance id is affected.
            </summary>
            <param name="instanceId">Instance id of draw object.</param>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.ClearUndoRedoStack">
            <summary>
            Clears all available steps from the undoredo stack.
            </summary>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.CanDeleteSelectedDrawObjects">
            <summary>
            Check if selected draw objects can be deleted.
            </summary>
            <returns>true of we have selected objects, false otherwise.</returns>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.CanDeleteSelected">
            <summary>
            Check if we can delete selected draw objects or primitives
            </summary>
            <returns>true if draw objects are selected, or if we are in edit mode and we have selected primitives.</returns>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.DeleteSelected">
            <summary>
            Delete selected draw objects or selected draw object primitives if we are in edit mode.
            </summary>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.EnsureWithinMapView(System.String[])">
            <summary>
            Zoom and center viewport to draw objects.
            </summary>
            <param name="instanceIds">Instance ids of draw objects to zoom and center viewport to.</param>
            <returns>True on success, otherwise false.</returns>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.ActivateCreationWorkflow(System.Guid)">
            <summary>
            Activates a draw object creation workflow.
            </summary>
            <param name="drawObjectTypeId">Draw object type id.</param>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.DeactivateCreationWorkflow">
            <summary>
            Deactivates the active creation workflow.
            </summary>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.HasActiveCreationWorkflow(System.Guid)">
            <summary>
            Check active status of creation workflow.
            </summary>
            <param name="drawObjectTypeId">Draw object type id of creation workflow.</param>
            <returns>True if a workflow is active, otherwise false.</returns>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.GetClickedDrawObjects(System.Windows.Point)">
            <summary>
            Get draw objects instnce ids at clicked position.
            </summary>
            <param name="point">Clicked position.</param>
            <returns>List of instance ids.</returns>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.GetVisibleObjectCount">
            <summary>
            Get visible draw object count.
            </summary>
            <returns>Visible draw object count.</returns>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.GetVisibleObjectIds">
            <summary>
            Get visible draw object ids.
            </summary>
            <returns>Ids if visible draw objects.</returns>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.Update">
            <summary>
            Update layer.
            </summary>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.GetEnvelopeForDrawObjects(TPG.GeoFramework.Style.Core.Contracts.Condition.ICondition)">
            <summary>
            Retrieves a position list for draw objects restricted by a query.
            </summary>
            <param name="query">Draw object query.</param>
            <returns>Envelope for draw objects.</returns>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.SetSymbolProvider(System.String,TPG.GeoFramework.Symbols.Contracts.Providers.IRasterSymbolProvider)">
            <summary>
            Set symbol provider.
            </summary>
            <param name="type">Symbol provider type.</param>
            <param name="symbolProvider">Symbol provider instance.</param>
        </member>
        <member name="M:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.ClearSymbolCache">
            <summary>
            Clear symbol store cache.
            </summary>
        </member>
        <member name="E:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.BeforeDrawObjectSelection">
            <summary>
            Notifies before draw object selection occurs.
            </summary>
        </member>
        <member name="E:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.ActiveCreationWorkflowCompleted">
            <summary>
            Notifies creation workflow completion.
            </summary>
        </member>
        <member name="E:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.LayerChanged">
            <summary>
            Notifies of changes to draw objects in layer
            </summary>
        </member>
        <member name="E:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.LayerSelectionChanged">
            <summary>
            Notifies of changes to selection state for draw objects in layer
            </summary>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.InternalLayerId">
            <summary>
            Internal layer id, used to differentiate between layers
            </summary>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.DrawObjectIds">
            <summary>
            Instance id of all draw objects in layer
            </summary>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.ReadOnlyFilter">
            <summary>
            Filter specifying draw objects that should be read-only
            </summary>
            <remarks>
            This property applies to the whole GeoControl, not per DrawObjectLayerViewModel
            </remarks>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.EditPointsInstanceId">
            <summary>
            Instance id of draw object in edit points mode. Null if no draw object is beeing edited.
            </summary>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.SelectedDrawObjectIds">
            <summary>
            Get a list of the currently selected draw object ids.
            </summary>
            <returns></returns>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.RenderTarget">
            <summary>
            The target WPF control for all drawing operations
            </summary>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.DisabledFilter">
            <summary>
            Filter to evaluate to find disabled draw objects.
            </summary>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.SuppressDrawObjectMove">
            <summary>
            Get or set if draw objects can be moved.
            </summary>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.IsMultiSelectionEnabled">
            <summary>
            Get or set if draw object multi selection is enabled.
            </summary>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.IsAspectRatioActionEnabled">
            <summary>
            Get or set if draw object aspect ratio action is enabled.
            </summary>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.IsSymmetricActionEnabled">
            <summary>
            Get or set if draw object symmetric action is enabled.
            </summary>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.OverrideDefaultKeyBindings">
            <summary>
            Get or set if default key bindings should be used or not.
            </summary>
            <remarks>
            By setting this value to true the user can decide how multi select, aspect ratio- and symmetrical scaling are initiated.
            </remarks>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.IsAutoRefreshEnabled">
            <summary>
            Get or set if rendering is automatically refreshed at given intervals. 
            </summary>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.IMariaExtendedDrawObjectLayer.AutoRefreshInterval">
            <summary>
            Get or set the interval in milliseconds at which rendering is automatically refreshed.
            </summary>
            <remarks>To enable automatically refresh AutoRefreshEnabled must be set to true.</remarks>
        </member>
        <member name="T:TPG.Maria.DrawObjectContracts.ISortedDrawObjectXMLInfo">
            <summary>
            Interface for result of sorted draw object query.
            </summary>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.ISortedDrawObjectXMLInfo.SortedDrawObjects">
            <summary>
            Sorted draw objects in order
            </summary>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.ISortedDrawObjectXMLInfo.TotalDrawObjectCount">
            <summary>
            Count of all draw objects matching query. When sorting, offset and count settings can cause the count of SortedDrawObjects to be less than TotalDrawObjectCount
            </summary>
        </member>
        <member name="P:TPG.Maria.DrawObjectContracts.ISortedDrawObjectXMLInfo.Query">
            <summary>
            Source query
            </summary>
        </member>
    </members>
</doc>
