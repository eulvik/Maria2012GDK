<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TPG.GeoFramework.Map.Core.Contracts</name>
    </assembly>
    <members>
        <member name="T:TPG.GeoFramework.Map.Core.Contracts.ExtendedBitmapData">
            <summary>
            This class manages a bitmap with its 8 neigbor tiles, and can be indexed with 
            indices outside its borders
            </summary>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.ExtendedBitmapData.GetValue(System.Int32,System.Int32)">
            <summary>
            Get value of the extended bitmap
            </summary>
            This method will return the value of the given pixel coordinates from the center bitmap or its neighbors.
            The x and y indices may be in the interval x = [ -W, 2W-1 ] y = [ -H, 2H-1 ].
            If the required neighbor bitmap does not exist, the value is taken from the nearest pixel in the center bitmap.
            <param name="x">X index relative to the center bitmap.</param>
            <param name="y">Y index relative to the center bitmap.</param>
            <returns>Value from the bitmap array cast to double.</returns>
        </member>
        <member name="F:TPG.GeoFramework.Map.Core.Contracts.GeoBitmapTypeCodes.ColorImage">
            <summary>
            color image, rgb, alpha uint32
            </summary>
        </member>
        <member name="F:TPG.GeoFramework.Map.Core.Contracts.GeoBitmapTypeCodes.Elevation16">
            <summary>
            elevation AMSL - int16
            </summary>
        </member>
        <member name="F:TPG.GeoFramework.Map.Core.Contracts.GeoBitmapTypeCodes.ElevationFloat">
            <summary>
            Floating point elevation AMSL - float.
            </summary>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IBitmapDataManager.GetData(System.String,System.Int32,System.Int32)">
            <summary>
            Get a bitmap data item of the given type
            </summary>
            <param name="type">Allowed types: CIMG, GIMG, EL16, ELEV</param>
            <param name="tileWidth">Width of the bitmap in pixels</param>
            <param name="tileHeight">Height of the bitmap in pixels</param>
            <returns></returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IBitmapDataManager.Cleanup(System.Int32)">
            <summary>
            Clean up data managers. After cleanup the total bytes used by all data pools should be less than or equal to maxBytes.
            </summary>
            <param name="maxBytes">Max number of bytes used by all data pools combined after cleanup</param>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IBitmapDataManager.ReleaseData(TPG.GeoFramework.Map.Core.Contracts.BitmapData)">
            <summary>
            Release a bitmap data item back to the corresponding bitmap pool.
            </summary>
            <param name="bitmapData"></param>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IBitmapDataManager.GetNodataBitmap(System.String,System.Int32,System.Int32)">
            <summary>
            Returns a bitmap representing a tile without data.
            </summary>
            <param name="bitmapType"></param>
            <param name="tileWidth"></param>
            <param name="tileHeight"></param>
            <returns></returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IBitmapDataManager.GetErrorBitmap(System.String,System.Int32,System.Int32)">
            <summary>
            Returns a bitmap representing a tile error
            </summary>
            <param name="bitmapType"></param>
            <param name="tileWidth"></param>
            <param name="tileHeight"></param>
            <returns></returns>
        </member>
        <member name="F:TPG.GeoFramework.Map.Core.Contracts.BitmapInterpolationMethod.Nearest">
            <summary>
            Nearest point interpolation. The closest pixel to the sample point is returned.
            </summary>
        </member>
        <member name="F:TPG.GeoFramework.Map.Core.Contracts.BitmapInterpolationMethod.Bilinear">
            <summary>
            Bilinear interpolation. The returned point is a blend of the four closest points.
            </summary>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IBitmapInterpolation.Interpolate(System.Windows.Point,TPG.GeoFramework.Map.Core.Contracts.BitmapData,TPG.GeoFramework.Map.Core.Contracts.BitmapInterpolationMethod)">
            <summary>
            <para>Interpolate single channel value (typically elevation) from a bitmap.</para>
            <para>
            This method returns the elevation value at the given x,y coordinate interpolated either by nearest point value, 
            or by bilinear interpolation. 
            Note that the input x,y coordinates are assumed to be in a M x N grid where x is in the interval [0,N] and y 
            in [0,M] and each point sample is taken to be centered in the grid cell like in the following 2x2 example.
            <code>
            +---+---+
            | * | * |
            +---+---+
            | * | * |
            +---+---+
            </code>
            In this example, the input point (0.5, 0.5) would return the exact value of the upper left pixel, whereas a bilinear 
            interpolation  of the point (1.5, 0.5) would return the linear blend between the two upper pixels.
            Sample points along the border region of the bitmap will be clamped to the border pixel values. See InterpolateWithNeighbors
            for a method which interpolates against neighbor bitmaps.
            For "PixelIsPoint" type grids where each point is taken to be the grid corners, the input coordinates must be transformed
            accordingly by offsetting the input coordinates by a half pixel. See the Viewport documentation for more on this offset transform.
            </para> 
            <see cref="T:TPG.GeoFramework.Contracts.IViewport"/>
             </summary>
            <param name="point">Input coordinate in the interval x = [0,Width], y = [0,Height]</param>
            <param name="bitmap">Input bitmap data.</param>
            <param name="method">Interpolation method</param>
            <returns>Interpolated value.</returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IBitmapInterpolation.InterpolateWithNeighbors(System.Windows.Point,TPG.GeoFramework.Map.Core.Contracts.BitmapData,TPG.GeoFramework.Map.Core.Contracts.BitmapData[],TPG.GeoFramework.Map.Core.Contracts.BitmapInterpolationMethod)">
            <summary>
            <para>
            Interpolate elevation from a bitmap with optional neighbour bitmaps. 
            </para>
            <para>
            This method works as the above interpolation method, except that the border region is blended with the given neighbor 
            bitmaps, so that an input point where x &lt;= 0.5 will be linearly blended with the West neigbor bitmap if given, 
            whereas x &gt; W - 0.5 will blend with the Eastern neighbor bitmap. 
            The neighbor bitmaps are indexed according to the NeighDir enum, which is ordered clockwise starting with 0 in the NW corner. 
            </para>
            </summary>
            <param name="point">Input coordinate generally in the interval x = [0,Width], y = [0,Height]. We allow coordinates outside
            of this interval provided that a corresponding neighbor bitmap is given.</param>
            <param name="bitmap">Input bitmap data.</param>
            <param name="neighbors">Neighbor bitmaps given as an 8-entry array where 0 is NW and the rest of the neighbors are ordered 
            clockwise. Unused neighbor bitmaps are set to null.</param>
            <param name="method">Interpolation method</param>
            <returns>Interpolated value.</returns>
        </member>
        <member name="T:TPG.GeoFramework.Map.Core.Contracts.ICategorizedLayerFactory">
            <summary>
            Interface for factory for creating categorized layers
            </summary>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.ICategorizedLayerFactory.New(System.String)">
            <summary>
            Creates a new categorized layer.
            </summary>
            <param name="layerName">Categorized layer name to create.</param>
            <returns>List of raster layer data for the categorized layer.</returns>
        </member>
        <member name="T:TPG.GeoFramework.Map.Core.Contracts.ElevationAnalysisParameters">
            <summary>
            Contains parameters for elevation analysis.
            </summary>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.ElevationAnalysisParameters.#ctor">
            <summary>
            Creates a new instance of ElevationAnalysisParameters.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.ElevationAnalysisParameters.ObserversMap">
            <summary>
            Get map of observer id to observer instance.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.ElevationAnalysisParameters.Observers">
            <summary>
            Get list of observers.
            </summary>
        </member>
        <member name="T:TPG.GeoFramework.Map.Core.Contracts.ObserverType">
            <summary>
            Observer type definition.
            </summary>
        </member>
        <member name="F:TPG.GeoFramework.Map.Core.Contracts.ObserverType.LineOfSight">
            <summary>
            Line of sight observer.
            </summary>
        </member>
        <member name="F:TPG.GeoFramework.Map.Core.Contracts.ObserverType.MaxMinElevation">
            <summary>
            Max min elevation observer.
            </summary>
        </member>
        <member name="T:TPG.GeoFramework.Map.Core.Contracts.IObserver">
            <summary>
            Interface for observer
            </summary>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IObserver.Render(System.Windows.Media.DrawingContext,TPG.GeoFramework.Contracts.Geo.Context.IGeoContext,TPG.GeoUnits.IGeoUnitsSetting)">
            <summary>
            Render observer.
            </summary>
            <param name="dc">Drawing context.</param>
            <param name="geoContext">Geo context.</param>
            <param name="geoUnitsSetting">Geo unit settings.</param>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IObserver.ObserverType">
            <summary>
            Get observer type.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IObserver.Id">
            <summary>
            Get observer id.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IObserver.Position">
            <summary>
            et or set observer position.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IObserver.RadiusMeters">
            <summary>
            Get or set observer radius.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IObserver.HeightAboveGround">
            <summary>
            Get or set observer height above ground.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IObserver.Dirty">
            <summary>
            Get or set if observer is dirty.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IObserver.DataResolution">
            <summary>
            Target resolution for the elevation data in m/pixel. If not given,
            the target resolution is calculated from the viewport resolution.
            </summary>
        </member>
        <member name="T:TPG.GeoFramework.Map.Core.Contracts.IObserverElevationData">
            <summary>
            Interface for elevation data for observer.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IObserverElevationData.MaximumHeightPosition">
            <summary>
            Maximum height position.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IObserverElevationData.MinimumHeightPosition">
            <summary>
            Minimum height position.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IObserverElevationData.MaximumHeight">
            <summary>
            Maximum height.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IObserverElevationData.MinimumHeight">
            <summary>
            Minimum height.
            </summary>
        </member>
        <member name="T:TPG.GeoFramework.Map.Core.Contracts.IMaxMinElevationObserver">
            <summary>
            Interface for max min elevation observer.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IMaxMinElevationObserver.Legend">
            <summary>
            Get or set legend with colors used to visualize elevation.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IMaxMinElevationObserver.FontForegroundColor">
            <summary>
            Get or set foreground color for max min elevation text.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IMaxMinElevationObserver.FontBackgroundColor">
            <summary>
            Get or set background color for max min elevation text.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IMaxMinElevationObserver.FontSize">
            <summary>
            Get or set font size for max min elevation text.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IMaxMinElevationObserver.FontName">
            <summary>
            Get or set font name for max min elevation text.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IMaxMinElevationObserver.MarkerColor">
            <summary>
            Get or set color for max min elevation marker.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IMaxMinElevationObserver.MarkerBackgroundColor">
            <summary>
            Get or set background color for max min elevation marker.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IMaxMinElevationObserver.MarkerThickness">
            <summary>
            Get or set thickness for max min elevation marker.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IMaxMinElevationObserver.IsElevationColoringEnabled">
            <summary>
            Get or set if elevation is colored according to the elevation legend.
            </summary>
        </member>
        <member name="T:TPG.GeoFramework.Map.Core.Contracts.ILineOfSightObserver">
            <summary>
            Interface for line of sight observer.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.ILineOfSightObserver.VisibleColor">
            <summary>
            Color of areas that are visible.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.ILineOfSightObserver.HiddenColor">
            <summary>
            Color of areas that are not visible.
            </summary>
        </member>
        <member name="T:TPG.GeoFramework.Map.Core.Contracts.IElevationLegendItem">
            <summary>
            Interface for elevation legend item.
            </summary>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IElevationLegendItem.CLone">
            <summary>
            Clone legend item.
            </summary>
            <returns>Cloned legend item.</returns>
        </member>
        <member name="E:TPG.GeoFramework.Map.Core.Contracts.IElevationLegendItem.DataUpdated">
            <summary>
            Event raised when data is updated.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IElevationLegendItem.MinimumElevation">
            <summary>
            Get or set minimum elevation value.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IElevationLegendItem.MaximumElevation">
            <summary>
            Get or set maximum elevation value.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IElevationLegendItem.MaximumColor">
            <summary>
            Get or set maximum elevation color.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IElevationLegendItem.MinimumColor">
            <summary>
            Get or set minimum elevation color.
            </summary>
        </member>
        <member name="T:TPG.GeoFramework.Map.Core.Contracts.DataUpdatedEventHandler">
            <summary>
            Event handler for data updated event.
            </summary>
            <param name="sender">Event source.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="T:TPG.GeoFramework.Map.Core.Contracts.IElevationLegend">
            <summary>
            Interface for elevation legend.
            </summary>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IElevationLegend.GetColor(System.Double)">
            <summary>
            Get color from elevation.
            </summary>
            <param name="elevation">Elevation in meters.</param>
            <returns>Color for elevation.</returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IElevationLegend.Clone">
            <summary>
            Clone legend.
            </summary>
            <returns>Cloned legend.</returns>
        </member>
        <member name="E:TPG.GeoFramework.Map.Core.Contracts.IElevationLegend.DataUpdated">
            <summary>
            Event raised when data is updated.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IElevationLegend.Items">
            <summary>
            Get list of legend items.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IElevationLegend.ElevationOffset">
            <summary>
            Get or set elevation offset.
            </summary>
        </member>
        <member name="T:TPG.GeoFramework.Map.Core.Contracts.IElevationAnalysisCalculator">
            <summary>
            Interface for calculator to perform elevation calculations.
            </summary>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IElevationAnalysisCalculator.CalculateBitmapAsync(System.Threading.CancellationToken)">
            <summary>
            Update/create bitmap with elevation analysis data.
            </summary>
            <param name="ct">Cancelation token to cancel current calculation.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:TPG.GeoFramework.Map.Core.Contracts.IElevationData">
            <summary>
            Interface for the elevation data calculation class.
            </summary>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IElevationData.CalcElevation(System.Double,System.Double,System.Double)">
            <summary>
            Calculate elevation. This method will calculate the elevation in the given position. The resolution
            parameter determines how hig resolution data we will base the calculation on. If the highest data
            resolution in the data set at this point is lower than the required value, the highest available
            resolution will be used.
            </summary>
            <param name="lat">Latitude of the query point</param>
            <param name="lon">Longitude of the query point</param>
            <param name="resolution">Minimum resolution of the data we want to base the calculation on.</param>
            <returns>Interpolated elevation in the query point.</returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IElevationData.CalcElevationAsync(System.Double,System.Double,System.Double)">
            <summary>
            Calculate elevation asynchronously. This method returns a task object which calculates the
            elevation in the given position asynchronously and with the given resolution. See above for 
            more on the resolution parameter.
            </summary>
            <param name="lat">Latitude of the query point</param>
            <param name="lon">Longitude of the query point</param>
            <param name="resolution">Minimum resolution of the data we want to base the calculation on.</param>
            <returns>A task object which returns the interpolated elevation in the query point.</returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IMapResources.ClearLayerData">
            <summary>
            Remove all layers, including categorized layers.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IMapResources.RasterLayerDataGeneration">
            <summary>
            Generation counter for the raster layer data structure.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IMapResources.RasterLayerDataOrder">
            <summary>
            Get or set a list of raster layer data ids that represents the order the layers are rendered.
            The first id in the list is the first layer to be rendered and the last id in the list is the last layer to be rendered (on top of the other layers).
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IMapResources.RasterLayerDataFactory">
            <summary>
            Gets the Raster Layer Data factory to use.
            </summary>
        </member>
        <member name="T:TPG.GeoFramework.Map.Core.Contracts.IMapRevisionManager">
            <summary>
            Revision manager for map data.
            </summary>
            Each revision is identified by an integer number. Higher numbers indicate newer revisions. Each
            revision for a map source is stored as a list of RevisionInfoEntry objects. Each of these contain
            the revision number as well as a list of bounding boxes with optional min/max quadtree levels that
            are affected by this revision.
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IMapRevisionManager.CheckRevision(TPG.GeoFramework.Map.Proto.CheckRevision)">
            <summary>
            Check if we have the newest revision of the given map source.
            </summary>
             <param name="req">Revision check structure containing the map source ID and the newest revision we have.</param>
            <returns>RevisionInfo structure containing a list of revision changes up to the newest revision.</returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IMapRevisionManager.AddRevision(System.String,TPG.GeoFramework.Map.Proto.RevisionInfoEntry)">
            <summary>
            Add a new revision to the map source.
            </summary>
            <param name="mapSignature">Which map source we add the revision to</param>
            <param name="revisionInfoEntry">Change info for the revision.</param>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IMapRevisionManager.GetRevision(System.String,System.Int32)">
            <summary>
            Get the revisionInfo for the given map signature and revision.
            </summary>
            <param name="mapSignature">Map source to get revision info for.</param>
            <param name="revision">Which revision number we want</param>
            <returns>Revision info change structure for the given revision.</returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IMapRevisionManager.AddRevisionDir(System.String,System.String)">
            <summary>
            Specify directory where all revision files are located for this map set.
            </summary>
            This method will also load the initial set of revisions from the files in this directory.
            Note that a signature may point to several revision directories, in order to support map packages.
            <param name="mapSignature">Map set signature for which to set the path.</param>
            <param name="path">Full path to directory.</param>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IMapRevisionManager.LoadNewRevisions(System.String)">
            <summary>
            Load revision info from XML files.
            </summary>
            This method will check the revision path for the given map signature and load revision 
            info from all files named after the pattern rvnXXXX.xml where XXXX is a number.
            <param name="mapSignature">Map set signature for which to set the path.</param>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IMapRevisionManager.CheckForNewRevisions">
            <summary>
            Scan all revision paths from all map signatures for new revision files and load them.
            </summary>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IMapRevisionManager.AddRevisionFile(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IMapService.GetMapAsync(TPG.GeoFramework.Contracts.IViewport,TPG.GeoFramework.MapServiceInterfaces.IMapContentQuery)">
            <summary>
            Get a map covering the given viewport with the given map content characteristics.
            </summary>
            <param name="vp">Viewport defining the size and projection of the map.</param>
            <param name="mcq">Map content specification, including map signature, active groups/layers, compression parameters etc.</param>
            <returns>ID of the map request. Can be used to query results with GetResult.</returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IMapService.GetMapAsync(TPG.GeoFramework.Contracts.IRasterProjector,TPG.GeoFramework.MapServiceInterfaces.IMapContentQuery,System.Double)">
            <summary>
            Get a map covering the given raster projector with the given map content characteristics.
            </summary>
            <param name="rp">Raster projection defining the size and projection of the map.</param>
            <param name="mcq">Map content specification, including map signature, active groups/layers, compression parameters etc.</param>
            <param name="nominalScale">Scale to draw the map in.</param>
            <returns>ID of the map request. Can be used to query results with GetResult.</returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IMapService.GetMapTileAsync(System.UInt64,TPG.GeoFramework.MapServiceInterfaces.IMapContentQuery)">
            <summary>
            Get a map covering a specific tile in and quad tree.
            </summary>
            <param name="tileId">ID of the quad tree tile.</param>
            <param name="mcq">Map content specification. Must include tile cache quadtree specification</param>
            <returns>ID of the map request. Can be used to query results with GetResult.</returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IMapService.Cancel(System.Int32)">
            <summary>
            Cancel a request. This method will remove the given request ID from the processing queues.
            </summary>
            <param name="reqId">ID of the request to cancel.</param>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IMapService.IsCompleted(System.Int32)">
            <summary>
            Check if a given request is finished.
            </summary>
            <param name="reqId"></param>
            <returns></returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IMapService.GetResult(System.Int32)">
            <summary>
            Get the result of a map request. 
            </summary>
            <param name="reqId"></param>
            <returns>Result object if the request was complete. Null if not.</returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IMapServiceCatalogManager.WaitForServiceClientConnection">
            <summary>
            Block until the service client has successfully connected to the catalog service.
            </summary>
        </member>
        <member name="T:TPG.GeoFramework.Map.Core.Contracts.IMapServiceManager">
            <summary>
            Map service manager interface. Used to get map service objects from connection info.
            </summary>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IMapServiceManager.GetService(TPG.GeoFramework.MapServiceInterfaces.IMapContentQuery,System.Int32)">
            <summary>
            Get service based on connection info. Service object is created if it does not
            exist
            </summary>
            <param name="mcq">Map content query</param>
            <param name="timeout">Timeout in ms</param>
            <returns></returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IMapServiceManager.GetRunningServices">
            <summary>
            Gets all active/running services
            </summary>
            <returns>Returns dictionary, each element contains [sessionId, service]</returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IMapServiceManager.GetServiceIds">
            <summary>
            Gets all registered service ids
            </summary>
            <returns>List of all service ids</returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IMapServiceManager.ScanServices">
            <summary>
            Scans all running services. 
            </summary>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IMapServiceManager.GetSequenceProvider">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="E:TPG.GeoFramework.Map.Core.Contracts.IMapServiceManager.Disposing">
            <summary>
            Event fired when map service manager is disposing.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IRasterLayerData.VisualizationDirty">
            <summary>
            Get or set if layer visualization is dirty. Will cause a redraw of the map layers.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IRasterLayerData.PixelsPerCm">
            <summary>
            Resolution of target display. This value is used to calculate line thickness etc on vector maps.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IRasterLayerData.UseTileCache">
            <summary>
            Use quadtree based tile cache for rendering. 
            This is recommended unless you have a very small or very static map. The alternative is to refetch
            the entire map raster from the map server each time the viewport changes.
            Default is true.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IRasterLayerData.HasNoDataSource">
            <summary>
            True if no datasource associated with the layer.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IRasterLayerData.TileCacheSpec">
            <summary>
            Parameters for tile cache. If no specific parameters are given, the default is a global tile cache in
            google mercator projection with 256 pixel tiles.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IRasterLayerData.DataDirty">
            <summary>
            Flags that the data has changed. This might cause render layers to be recreated thus giving a performance penalty.
            </summary>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IMapTileCache.CreateRasterProjector(System.UInt64)">
            <summary>
            Create a raster projector for a tile
            </summary>
            <param name="tileId"></param>
            <returns>A raster projector for the given tile ID with correct projection and position</returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IMapTileCache.CreateRasterProjector(TPG.GeoFramework.Map.Core.Contracts.BitmapTileIndex)">
            <summary>
            Create a raster projector for a contigous set of tiles.
            </summary>
            <param name="ti"></param>
            <returns></returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IMapTileCache.CalcTileIndex(TPG.GeoFramework.Contracts.IRasterProjector,TPG.GeoFramework.Map.Core.Contracts.BitmapTileIndex,System.Double,System.Boolean,System.Double)">
            <summary>
            Calculate a bitmap index which represents the level and grid limits of the tiles intersecting the given viewport at the best matching resolution.
            This method will update the tile cache and load tiles as necessary.
            </summary>
            <param name="rasterProjector">RasterProjector to check tiles against.</param>
            <param name="prevIndex">Previous index.</param>
            <param name="pixelScale">Adjusts the resolution parameter, range. 
                1.0 guarantees that the pixels are at least the same resolution as the viewport resolution. 2.0 
                allows the pixels to be up to 2x as big as the viewport resolution.
            </param>
            <param name="allowTileWraparound"></param>
            <param name="targetResolution">If this parameter is given > 0.0, this resolution is used instead of the raster projector resolution
            to decide the quadtree level for the active tile set.</param>
            <returns></returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IMapTileCache.CalcReadyTileIndex(TPG.GeoFramework.Contracts.IRasterProjector,System.Double)">
            <summary>
            Calculate a bitmap index which represents the level and grid limits of the tiles intersecting the given viewport at the best matching resolution.
            This method will only return existing tiles that have already been loaded.
            </summary>
            <param name="rasterProjector">RasterProjector to check tiles against.</param>
            <param name="pixelScale"></param>
            <returns></returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IMapTileCache.GetOrCreateTile(System.UInt64)">
            <summary>
            Get or create a tile in the quadtree with the given TileID.
            </summary>
            <param name="tileId">ID of the requested tile.</param>
            <returns>If the given tile ID already exists in the quadtree, it is returned as is, if not a newly created tile is returned.</returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IMapTileCache.RemoveEmptyLeafNodes">
            <summary>
            Remove leaf nodes with Status == Empty from the quadtree.
            </summary>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IMapTileCache.GetNearestTileResolution(TPG.GeoUnits.GeoPos,System.Double)">
            <summary>
            Find the nearest resolution tile in the tree which has already been loaded and that containins the given geo point.
            </summary>
            <param name="pos">Geographical point</param>
            <param name="resolution">Resolution in m/pixel</param>
            <returns></returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IMapTileCache.GetCreateTileResolution(TPG.GeoUnits.GeoPos,System.Double)">
            <summary>
            Find or create a tile in the tree containing the given geo point with equal to or better than the requested resolution.
            Note that this method may return a tile with OutsideResolution status. If you want the nearest highest resolution tile
            use GetCreateNearestTileResolution instead.
            </summary>
            <param name="pos">Geographical point</param>
            <param name="resolution">Resolution in m/pixel</param>
            <returns></returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IMapTileCache.GetCreateNearestTileResolution(TPG.GeoUnits.GeoPos,System.Double)">
            <summary>
            Find or create a tile in the tree containing the given geo point with the highest available resolution, equal to or better 
            than the requested resolution.
            </summary>
            <param name="pos">Geographical point</param>
            <param name="resolution">Resolution in m/pixel</param>
            <returns></returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IMapTileCache.TileContains(System.UInt64,TPG.GeoUnits.GeoPos)">
            <summary>
            Check if tile contains a geographic point. This method will check (in tile coordinates)
            if the given geographical point is contained in the tile with the given ID.
            </summary>
            <param name="tileId">ID of tile to check.</param>
            <param name="pos">Geographical position to check.</param>
            <returns>True if point is inside tile, false if not.</returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IMapTileCache.CalcMaxTileLevel(TPG.GeoFramework.Contracts.IRasterProjector,System.Double)">
            <summary>
            Calculate the maximum quadtree level needed to get the resolution of the
            given rasterProjector.
            </summary>
            <param name="rasterProjector">Specifies the resolution of the rendering target.</param>
            <param name="maxResolution">If given, limits the resolution to be less than or equal to this value.</param>
            <returns></returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IMapTileCache.TileIntersect(TPG.GeoFramework.Contracts.IRasterProjector,System.UInt64)">
            <summary>
            Check if the tile intersects the given raster projector
            </summary>
            <param name="rasterProjector">A raster projector to check against.</param>
            <param name="tileId">The tile ID to check.</param>
            <returns>True if tile intersects, false if not.</returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IMapTileCache.CalcTileLevel(TPG.GeoFramework.Contracts.IRasterProjector,System.Int32@,System.Double)">
            <summary>
            Calculate the required quadtree level to have high enough resolution for the given viewport 
            </summary>
            <param name="rasterProjector"></param>
            <param name="tileLevel">Tile level output</param>
            <param name="pixelScale">Adjusts the resolution parameter, range. 
            1.0 guarantees that the pixels are at least the same resolution as the viewport resolution. 2.0 
            allows the pixels to be up to 2x as big as the viewport resolution.
            </param>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IMapTileCache.MinRequestLevel">
            <summary>
            Minimum level for tile requests. This property can be used to limit requests of huge areas.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IMapTileCache.RootNominalScale">
            <summary>
            Nominal scale for a level 0 tile.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IMapTileCache.TileSize">
            <summary>
            Tile size in pixels. Tiles have equal width and height.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IMapTileCache.CurrentRevision">
            <summary>
            Current revision numbers for the tile cache. This number is updated regularly from the TileCacheManager.
            There is one revision number for each map dataset and subset in the map
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IMapTileCache.Tiles">
            <summary>
            The tiles of the quadtree, indexed on TileID.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IMapTileCache.TilesLock">
            <summary>
            Mutex for exclusive access to the quadtree tiles.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IMapTileCache.ResolutionAreas">
            <summary>
            List of bounding boxes with max resolution for the data set connected with this tile cache.
            Note: This is stored here for convenience, the authoritative list of resolution areas should be fethed from 
            the MapEntry in the ServiceResolver.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IMapTileCache.NumTotal">
            <summary>
            Total number of tiles in cache
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IMapTileCache.NumWanted">
            <summary>
            Number of tiles that should be downloaded
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IMapTileCache.NumReady">
            <summary>
            Number of tiles that are ready in the cache
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IMapVisualSettings.PixelScale">
            <summary>
            Map resolution parameter 1.0 guarantees that the pixels are at least 
            the same resolution as the viewport resolution. 
            2.0  allows the pixels to be up to 2x as big as the viewport resolution.
            </summary>
        </member>
        <member name="T:TPG.GeoFramework.Map.Core.Contracts.IQuadTileCache">
            <summary>
            Interface for quadtree based tile cache.
            </summary>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IQuadTileCache.RemoveEmptyLeafNodes(System.UInt64)">
            <summary>
            Prune the quadtree by deleting all leaf nodes that are empty, i.e. have status "Empty".
            </summary>
            <param name="tileId">Root tile ID</param>
            <returns></returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IQuadTileCache.FindIntersectingTiles(TPG.GeoFramework.Geo.Proto.BoundingBox,TPG.GeoFramework.Contracts.IProjector,System.Int32,System.Int32)">
            <summary>
            Find all quad tiles intersecting the given bounding box
            </summary>
            <param name="boundingBox">Bounding box in lat/lon</param>
            <param name="projector">Projector to convert from lat/lon to tile coordinates. (Typically the base tile viewport)</param>
            <param name="minLevel">If non-negavite, only tiles with level higher than or equal to this level are returned.</param>
            <param name="maxLevel">If non-negative, only tiles with level lower than or equal to this level are returned.</param>
            <returns>List of intersecting tiles.</returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IQuadTileCache.GetTile(System.UInt64)">
            <summary>
            Get a tile in the quadtree.
            </summary>
            If the given Tile ID does not exist, null is returned.
            <param name="tileId">Quadtree tile id to return.</param>
            <returns>Requested tile or null.</returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IQuadTileCache.GetOrCreateTile(System.UInt64)">
            <summary>
            Get a tile in the quadtree. 
            </summary>
            If the given Tile ID does not exist, a new tile is created and initialized.
            <param name="tileId">Quadtree tile id to return.</param>
            <returns>Requested tile.</returns>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.IQuadTileCache.Tiles">
            <summary>
            The tiles that are cached.
            </summary>
        </member>
        <member name="T:TPG.GeoFramework.Map.Core.Contracts.TileState">
            <summary>
            State of tile in QuadTileCache
            </summary>
        </member>
        <member name="F:TPG.GeoFramework.Map.Core.Contracts.TileState.Empty">
            <summary>
            No data exists in the tile, no request has been made.
            </summary>
        </member>
        <member name="F:TPG.GeoFramework.Map.Core.Contracts.TileState.Queued">
            <summary>
            Tile has been submitted to the data reader queue
            </summary>
        </member>
        <member name="F:TPG.GeoFramework.Map.Core.Contracts.TileState.Requested">
            <summary>
            A data request has been submitted, but no data has been received yet.
            </summary>
        </member>
        <member name="F:TPG.GeoFramework.Map.Core.Contracts.TileState.Received">
            <summary>
            Data has been received, but the raw data has not been processed yet.
            </summary>
        </member>
        <member name="F:TPG.GeoFramework.Map.Core.Contracts.TileState.Ready">
            <summary>
            Data has been recieved and processed. Tile is ready for use.
            </summary>
        </member>
        <member name="F:TPG.GeoFramework.Map.Core.Contracts.TileState.Cancelled">
            <summary>
            Tile has been requested and cancelled again. Typically used when a
            tile is deleted while it has Requested state.
            </summary>
        </member>
        <member name="F:TPG.GeoFramework.Map.Core.Contracts.TileState.OutsideArea">
            <summary>
            Tile request failed due to the request being ouside of the data area.
            </summary>
        </member>
        <member name="F:TPG.GeoFramework.Map.Core.Contracts.TileState.OutsideResolution">
            <summary>
            Tile request failed due to the request being outside of the resolution range of the data set.
            </summary>
        </member>
        <member name="F:TPG.GeoFramework.Map.Core.Contracts.TileState.Error">
            <summary>
            Tile request failed due to an unrecoverable error.
            </summary>
        </member>
        <member name="F:TPG.GeoFramework.Map.Core.Contracts.TileState.Unavailable">
            <summary>
            Tile request failed due to a temporary failure. A new request can be made later.
            </summary>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IQuadTileDataFactory.Create(System.UInt64)">
            <summary>
            Create a tile data item.
            </summary>
            The factory should also initialize the viewport property of the IQuadTileData.
            <param name="tileId"></param>
            <returns></returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IServiceRequestManager.SetPollingRequest(TPG.GeoFramework.Map.Core.Contracts.TileDataRequest)">
            <summary>
            Set a request as polling request, taking up resources on the relevant service type.
            </summary>
            <param name="req"></param>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IServiceRequestManager.FinishRequest(TPG.GeoFramework.Map.Core.Contracts.TileDataRequest)">
            <summary>
            Finish a polling request, freeing up resources for polling requests on the relevant service type.
            </summary>
            <param name="req"></param>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IServiceRequestManager.CanAddPollingRequest(TPG.GeoFramework.Map.Core.Contracts.TileDataRequest)">
            <summary>
            Check relevant service type if the given request can be added as a polling request.
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.IServiceRequestManager.SetMaxQueueTime(TPG.GeoFramework.MapServiceInterfaces.MapServiceType,System.Int64)">
            <summary>
            Set maximum queue time for pending requests for the given service type
            </summary>
            <param name="serviceType"></param>
            <param name="timeMs"></param>
        </member>
        <member name="T:TPG.GeoFramework.Map.Core.Contracts.CacheStats">
            <summary>
            Cache statistics, mainly for use in the status view model
            </summary>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.ITileCacheManager.GetTileCache(TPG.GeoFramework.MapServiceInterfaces.IMapContentQuery)">
            <summary>
            Get a tile cache with the given parameters. A new cache will be created and initialized if no existing cache could be found.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.ITileCacheManager.LoadTileAsync(TPG.GeoFramework.Map.Core.Contracts.IMapTileCache,TPG.GeoFramework.MapServiceInterfaces.IMapContentQuery,System.UInt64)">
            <summary>
            Load a tile from the tile cache asynchronously.
            </summary>
            <param name="tileCache">The tile cache to load from.</param>
            <param name="mapContentQuery"></param>
            <param name="tileId">The ID of the tile to be loaded.</param>
            <returns>A Task returning a TileRequest object.</returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.ITileCacheManager.ClearTileCache(TPG.GeoFramework.MapServiceInterfaces.IMapContentQuery)">
            <summary>
            Clear all tiles in the tile cache corresponding to the given content query. 
            This method will also cancel any pending requests on this cache.
            </summary>
            <param name="q"></param>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.ITileCacheManager.MaxCacheSize">
            <summary>
            Maximum tile cache size in Mb
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.ITileCacheManager.CurrentCacheSize">
            <summary>
            Current tile cache size in Mb
            </summary>
        </member>
        <member name="T:TPG.GeoFramework.Map.Core.Contracts.TileRequestFinishedHandler">
            <summary>
            Delegate for tiles are received.
            </summary>
            <param name="mapSignature">The maps signature of the received tile.</param>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.ITileDataReader.AddDataRequest(TPG.GeoFramework.Map.Core.Contracts.IMapTileCache,TPG.GeoFramework.MapServiceInterfaces.IMapContentQuery,System.UInt64)">
            <summary>
            Add a request for async loading of a tile.
            </summary>
            <param name="tileCache">The tile cache to load tile in</param>
            <param name="tileId">ID of the wanted tile</param>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.ITileDataReader.CancelDataRequest(TPG.GeoFramework.Map.Core.Contracts.IMapTileCache,System.UInt64)">
            <summary>
            Cancel a request for tile data.
            </summary>
            <param name="tileCache"></param>
            <param name="tileId"></param>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.ITileDataReader.WorkQueueSize">
            <summary>
            Number of outstanding requests in the data reader.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.ITileDataReader.MaxRequestAge">
            <summary>
            Maximum age in ms for a request before it is thrown out of the queue. Default = 5000.
            </summary>
        </member>
        <member name="E:TPG.GeoFramework.Map.Core.Contracts.ITileDataReader.TileRequestFinished">
            <summary>
            Event fired when a tile is received.
            </summary>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.ITileDataRequester.RequestData(TPG.GeoFramework.Map.Core.Contracts.IMapTileCache,System.UInt64)">
            <summary>
            Request data for the given tile id.
            </summary>
            <param name="tileId"></param>
        </member>
        <member name="T:TPG.GeoFramework.Map.Core.Contracts.ResolutionArea">
            <summary>
            This helper class defines the maximum data resolution for a subarea of a tile cache.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.ResolutionArea.GeoRect">
            <summary>
            Bounding box for the sub-area in tile cache coordinates.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.ResolutionArea.MaxResolution">
            <summary>
            Maximum resolution for the area in m/pixel.
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.ResolutionArea.MinScale">
            <summary>
            Minimum applicable map scale for this area
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.ResolutionArea.MaxScale">
            <summary>
            Maximum applicable map scale for this area
            </summary>
        </member>
        <member name="T:TPG.GeoFramework.Map.Core.Contracts.ShaderParametersUtils">
            <summary>
            Utilities for getting shader parameter classes from map layers.
            </summary>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.ShaderParametersUtils.GetRasterLayerWithElevationShading(System.Collections.Generic.IEnumerable{TPG.GeoFramework.Map.Core.Contracts.IRasterLayerData})">
            <summary>
            Finds the IRasterLayerData that has elevation shading parameters set.
            </summary>
            <param name="layers">The set of IRasterLayerData</param>
            <returns>The layer if found, null otherwise.</returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.ShaderParametersUtils.GetRasterLayerDataWithMapEffectsShading(System.Collections.Generic.IEnumerable{TPG.GeoFramework.Map.Core.Contracts.IRasterLayerData})">
            <summary>
            Finds all layers that support Map Effects.
            </summary>
            <param name="layers">The layers to search through.</param>
            <returns>The list of layers.</returns>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.ITicker.Ticks">
            <summary>
            returns current tick
            </summary>
        </member>
        <member name="T:TPG.GeoFramework.Map.Core.Contracts.SystemTicker">
            <summary>
            Simple stopwatch based integer ticker with custom ticks/sec
            </summary>
        </member>
        <member name="P:TPG.GeoFramework.Map.Core.Contracts.TileDataRequest.RefetchInterval">
            <summary>
            Time in ms to wait before retrying a temporarily failed request.
            </summary>
        </member>
        <member name="T:TPG.GeoFramework.Map.Core.Contracts.CompareDataRequestsDescending">
            <summary>
            Compare two data requests in relation to priority and age.
            </summary>
        </member>
        <member name="T:TPG.GeoFramework.Map.Core.Contracts.TileId">
            <summary>
            Quadtree tile ID.
            </summary>
            This utility class is used to encode and decode 64-bits quadtree tile IDs
            The Tile ID consists of the following fields (from left to right, MSB first):
            4 bits: Quadtree ID
            8 bits: Level - Quadtree level.
            26 bits: X Index - column index in the quadtree on the given level.
            26 bits: Y Index - row index in the quadtree on the given level.
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.TileId.Encode(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Encode the given level, column and row to a quadtree index.
            </summary>
            <param name="lvl">Quadtree level</param>
            <param name="x">Column index</param>
            <param name="y">Row index</param>
            <param name="quadid">Quadtree ID </param>
            <returns></returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.TileId.Decode(System.UInt64,System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>
            Decode the given quadtree index to level, column and row.
            </summary>
            <param name="tileId"></param>
            <param name="lvl"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="T:TPG.GeoFramework.Map.Core.Contracts.TileId2">
            <summary>
            Quadtree tile ID - compatible with javascript's 53-bit precision double encoded 'integers'
            </summary>
            This utility class is used to encode and decode 64-bits quadtree tile IDs
            The Tile ID consists of the following fields (from left to right, MSB first):
            4 bits: Quadtree ID
            5 bits: Level - Quadtree level. Max legal value is 22, because of limits of x/y precision
            22 bits: X Index - column index in the quadtree on the given level.
            22 bits: Y Index - row index in the quadtree on the given level.
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.TileId2.Encode(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Encode the given level, column and row to a quadtree index.
            </summary>
            <param name="lvl">Quadtree level</param>
            <param name="x">Column index</param>
            <param name="y">Row index</param>
            <param name="quadid">Quadtree ID </param>
            <returns></returns>
        </member>
        <member name="M:TPG.GeoFramework.Map.Core.Contracts.TileId2.Decode(System.UInt64,System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>
            Decode the given quadtree index to level, column and row.
            </summary>
            <param name="tileId"></param>
            <param name="lvl"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
    </members>
</doc>
